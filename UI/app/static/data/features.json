{
  ".": {
      "test.feature": "  \nFeature: check AMNOVIS Workflow\n  \n  @AMNOVIS @d\n  Scenario: loading a Pre execution\n    Given load dict\n\n  @AMNOVIS @d\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 5\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://qa.staging.oqton.ai/|vidhi.kandolkar+amnovis@oqton.com|Oqton123#|Inbox|Inbox|To check inbox icon on Login page(step1 to 4)|\n\n \n @AMNOVIS\n  Scenario:Show Cancelled Part\n    When Show Cancelled Parts\n    Then Verify Part is Cancelled, \"123\""
  },
  "AMNOVIS": {
      "AMNOVIS_Workflow.feature": "\nFeature: Complete AMNOVIS Workflow\n\n  @AMNOVIS @d\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n  \n\n  @AMNOVIS @d\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"10\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://amnovis.staging.oqton.ai/|vidhi.kandolkar+amnovis@oqton.com|Oqton123#|Profile|Profile|Check if User Login logged in. Step 1 - 3 |\n\n\n  @AMNOVIS @d\n  Scenario Outline: Create customer\n    When Create Customer,\"<customer_name>\"\n    Then Verifying \"Customer\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n      |customer_name|output_data_key|expected_data_key|title|\n      |SPEC-35 Customer|Customer Name|EXPECTED_CUSTOMER_NAME|Check if SPEC-35 Customer Has Been Created. Step 4 - 5|\n\n\n  @AMNOVIS \n  Scenario Outline: Create suppliers\n    When Create Suppliers,\"<supplier_name>\"\n    Then Verifying \"Supplier\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n      |supplier_name|output_data_key|expected_data_key|title|\n      |SPEC-35 Supplier|Supplier Name|EXPECTED_SUPPLIER_NAME|Check if SPEC-35 Supplier Has Been Created. Step 6 - 7|\n\n\n  @AMNOVIS @Z\n  Scenario Outline: Create material model Powder\n    When Create Material Model Powder,\"<material_model_name>\"\n    Then Verifying \"Material Model\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n     |material_model_name|output_data_key|expected_data_key|title|\n     |SPEC-35 Material Model Powder|Material Model Name Powder|EXPECTED_MATERIAL_MODEL_NAME|Check if SPEC-35 Material Model Has Been Created. Step 8 - 9|\n\n\n  @AMNOVIS \n  Scenario Outline: Create Material of model Powder\n    Given Create Material of model \"<material_model_name>\" <initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    Then Verifying \"Material\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Examples:\n      |material_model_name|initial_weight|price|file1|file_path|file2|output_data_key|expected_data_key|title|\n      |SPEC-35 Material Model Powder|50|110|LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|MATERIAL_MODEL_FOUND|EXPECTED_MATERIAL_MODEL_NAME|Check if Material Model name on Materials Page Step 10 - 11|\n\n\n#\n#  @AMNOVIS\n#  Scenario Outline: Create material model Resin\n#    Given Create Material Model Resin,\"<material_model_name>\"\n#    #And Capture itemID on \"Material Models\" and save as \"<key>\"\n#\n#\n#    Examples:\n#     |material_model_name|\n#     |SPEC-35 Material Model|\n##      |material_model_name|key|\n##      |SPEC-35 Material Model|mat_model1|\n#\n#  @AMNOVIS\n#  Scenario Outline: Create Material of model resin\n#    Given Create Material of model \"<material_model_name>\"\n#    Then Verifying \"<page_type>\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n#    Examples:\n#      |material_model_name|\n#      |SPEC-35 Material Model|\n\n\n  @AMNOVIS @Z\n  Scenario Outline: Create Manufacturers\n    When Create Manufacturers,\"<manufacturer_name>\"\n    Then Verifying \"Manufacturer\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n      |manufacturer_name|output_data_key|expected_data_key|title|\n      |SPEC-35 Manufacturer|Manufacturer_Name|EXPECTED_MANUFACTURER_NAME|Check if SPEC-35 Manufacturer Has Been Created. Step 12 - 13|\n\n  @AMNOVIS @Z\n  Scenario Outline: Create Tool Model Build Plate\n    When Create Tool Model Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n    Then Verifying \"Tool Model\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n      |tool_model_name|length_val|width_val|height_val|output_data_key|expected_data_key|title|\n      |SPEC-35 Tool Model|500|500| 500|Tool_Model_Name|EXPECTED_TOOL_MODEL_NAME|Check if SPEC-35 Tool Model Has Been Created. Step 14 - 15|\n\n  @AMNOVIS \n  Scenario Outline:Build Plate\n    When Create Tool Build Plate \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    Then Verifying \"Build Plate\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Examples:\n     |notes|file1|file_path|file2|output_data_key|expected_data_key|title|\n     |SPEC-35 Tool notes|LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|TOOL_MODEL_FOUND|EXPECTED_TOOL_MODEL_NAME|Check if SPEC-35 Tool Has Been Created. Step 16 - 17|\n\n  # @AMNOVIS @Z\n  # Scenario Outline: Create cell model SLM\n  #   When Create Cell Model SLM,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n  #   Then Verifying \"Cell Model\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n  #         Examples:\n  #     |cell_model_name_generic|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|output_data_key|expected_data_key|title|\n  #     |SPEC-35 Cell Model|100|190|610|Cell Model Name Generic|EXPECTED_cell_model_name_generic_SLM|SPEC-35 Cell Model of type SLM is created as a cell model|\n\n  # @AMNOVIS @Z\n  # Scenario Outline: Create cell SLM\n  #   When Create Cell SLM,\"<cell_name>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n  #   Then Verifying \"SLM Cell\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n  #    Examples:\n  #     |cell_name|serial_no|file1|file_path|file2|output_data_key|expected_data_key|title|\n  #     |SPEC-35 Cell 1|SPEC-35 Serial Number|LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|Cell Name Generic|EXPECTED_cell_name_generic|Check cell name|\n\n  @AMNOVIS @Z\n  Scenario Outline: Create cell model Generic\n    When Create Cell Model Generic,\"<cell_model_name_generic>\" \"<manufacturer>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    Then Verifying \"Generic Cell Model\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n      |cell_model_name_generic|manufacturer|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|output_data_key|expected_data_key|title|\n      |SPEC-35 Cell Model Generic| SPEC-35 Manufacturer|100|190| 610|Cell Model Name Generic|EXPECTED_cell_model_name_generic_GENERIC|Check if Generic SPEC-35 Cell Model Has Been Created. Step 18 - 19|\n\n  @AMNOVIS \n  Scenario Outline: Create cell Generic\n    When Create Cell Generic,\"<cell_name>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    Then Verifying \"Generic Cell\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n     |cell_name|serial_no|file1|file_path|file2|output_data_key|expected_data_key|title|\n     |SPEC-35 Cell Generic 1|SPEC-35 Serial Number|LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|Cell Name Generic|EXPECTED_CELL_NAME_GENERIC|Check if Generic SPEC-35 Cell Has Been Created. Step 20 - 21|\n     \n\n\n  @AMNOVIS @Z\n  Scenario Outline: Create locations\n    When Create Location,\"<location_name>\"\n    Then Verifying \"Location\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n      |location_name|output_data_key|expected_data_key|title|\n      |SPEC-35 Location|Location_Name|EXPECTED_LOCATION_NAME|Check if SPEC-35 Location Has Been Created. Step 23 - 24|\n\n  # @AMNOVIS @Z\n  #   Scenario Outline: Create Action Model SLM\n  #     When Create Action Model SLM,\"<action_model_name>\"\n  #     Then Verifying \"Action Model SLM\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n  #    Examples:\n  #     |action_model_name|output_data_key|expected_data_key|title|\n  #     |SPEC-35 SLM Action Model|action_model_generic|EXPECTED_action_model_name_generic|SPEC-35 SLM Action Model is created as an action model|\n\n\n    @AMNOVIS @Z\n    Scenario Outline: Create Action Model Generic\n      When Create Action Model Generic,\"<action_model_name>\"\n      Then Verifying \"Action Model Generic\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n\n\n        Examples:\n      |action_model_name|output_data_key|expected_data|title|\n      |SPEC-35 Generic Action Model 0|action_model_generic0|EXPECTED_ACTION_MODEL_NAME0_GENERIC|Check if SPEC-35 GENERIC Action Model 0 Has Been created. Step 29 - 30|\n      |SPEC-35 Generic Action Model 1|action_model_generic1|EXPECTED_ACTION_MODEL_NAME1_GENERIC|Check if SPEC-35 GENERIC Action Model 1 Has Been created. Step 29 - 30|\n\n\n\n  @AMNOVIS @123\n  Scenario Outline:Edit Action Model\n    When Edit Action Model,\"<file1>\" \"<file_path>\" \"<file2>\"\n    Then Verify this \"<output_data_key>\" \"<file2>\" \"<title>\" \" \"\n    # Then Verifying \"<page_type>\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n\n    Examples:\n      |file1|file_path|file2|output_data_key|title|\n      |LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|##actionModelFile2|Check if file SPEC-35_V3.0.pdf uploaded. Step |\n\n\n\n  @AMNOVIS @Z\n  Scenario Outline: Create Route Model\n    When Create Route Model,\"<route_model_name>\"\n    Then Verifying \"Route Model\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |route_model_name|output_data_key|expected_data|title|\n      |SPEC-35 Route Model|Route Model|EXPECTED_ROUTE_MODEL_NAME|Check if SPEC-35 Route Model has been created. Step 31 - 32|\n\n  @AMNOVIS\n  Scenario Outline: Create Part Model\n    When Create Part Model,\"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    Then Verifying \"Part  Model\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n\n\n     Examples:\n      |pm_type|part_model_name|file|file_path|output_data_key|expected_data|title|\n      |3D Geometry|SPEC-35 Part Model|K59YH14L-70A.stl|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|OriginalPartModelCreated|OriginalPartModelExpected|Check if SPEC-35 Part Model has been created. Step 33 - 34|\n\n  @AMNOVIS\n  Scenario Outline: Edit Part Model\n    When Edit Part Model and approve,\"<file1>\" \"<file_path>\" \"<file2>\"\n      Then Verifying files are uploaded on Part Model,\"<file1>\"\"<file2>\"\n      Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    Examples:\n      |file1|file_path|file2|status_type|expected_data|title|\n      |LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|Approved|Approved|Check if Part model status has been approved. Step 35 - 37|\n\n  # @AMNOVIS\n  # Scenario Outline: Scenario Outline name: Approve Part Model\n  #   When Approve Part Model\n  #   #Then Verifying Part Model is approved\n  #   Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n  #   Examples:\n  #   |status_type|expected_data|title|\n  #   |Approved|Approved|To check status as approved of the Part Model|\n\n\n  @AMNOVIS\n  Scenario Outline: Scenario Outline name: Edit Route Plan and Approve\n    When Edit Route Plan and approve\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    \n    Examples:\n    |status_type|expected_data|title|\n    |Approved|Approved|Check if Part Model status has been approved. Step 40|\n\n\n  @AMNOVIS\n  Scenario Outline: Create Rework Part Model\n    Given Create Rework Part Model,\"<rework_part_model_name>\"\n    Then Verifying \"Rework Part Model\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n        Examples:\n      |rework_part_model_name|output_data_key|expected_data|title|\n      |SPEC-35 Rework Part Model|rework_part_model_name|EXPECTED_REWORK_PART_MODEL_NAME|Check if SPEC-35 Rework Part Model is created. step 42 - 43|\n\n\n\n @AMNOVIS \n  Scenario Outline: Create Parts\n    Given Create Parts,<qty> \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\" \"<file3>\" \"<file4>\"\n    When Part id is created\n    Then Get Part IDs from Part Model details\n    And Assert that Part IDs match the expected values\n    And Show part details\n    And Verify part details\n\n    #Then Verifying Parts created,\"<element_to_find>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |qty|notes|file1|file_path|file2|file3|file4|element_to_find|expected_data|title|\n      |10|SPEC-35 Part Notes|LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|||Check if parts are created. step 44 - 45|\n\n#     @AMNOVIS\n#  Scenario Outline: Create Part Model\n#    When Create Part Model,\"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n#      Then Verifying Part Model created,\"<part_model_name>\" \"<title>\"\n#\n#\n#     Examples:\n#      |pm_type|part_model_name|file|file_path|title|\n#      |3D Geometry|SPEC-35 Part Model|STL_FILE (1).stl|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|Check Part Model Name|\n#      |3D Geometry|SPEC-35 Part Model|STL_FILE (2).stl|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|Check Part Model Name|\n\n#    @AMNOVIS\n#  Scenario Outline: Create Rework Part Models\n#    Given Open part model details page,\"<part_model_name>\"\n#    When Create Rework Part Model,\"<rework_part_model_name>\"\n#            Examples:\n#      |part_model_name|rework_part_model_name|\n#      |SPEC-35 Part Model|SPEC-35 Rework Part Model|\n\n# UAT-047 \n  @AMNOVIS\n  Scenario Outline: Create multiple Part Models\n    Given Create multiple part models,\"<pm_type>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    When Create Parts shown disabled for non approved Part Model\n      Examples:\n      |pm_type|file1|file_path|file2|\n      |3D Geometry|K59YH14L-70A.stl|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|Part_model_amnovis.stl|\n\n\n# UAT-048 \n     @AMNOVIS @d\n  Scenario Outline: Create 3 more parts from Part Models\n    Given Create Parts from Part Models,<qty>\n    When Part id is created\n\n    #Then Verifying Parts created,\"<element_to_find>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |qty|\n      |10|\n      |10|\n      |10|\n\n\n     @AMNOVIS @d\n  Scenario: Get partIds from Part Model and click part details page\n    When Get Part IDs from Part Model details\n    And Assert that Part IDs match the expected values\n    And Show part details\n    And Verify part details\n\n\n    @AMNOVIS @d\n Scenario: Create nest from Parts created and approve\n   When Create Nest from Parts created\n   And Approve Nest\n   Then View Nest details page of the approved Nest\n   \n\n  @AMNOVIS @d\n  Scenario Outline: Create order\n    Given Create an Order with <qty> Parts\n      Examples:\n     |qty|\n     |10|\n\n  @AMNOVIS @d\n  Scenario: Add Existing Parts\n    Given Add Existing Parts to line item\n\n @AMNOVIS @d\n  Scenario Outline: To Start Nest Action\n    When Start Action\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |In Progress|In Progress|Check if Nest Action status is in In Progress. step 61 - 62 |\n\n\n\n @AMNOVIS @d\n  Scenario Outline: To Pause Nest Action\n    When Pause Action\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Paused|Paused|Check if Nest Action status is in  Paused. step 63 - 64 |\n\n\n\n @AMNOVIS @d\n  Scenario Outline: To Resume Nest Action\n    When Resume Action\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |In Progress|In Progress|Check if Nest Action status is in In Progress. step 65 - 66|\n\n\n\n\n @AMNOVIS @d\n  Scenario Outline: To Finish Nest Action\n    When Finish Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    And  Verifying files are uploaded,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|Finished|Finished|Check if Nest Action status has been Finished. steps 67 - 68|\n\n\n @AMNOVIS @d\n  Scenario: To Check START button isn't present on Pending Action\n    When Selecting the action in Pending status\n    # Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    # Then Checking item does not exists, \"Start\", \"Verify Absence of 'START' Button on Action Details Page . steps 70\"\n    Then Verify Action button available on Action-details Page: \"Start\", title=\"Verify Absence of 'START' Button on Action Details Page . steps 70\"\n\n    #  Examples:\n    # |status_type|expected_data|title|\n    # |Finished|Finished|To check status of Action as Finished|\n\n\n\n\n @AMNOVIS @d\n  Scenario Outline:START Ready to Start status Action\n    When Selecting the action in Ready to Start status and starting the same\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |In Progress|In Progress|Check if Action status is in In Progress. step 71 - 72|\n\n\n\n @AMNOVIS @d\n  Scenario Outline:Reject Parts from Action Page\n    When Reject parts from action page, <qty> \"<reject_reason>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |qty|reject_reason|status_type|expected_data|title|\n    |3|qwe|In Progress|In Progress|Check if Action status has been Finished. step 73 - 74|\n\n\n @AMNOVIS @d\n  Scenario Outline:Reject and Rework Parts from Action Page\n    When Reject and Rework, <qty> \"<reject_reason>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |qty|reject_reason|status_type|expected_data|title|\n    |3|qwe|In Progress|In Progress|Check if Action status has been Finished. step 74 - 75|\n\n\n @AMNOVIS @d \n  Scenario Outline:Finish Rejected Action\n    When Finish Rejected Action\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Finished|Finished|Check if Action status has been Finished. step 75|\n\n\n @AMNOVIS\n  Scenario Outline:Cancel Action\n    When Cancel Action\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Cancelled|Cancelled|Check if Action status has been Cancelled. step 76 - 79|\n\n\n\n\n @AMNOVIS\n  Scenario:Print Report of Nested Part\n    When Print Report of Nested Part\n    # Verify report \n    Then Verify item exists, \"Print\", \"Check if Print Report is loaded. step 80\"\n\n @AMNOVIS\n  Scenario:Show Cancelled Part\n    When Show Cancelled Parts\n    # Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    Then Verify Part is Cancelled, \"123 step 81\"\n\n\n @AMNOVIS\n  Scenario Outline:Show Cancelled Nest\n    When Create nest to Cancel\n    And Approve Nest to cancel\n    And Cancel Nest Action\n    And Show Cancelled Nest\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Cancelled|Cancelled|Check if Nest Action status has been Cancelled. step 82 - 84|\n\n\n\n\n       @AMNOVIS @Z\n  Scenario Outline: Create Alert Model Event\n    When Create Alert Model Event,\"<alert_model_name>\" \"<email>\"\n    Then Verifying \"Alert\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |alert_model_name|email|output_data_key|expected_data|title|\n      |SPEC-35 Cell Alert Model|vidhi.kandolkar+amnovis@oqton.com|ALERT_MODEL_EVENT_NAME|EXPECTED_ALERT_MODEL_EVENT_NAME|Check if Alert Model of Type 'EVENT' and Item Type 'Cell' is created. step 85 - 86|\n\n  @AMNOVIS @Z\n  Scenario Outline: Create and delete Alert Model Periodical\n    When Create Alert Model Periodical,\"<alert_model_name>\" \"<email>\"\n    And Delete Alert Model Periodical\n    And Show Obsoleted Alert Model\n    Then Verifying \"Alert\" created,\"<output_data_key>\" \"<expected_data>\" \"<title>\"\n\n\n     Examples:\n      |alert_model_name|email|output_data_key|expected_data|title|\n      |SPEC-35 Tool Alert Model|vidhi.kandolkar+amnovis@oqton.com|ALERT_MODEL_PERIODICAL_NAME|EXPECTED_ALERT_MODEL_PERIODICAL_NAME|Check if Alert Model of Type 'Periodical' and Item Type 'Tool' is created. step 87 - 89|\n\n\n         @AMNOVIS\n  Scenario Outline: Delete Part Model and then check its status\n     When Delete Part Model\n     Then Show Obsolete Part Models\n      And Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Obsolete|Obsolete|Check if Part Model status is Obsolete. step 93 - 95|\n\n\n\n         @AMNOVIS \n  Scenario Outline: Delete Route Model and then check its status\n     When Delete Route Model\n     And Show Deleted Route Model\n      Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Archived|Archived|Check if Route Model status is Archived. step 96 - 97|\n\n\n         @AMNOVIS \n  Scenario Outline: Delete Action Model and then check its status\n     When Delete Action Model\n     Then Show Archived Action Models\n      And Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Obsolete|Obsolete|Check if Generic Action Model status is Obsolete. step 98 - 100|\n\n\n\n      @AMNOVIS \n  Scenario Outline: Move Tool, Delete and then check its status\n    When Move Tool\n    Then Delete Tool\n    Then Show Disposed Tools\n    And Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Disposed|Disposed|Check if Tool type status of Build Model is Disposed. step 101 - 105|\n\n\n\n   @AMNOVIS \n  Scenario Outline: Move Cell,Delete and then check its status\n     When Move Cell\n     Then Delete Cell\n      Then Show Disposed Cells\n      And Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Disposed|Disposed|Check if Generic Cell status is Disposed. step 106 - 110|\n\n\n  @AMNOVIS \n  Scenario Outline: Move Material,Delete and then check its status\n     When Move material\n     Then Delete material\n      Then Show Disposed Materials\n      And Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Disposed|Disposed|Check if Material status is Disposed. step 111 - 115|\n\n\n\n\n    @AMNOVIS \n  Scenario Outline: Delete Customer\n    When Archive Customer\n    Then Show Archived Customers\n    And Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n   Examples:\n    |status_type|expected_data|title|\n    |Archived|Archived|Check if Customer status is Archived. step 116 - 118|\n\n\n\n#  @AMNOVIS\n#  Scenario: Show Archived\n#    Given Show Archived Customers\n#    Verifying \"{page_type}\" icon,\"{att_to_find}\" \"{attribute_type}\" \"{expected_data}\" \"{title}\"\n\n   @AMNOVIS \n  Scenario Outline: Delete location\n     When Delete Location\n     Then Show Disposed Location\n     And Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |status_type|expected_data|title|\n    |Disposed|Disposed|Check if Location status is Disposed. step 119 - 120|\n"
  },
  "BH": {
      "Azure_connect_workflow.feature": "Feature: Azure connection test script\n\n\n  @FREEFORM_INTEGRATION\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And I set the screenshot flag to False\n\n  Scenario Outline: Connect to Azure table\n    Given connect to Azure table with user=\"<user>\" and key=\"<key>\"\n    Then get all Azure tables and store in key=\"TABLE_LIST\"\n    And store length of list=\"##TABLE_LIST\" in key=\"AZURE_TABLES_COUNT\"\n    And get data of Azure table=\"<get_table>\" in key=\"<table_key>\"\n    And fetch all from table=\"<get_table>\" column=\"Order_V2_ID\" operator=\"eq\" \"ORD-000-0003\", store in key=\"<query_key>\"\n\n    Examples:\n      | user   | key       | get_table | table_key   | query_key    | search_key                    |\n      | oqtonb | samplekey | Action    | TABLE_KEY_1 | RESULT_KEY_1 | Order_V2_ID eq 'ORD-000-0003' |",
      "BH_FullWorkflow_withSAP.feature": "Feature: BH Full Workflow with 1 Line Item and SAP integration\n\n#Background:\n#  Given  Read \"testBH_Workflow.json\" from \"C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH\"\n\n#\n#Scenario Outline: Set timestamp for workflow\n#  Given Set timestamp\n#  Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n#\n#Examples:\n#  |json                |json_path|\n#  |testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n#\n#\n#Scenario: Initial Directives\n#  Given Enable all Screenshot\n#\n#\n#Scenario Outline: Login as a Customer\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for 6\n#  Then Verify Element exists on page, element=\"Customer\", title=\"Verify Customer Login Success\"\n#\n#  Examples:\n#  |url                                  |email                                  |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_customer1@oqton.com|Oqton2018!|\n#\n#\n#Scenario Outline: Create New Request\n#  Given Create a new request with \"<facility>\" \"<description>\" and \"<product_line>\"\n#  When Verify OrderV2 created successfully with \"<description>\"\n#  And Get OrderV2 ID from Order Details page\n#  Then Save Key=\"OrderID_V2\" Value=\"!!OrderID_V2\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n#\n#\n#  Examples:\n#  |facility                |description         |product_line         |json            |json_path                                                       |\n#  |Additive Center, Houston|BH New Request Test!|Wireline Services (I)|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n#\n#Scenario Outline: Add Line Item\n#  Given Add Line Item with \"<requested_service>\" \"<part_file_name>\" \"<required_quantity>\" \"<need_by_date_delay>\" \"<customer_part_number>\" \"<customer_partname>\" and \"<part_type_input>\"\n#  When Verify line item of \"<requested_service>\" has been addeed successfully\n#  And Get LineItem ID from Order Details page\n#  Then Save Key=\"LineItemIDs\" Value=\"!!LineItemIDs\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n#\n#\n#  Examples:\n#  |requested_service|part_file_name             |required_quantity|need_by_date_delay|customer_part_number|customer_partname|part_type_input   |json            |json_path                                                       |\n#  |Full Production  |Cube_3d_printing_sample.stl|2                |7200              |1111                |Test Part        |Prototype (K/ZPIO)|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n#\n#Scenario Outline: Submit Request\n#  Given Submit the customer request with \"<delivery_method>\" as Ship\n#  When Enter shipping details \"<ship_street>\" \"<ship_city>\" \"<ship_state>\" \"<ship_zipCode>\" and \"<ship_country>\"\n#  And Verify that request has been submitted successfully\n#  Then Logout\n#\n#\n#  Examples:\n#  |delivery_method|ship_street            |ship_city|ship_state    |ship_zipCode|ship_country |\n#  |Ship           |333 Three D Systems Cir|Rock Hill|South Carolina|29730       |United States|\n#\n#\n#Scenario Outline: Login to Amcel Persona\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for 6\n#  Then Verify Element exists on page, element=\"AMCEL - Houston\", title=\"Verify Amcel Login Success\"\n#\n#  Examples:\n#  |url                                  |email                              |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_amcel@oqton.com|Oqton2018!|\n#\n#\n#Scenario Outline: Open the Order, Edit Line Item and Move to Costing\n#  Given Read Key=\"OrderID_V2, LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Click \"Home\"\n#  And Open the \"<orderID_v2>\" request\n#  And Assign \"<responsible_amcel>\"\n#  And Edit \"<line_item>\" and add the required data \"<base_material>\" \"<business_impact>\" \"<AMCEL_SOR_reviewer>\" \"<need_by_date_delay_amcelSOR>\" \"<Design_SOR_reviewer>\" \"<need_by_date_delay_designSOR>\" \"<AM_technology_fit>\"\n#  And Move \"<line_item>\" to Costing\n#  Then Verify that \"<line_item>\" was successfully moved to Costing\n#  Then Logout\n#\n#\n#  Examples:\n#  |responsible_amcel                  |orderID_v2  |line_item    |base_material|business_impact   |AMCEL_SOR_reviewer                 |need_by_date_delay_amcelSOR|Design_SOR_reviewer                   |need_by_date_delay_designSOR|AM_technology_fit|json                |json_path                                                       |\n#  |nehali.chodnekar+bh_amcel@oqton.com|!!OrderID_V2|!!LineItemIDs|Other        |Revenue Enablement|nehali.chodnekar+bh_amcel@oqton.com|7200                       |nehali.chodnekar+bh_designer@oqton.com|7200                        |DMLM             |testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\n#Scenario Outline: Login to Costing Persona\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for 6\n#  Then Verify Element exists on page, element=\"Costing - Houston\", title=\"Verify Costing Login Success\"\n#\n#  Examples:\n#  |url                                  |email                                |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_costing@oqton.com|Oqton2018!|\n#\n#Scenario Outline: Open the Order, Create Price and Move to Quoting\n#  Given Read Key=\"OrderID_V2, LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Click \"Work List\"\n#  And Open the \"<orderID_v2>\" request\n#  And Create Price for the \"<line_item>\" with \"<quoted_quantities>\" \"<unit_part_cost>\" \"<unit_part_price>\" \"<total_price>\" \"<pricing_comments>\"\n#  And Get Quote ID\n#  Then Save Key=\"pricing_QuoteID\" Value=\"!!pricing_QuoteID\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n#  And Move \"<line_item>\" to Quoting\n#  Then Verify that \"<line_item>\" was successfully moved to Quoting\n#  Then Logout\n#\n#  Examples:\n#  |orderID_v2  |line_item    |quoted_quantities|unit_part_cost|unit_part_price|total_price|pricing_comments|json                |json_path                                                       |\n#  |!!OrderID_V2|!!LineItemIDs|5                |99            |199            |1099       |test Quote Price|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\n#  Scenario Outline: Switch to Amcel Persona to submit quote\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for 6\n#  Then Verify Element exists on page, element=\"AMCEL - Houston\", title=\"Verify Amcel Login Success\"\n#\n#  Examples:\n#  |url                                  |email                              |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_amcel@oqton.com|Oqton2018!|\n#\n#Scenario Outline: Create and Submit Quote from Amcel\n#  Given Read Key=\"OrderID_V2, LineItemIDs, pricing_QuoteID\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Click \"Home\"\n#  And Open the \"<orderID_v2>\" request\n#  And Create Quote for the \"<line_item>\" with \"<pricing_QuoteID>\" \"<total_cost>\" \"<total_price>\" \"<grand_total_price>\" \"<lead_time>\"\n#  Then Generate and Submit Quote to Customer\n#  And Get Quote ID\n#  Then Save Key=\"submitted_QuoteID\" Value=\"!!pricing_QuoteID\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n#  Then Verify that the quote was submitted successfully\n#  Then Logout\n#\n#  Examples:\n#  |orderID_v2  |line_item    |pricing_QuoteID  |total_cost|total_price|grand_total_price|lead_time|json                |json_path                                                       |\n#  |!!OrderID_V2|!!LineItemIDs|!!pricing_QuoteID|1099      |599        |999              |5        |testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n#Scenario Outline: Login as a Customer to accept the quote\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for 6\n#  Then Verify Element exists on page, element=\"Customer\", title=\"Verify Customer Login Success\"\n#\n#  Examples:\n#  |url                                  |email                                  |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_customer1@oqton.com|Oqton2018!|\n#\n#Scenario Outline: Accept the Quote and provide payment information\n#  Given Read Key=\"OrderID_V2, submitted_QuoteID\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Open the \"<orderID_v2>\" request\n#  And Accept the \"<submitted_quote>\"\n#  And Enter payment information \"<payment_method>\" \"<PO_number>\" \"<PO_file>\" for \"<submitted_quote>\"\n#  Then Verify that the payment was accepted successfully for \"<submitted_quote>\"\n#  Then Logout\n#\n#  Examples:\n#  |orderID_v2  |submitted_quote    |payment_method|PO_number|PO_file  |json                |json_path                                                       |\n#  |!!OrderID_V2|!!submitted_QuoteID|Purchase Order|12345    |Oqton.pdf|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n#  Scenario Outline: Switch to Amcel Persona to accept customer payment information\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for Element=\"AMCEL - Houston\" to be present,Timeout=\"60\"\n#  Then Verify Element exists on page, element=\"AMCEL - Houston\", title=\"Verify Amcel Login Success\"\n#\n#  Examples:\n#  |url                                  |email                              |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_amcel@oqton.com|Oqton2018!|\n#\n# Scenario Outline: Accept Payment\n#  Given Read Key=\"OrderID_V2, LineItemIDs, submitted_QuoteID\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Open the \"<orderID_v2>\" request\n#  And Confirm payment for \"<line_item>\" \"<submitted_quote>\" with \"<payment_line_number>\"\n#  Then Verify that the payment was confirmed successfully for \"<submitted_quote>\"\n#  Then Logout\n#\n#  Examples:\n#  |orderID_v2  |line_item    |submitted_quote    |payment_line_number|json                |json_path                                                       |\n#  |!!OrderID_V2|!!LineItemIDs|!!submitted_QuoteID|11111              |testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n# Scenario Outline: Switch to Engineering Lead Persona\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for Element=\"Engineering Lead - Houston\" to be present,Timeout=\"60\"\n#  Then Verify Element=\"Engineering Lead - Houston\" exists on page,title=\"Verify Engineering Lead Login Success\"\n#\n#  Examples:\n#  |url                                  |email                                        |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_engineeringlead@oqton.com|Oqton2018!|\n#\n#\n# Scenario Outline: Assign Designer\n#  Given Read Key=\"OrderID_V2, LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Click \"Work List\"\n#  And Open the \"<orderID_v2>\" request\n#  And Assign design expert \"<designer>\" for \"<line_item>\"\n#  Then Verify that the \"<designer>\" was assigned successfully for \"<line_item>\"\n#  Then Logout\n#\n#  Examples:\n#  |orderID_v2  |line_item    |designer                              |json                |json_path                                                       |\n#  |!!OrderID_V2|!!LineItemIDs|nehali.chodnekar+bh_designer@oqton.com|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n#  Scenario Outline: Switch to Designer Persona\n#  Given Go to <url>\n#  When login with \"<email>\" \"<password>\"\n#  And Wait for Element=\"Designer - Houston\" to be present,Timeout=\"60\"\n#  Then Verify Element=\"Designer - Houston\" exists on page,title=\"Verify Designer Login Success\"\n#\n#  Examples:\n#  |url                                  |email                              |password  |\n#  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_designer@oqton.com|Oqton2018!|\n#\n# Scenario Outline: Assign a Part Model\n#  Given Read Key=\"OrderID_V2, LineItemIDs, timestamp\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Click \"Work List\"\n#  And Open the \"<orderID_v2>\" request\n##  And Create new part model for \"<line_item>\" with details \"<pm_name>\" \"<part_file_name>\" \"<am_part_num>\" \"<am_part_name>\" \"<am_part_rev>\" \"<batch_quantity>\" \"<release_status>\" \"<release_date>\" at \"<timestamp>\"\n##  And Assign the part model \"!!updated_pm_name\" to \"<line_item>\"\n#  And Assign the part model \"<pm_name>\" to \"<line_item>\"\n#  Then Verify that the part model was assigned successfully for \"<line_item>\"\n#  And Move \"<line_item>\" to Production\n#  Then Verify that \"<line_item>\" was successfully moved to Production\n#  Then Logout\n#\n#  Examples:\n#  |orderID_v2  |line_item    |pm_name|part_file_name             |am_part_num|am_part_name|am_part_rev|batch_quantity|release_status|release_date|timestamp  |json                |json_path                                                       |\n#  |!!OrderID_V2|!!LineItemIDs|A101389200-PAD, WEAR, BACK-UP ARM   |Cube_3d_printing_sample.stl|AM Part 001|AM Test PM 1|Rev 2      |2             |Release       |7200        |!!timestamp|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\n Scenario Outline: Switch to Production Manager Persona\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  And Wait for \"6\"\n  Then Verify Element=\"Production Manager - Houston\" exists on page,title=\"Verify Production Manager Login Success\"\n\n  Examples:\n  |url                                  |email                                          |password  |\n  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar+bh_productionmanager@oqton.com|Oqton2018!|\n\n\n Scenario Outline: Create Order V1 from Order V2\n  Given Read Key=\"OrderID_V2, LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  And Open the \"<orderID_v2>\" request\n#  And Create OrderV1 for \"<line_item>\"\n#  Then Verify that order was created successfully for \"<line_item>\"\n#  And Get OrderV1 ID from Order Details page\n#  Then Save Key=\"OrderID_V1\" Value=\"!!OrderID_V1\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |orderID_v2  |line_item    |json                |json_path                                                       |\n  |!!OrderID_V2|!!LineItemIDs|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n Scenario Outline: Open OrderV1 and Create Parts\n  Given Read Key=\"LineItemIDs, OrderID_V1\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  And Open the production order \"<orderID_V1>\" for \"<line_item>\"\n#  And Create Parts and save PartIDs\n#  Then Save Key=\"part_id\" Value=\"!!part_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |line_item    |orderID_V1  |json                |json_path                                                       |\n  |!!LineItemIDs|!!OrderID_V1|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\nScenario Outline: Part Editor\n  Given Read Key=\"part_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit Part from Part Editor for \"<part_id>\"\n  Then Verify SAP Part Details page has loaded for \"<part_id>\" on \"<tab_number>'\n  And Get Action IDs on Part Details page\n  Then Save Key=\"action_id\" Value=\"!!action_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |part_id  |tab_number|json                |json_path                                                       |\n  |!!part_id|2         |testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario Outline: Edit Actions\n  Given Read Key=\"timestamp, action_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit details for \"<action_id>\" at \"<timestamp>\"\n  Then Verify action details have been updated for \"<action_id>\" at \"<timestamp>\"\n\n  Examples:\n  |timestamp  |action_id  |json                |json_path                                                       |\n  |!!timestamp|!!action_id|testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario Outline: Edit Part\n  Given Read Key=\"timestamp\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit part details\n  And Update the ZPIO SAP Header details for \"<order_type>\" at \"<timestamp>\"\n  Then Update the Settlement Rules at \"<timestamp>\"\n  And Update the Goods Receipt and Long Text at \"<timestamp>\"\n  Then click \"Save\"\n  Then Verify part details have been updated with \"<order_type>\"\n\n  Examples:\n  |timestamp  |order_type|json                |json_path                                                       |\n  |!!timestamp|ZPIO      |testBH_Workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario: Create Order in SAP\n  Given click \"Create in SAP\"\n  When click \"Confirm\"\n  Then Verify SAP Trigger\n\n",
      "PPO1_order.feature": "Feature: PPO1 Order creation for SAP integration\n\n#Background:\n#  Given  Read \"testBH_PPO1.json\" from \"C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH\"\n\n\nScenario Outline: Set timestamp for workflow\n  Given Set timestamp\n  Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\nExamples:\n  |json            |json_path|\n  |testBH_PPO1.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario: initial derectives\n  Given Enable all Screenshot\n\n\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  And Wait for 5\n  Then Verify Element exists on page, element=\"Inbox\", title=\"Verifying login success\"\n\n  Examples:\n  |url                                  |email                     |password  |\n  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar@oqton.com|3D-systems|\n\n\nScenario Outline: Create Order\n  Given Create a new order with \"<customer_name>\" \"<partmodel_name>\" and \"<qty>\" parts\n  When Verify Order created successfully \"<number_of_line_items_expected>\"\n  And Save Key=\"order_id\" Value=\"!!order_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n  And Get Part IDs on Order Details page\n  Then Save Key=\"part_id\" Value=\"!!part_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |customer_name|partmodel_name                                |qty|number_of_line_items_expected|json            |json_path|\n  |Baker Hughes |10227754 - BLOCK,CLAMP B JBOX CAP REMV 6.75AOA|10 |1                            |testBH_PPO1.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario Outline: Part Editor\n  Given Read Key=\"part_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit Part from Part Editor for \"<part_id>\"\n  Then Verify SAP Part Details page has loaded for \"<part_id>\" on \"<tab_number>'\n  And Get Action IDs on Part Details page\n  Then Save Key=\"action_id\" Value=\"!!action_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |part_id  |tab_number|json            |json_path                                                       |\n  |!!part_id|1         |testBH_PPO1.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario Outline: Edit Actions\n  Given Read Key=\"timestamp, action_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit details for \"<action_id>\" at \"<timestamp>\"\n  Then Verify action details have been updated for \"<action_id>\" at \"<timestamp>\"\n\n  Examples:\n  |timestamp  |action_id  |json            |json_path                                                       |\n  |!!timestamp|!!action_id|testBH_PPO1.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario Outline: Edit Part\n  Given Read Key=\"timestamp\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit part details\n  And Update the PP01 SAP Header details for \"<order_type>\" at \"<timestamp>\"\n  Then Update the Settlement Rules at \"<timestamp>\"\n  And Update the Goods Receipt and Long Text at \"<timestamp>\"\n  Then click \"Save\"\n  Then Verify part details have been updated with \"<order_type>\"\n\n  Examples:\n  |timestamp  |order_type|json            |json_path                                                       |\n  |!!timestamp|PP01      |testBH_PPO1.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\nScenario: Create Order in SAP\n  Given click \"Create in SAP\"\n  When click \"Confirm\"\n  Then Verify SAP Trigger",
      "ZPIO_order.feature": "Feature: ZPIO Order creation for SAP integration\n\n#Background:\n#  Given  Read \"testBH_ZPIO.json\" from \"C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH\"\n\n\nScenario Outline: Set timestamp for workflow\n  Given Set timestamp\n  Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n\nExamples:\n  |json            |json_path|\n  |testBH_ZPIO.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\n#Scenario: initial derectives\n#  Given Enable all Screenshot\n\n\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  And Wait for Element=\"Production Manager - Houston\" to be present,Timeout=\"60\"\n  Then Verify Element=\"Production Manager - Houston\" exists on page,title=\"Verify Login Success\"\n\n  Examples:\n  |url                                  |email                     |password  |\n  |https://bakerhughes.staging.oqton.ai/|nehali.chodnekar@oqton.com|3D-systems|\n\n\nScenario Outline: Create Order\n  Given Create a new order with \"<customer_name>\" \"<partmodel_name>\" and \"<qty>\" parts\n  Then Verify Order created successfully \"<number_of_line_items_expected>\"\n  And Save Key=\"order_id\" Value=\"!!order_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n  And Get Part IDs on Order Details page\n  Then Save Key=\"part_id\" Value=\"!!part_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n\n  Examples:\n  |customer_name|partmodel_name                   |qty|number_of_line_items_expected|json             |json_path                                                       |\n  |Baker Hughes |A101389200-PAD, WEAR, BACK-UP ARM|10 |1                            |testBH_ZPIO.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n\nScenario Outline: Part Editor\n Given Read Key=\"part_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit Part from Part Editor for \"<part_id>\"\n  Then Verify SAP Part Details page has loaded for \"<part_id>\" on \"<tab_number>'\n  And Get Action IDs on Part Details page\n  #Then Save Key=\"action_id\" Value=\"!!action_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |part_id  |tab_number|json            |json_path                                                       |\n  |!!part_id|1         |testBH_ZPIO.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n\n#\n#Scenario Outline: Edit Actions\n#  Given Read Key=\"timestamp, action_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Edit details for \"<action_id>\" at \"<timestamp>\"\n#  Then Verify action details have been updated for \"<action_id>\" at \"<timestamp>\"\n#\n#  Examples:\n#  |timestamp  |action_id  |json            |json_path                                                       |\n#  |!!timestamp|!!action_id|testBH_ZPIO.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n#\n#\n#Scenario Outline: Edit Part\n#  Given Read Key=\"timestamp\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n#  When Edit part details\n#  And Update the ZPIO SAP Header details for \"<order_type>\" at \"<timestamp>\"\n#  Then Update the Settlement Rules at \"<timestamp>\"\n#  And Update the Goods Receipt and Long Text at \"<timestamp>\"\n#  Then click \"Save\"\n#  Then Verify part details have been updated with \"<order_type>\"\n#\n#  Examples:\n#  |timestamp  |order_type|json            |json_path                                                       |\n#  |!!timestamp|ZPIO      |testBH_ZPIO.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\BH|\n#\n#\n#Scenario: Create Order in SAP\n#  Given click \"Create in SAP\"\n#  When click \"Confirm\"\n#  Then Verify SAP Trigger\n#\n"
  },
  "FREEFORM": {
      "Freeform_Workflow.feature": "Feature: Workflow to check Freeform scenario, create order\n\n\n  @FREEFORM\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  \n @FREEFORM\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"5\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    \n    Examples:\n      | url                                        | email                 | password     | output_data_key | expected_data_key | title                          |\n      | https://freeform-testing.staging.oqton.ai/ | goutam.naik@oqton.com | Password@123 | Profile         | Profile           | Check inbox icon on Login page |\n\n @FREEFORM\n  Scenario Outline: Create an Order\n    Given navigate to Organisation page\n    And Save data in dict, \"<source_mm_key>\", \"<mm_value>\"\n    And Save data in dict, \"<source_rm_key>\", \"<rm_value>\"\n    And Save data in dict, \"<customer_key>\", \"<customer_value>\"\n    And Save data in dict, \"<source_pm_key>\", \"<pm_value>\"\n    Then start create order with existing part model \"<part_model>\",using material model=\"<material_model>\", route model=\"<route_model>\", qty=\"<qty>\" and customer=\"<customer>\"\n    Then set field=\"<input_label>\" value=\"<input_value>\", store in key=\"<value_key>\"\n    Then click on \"Create\" button\n    Then click on \"Yes\" button\n    And Wait for \"5\"\n    And verify \"<qty>\" parts are in \"Pending\" state on order details page\n    And save order id, key=\"<order_key>\"\n    And save parts from order details page, key=\"<parts_key>\"\n\n    Examples:\n      | material_model           | route_model           | qty | customer        | part_model | source_mm_key          | mm_value             | source_rm_key       | rm_value                                                | customer_key  | customer_value | source_pm_key | pm_value             | input_label | input_value | value_key  | order_key | parts_key |\n      #| ##GENERIC_MATERIAL_MODEL | ##ROUTE_MODEL_WITH_AM | 10  | ##CUSTOMER_NAME | ##PART0    | GENERIC_MATERIAL_MODEL | Stainless Steel 17-4 | ROUTE_MODEL_WITH_AM | [For Automation] 25Pro - 17-4 Sinter Only - Finish - ZB | CUSTOMER_NAME | TestJ          | PART0         | CrankGear_Automation | PO Number   | timestamp+  | ORD_PO_NUM | ORDERID   | part_ids  |\n      | ##GENERIC_MATERIAL_MODEL | ##ROUTE_MODEL_WITH_AM | 7  | ##CUSTOMER_NAME | ##PART0    | GENERIC_MATERIAL_MODEL | 420i                 | ROUTE_MODEL_WITH_AM | TestJ Generic Route Model- with 8 action models         | CUSTOMER_NAME | TestJ          | PART0         | CrankGear            | PO Number   | timestamp+  | ORD_PO_NUM | ORDERID   | part_ids  |\n\n  @FREEFORM\n  Scenario Outline: Create Nest of parts\n    Given create nest of parts=\"<parts_list>\"\n    And Approve from nest details page, Nest ID=\"##NESTID_TO_APPROVE\"\n    #And Now Approve the Nest\n    And Wait for \"5\"\n    #Then wait until \"8\" actions are displayed on nest details page\n    And Read all data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n    Then navigate to Organisation page\n\n    Examples:\n      | parts_list | nest_action_id |\n      | ##part_ids | A-             |\n\n  @FREEFORM\n  Scenario Outline: Verify actions on the schedule\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then click \"<schedule_action_option>\", context=\"<context_ele_text>\"\n    And Wait for \"10\"\n    Then all actions \"<actions_ids>\" should be displayed on the scheduler, title=\"Action displayed on scheduler\"\n    Then click \"Close\" on Schedule editor\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | schedule_action_option | context_ele_text | actions_ids                 |\n      | ##ORDERID | Order        |         |            | Name            | Add to Schedule        | NA               | ##NEST_ACTION_ID_OUTPUT_KEY |\n\n  @FREEFORM\n  Scenario: Start and finish nest actions\n    Then start and finish all actions in \"##NEST_ACTION_ID_OUTPUT_KEY\"\n\n  @FREEFORM @freeform_report\n  Scenario Outline: Verify Order Ack report\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | access_report        | title1                | field_to_verify_1 | expected_val_1  | field_to_verify_2 | expected_val_2 | field_to_verify_3 | expected_val_3 |\n      | ##ORDERID | Order        |         |            | Name            | Order Acknowledgment | Print report accessed | Name (Customer)   | ##CUSTOMER_NAME | Id                | ##ORDERID      | PO Number         | ##ORD_PO_NUM   |\n      \n @FREEFORM @freeform_report\n Scenario Outline: Verify Pick List report\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And Save data in dict, \"<source_order_key>\", \"<order_id>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And verify value of \"Name (Part Model)\" to be \"##PART0\" on \"<access_report>\"\n    And verify value of \"Quantity (Line Items)\" to be \"<qty>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n    \n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | source_order_key | qty | access_report | title1                | field_to_verify_1 | expected_val_1  | field_to_verify_2 | expected_val_2 | field_to_verify_3 | expected_val_3 |\n      | ##ORDERID | Order        |         |            | Name            | SOURCE_ORDER_ID  | 7  | Pick List     | Print report accessed | Name (Customer)   | ##CUSTOMER_NAME | Id                | ##ORDERID      | PO Number         | ##ORD_PO_NUM   |\n\n @FREEFORM @freeform_report\n  Scenario Outline: Verify Packing Slip (Draft) report\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | access_report        | title1                | field_to_verify_1 | expected_val_1  | field_to_verify_3 | expected_val_3 |\n      | ##ORDERID | Order        |         |            | Name            | Packing Slip (Draft) | Print report accessed | Name (Customer)   | ##CUSTOMER_NAME | PO Number         | ##ORD_PO_NUM   |\n      \n @FREEFORM @freeform_report\n  Scenario Outline: Verify Order Acknowledgment (For Testing) report\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | access_report                      | title1                | field_to_verify_1 | expected_val_1  | field_to_verify_2 | expected_val_2 | field_to_verify_3 | expected_val_3 |\n      | ##ORDERID | Order        |         |            | Name            | Order Acknowledgment (For Testing) | Print report accessed | Name (Customer)   | ##CUSTOMER_NAME | Id                | ##ORDERID      | PO Number         | ##ORD_PO_NUM   |\n      \n @FREEFORM @freeform_report\n Scenario Outline: Verify Pick List (test report\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And Save data in dict, \"<source_order_key>\", \"<order_id>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n    \n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | source_order_key | qty | access_report   | title1                | field_to_verify_1 | expected_val_1  | field_to_verify_2 | expected_val_2 | field_to_verify_3 | expected_val_3 |\n      | ##ORDERID | Order        |         |            | Name            | SOURCE_ORDER_ID  | 7  | Pick List (test | Print report accessed | Name (Customer)   | ##CUSTOMER_NAME | Id                | ##ORDERID      | PO Number         | ##ORD_PO_NUM   |\n\n @FREEFORM @freeform_report\n Scenario Outline: Verify 'Nest Report' print report\n    Given I search for =\"<nest_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<nest_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n    Examples:\n      | nest_id             | within_value | creator | time_range | context_element | access_report | title1                     | field_to_verify_1 | expected_val_1      | field_to_verify_2 | expected_val_2           | field_to_verify_3 | expected_val_3 |\n      | ##NESTID_TO_APPROVE | Nest         |         |            | Name            | Nest Report   | Nest print report accessed | Id                | ##NESTID_TO_APPROVE | Material Model    | ##GENERIC_MATERIAL_MODEL | Total Quantity    | 7             |\n\n @FREEFORM @freeform_report\n Scenario Outline: Verify 'Mass Part Report' print report under nest print reports\n    Given I search for =\"<nest_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<nest_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_4>\" to be \"<expected_val_4>\" on \"<access_report>\"\n    And verify presence of all in \"<parts>\" on current view, title=\"<title2>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n    Examples:\n      | nest_id             | within_value | creator | time_range | context_element | access_report    | title1                     | field_to_verify_1 | expected_val_1 | field_to_verify_2 | expected_val_2 | field_to_verify_3 | expected_val_3  | field_to_verify_4 | expected_val_4           | parts      | title2                                      |\n      | ##NESTID_TO_APPROVE | Nest         |         |            | Name            | Mass Part Report | Nest print report accessed | Part Model        | ##PART0        | Order ID          | ##ORDERID      | Customer Name     | ##CUSTOMER_NAME | Material Model    | ##GENERIC_MATERIAL_MODEL | ##part_ids | Verify presense of part on Mass Part Report |\n\n @FREEFORM @freeform_report\n Scenario Outline: Verify 'Swift Cert (Draft)' print report in Order details\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify presence of \"<qty>\" instances of \"##PART0\" on current view, title=\"<title3>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n     Examples:\n       | order_id  | within_value | creator | time_range | context_element | qty | access_report      | title1                | field_to_verify_1 | expected_val_1 | field_to_verify_2 | expected_val_2 | title3                                                                          |\n       | ##ORDERID | Order        |         |            | Name            | 7  | Swift Cert (Draft) | Print report accessed | Name (Model)      | ##PART0        | PO Number         | ##ORD_PO_NUM   | Verify number of parts displayed on 'Certificate of Conformance - Swift Health' |\n\n @FREEFORM @freeform_report\n Scenario Outline: Verify 'Part Report' print report in part details\n    Given fetch index=\"0\" form list=\"##part_ids\" and store in key=\"P1\"\n    And I search for =\"<part_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<part_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_3>\" to be \"<expected_val_3>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_4>\" to be \"<expected_val_4>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_5>\" to be \"<expected_val_5>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n    Examples:\n      | part_id | within_value | creator | time_range | context_element | access_report | title1                | field_to_verify_1 | expected_val_1 | field_to_verify_2 | expected_val_2 | field_to_verify_3 | expected_val_3  | field_to_verify_4 | expected_val_4 | field_to_verify_5 | expected_val_5           |\n      | ##P1    | Part         |         |            | Name            | Part Report   | Print report accessed | Id                | ##P1           | Part Model        | ##PART0        | Customer Name     | ##CUSTOMER_NAME | PO Number         | ##ORD_PO_NUM   | Material Name     | ##GENERIC_MATERIAL_MODEL |\n\n @FREEFORM @freeform_report\n Scenario Outline: Verify 'Swift Part Label (Draft)' print report in part details\n    Given fetch index=\"0\" form list=\"##part_ids\" and store in key=\"P1\"\n    And I search for =\"<part_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<part_id>\" on Search page, context=\"<context_element>\"\n    Then access print report=\"<access_report>\", title=\"<title1>\"\n    Then verify value of \"<field_to_verify_1>\" to be \"<expected_val_1>\" on \"<access_report>\"\n    And verify value of \"<field_to_verify_2>\" to be \"<expected_val_2>\" on \"<access_report>\"\n    And Click on: item=\"Exit\", context=\"Profile\"\n\n    Examples:\n      | part_id | within_value | creator | time_range | context_element | access_report            | title1                | field_to_verify_1 | expected_val_1 | field_to_verify_2 | expected_val_2 |\n      | ##P1    | Part         |         |            | Name            | Swift Part Label (Draft) | Print report accessed | Name (Model)      | ##PART0        | PO Number         | ##ORD_PO_NUM   |\n\n  "
  },
  "Freeform_Integration": {
      "001_SFTP_Integration_Workflow.feature": "Feature: Freeform SFTP integration workflow for Swift\n\n\n  @FREEFORM_INTEGRATION\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And I set the screenshot flag to False\n    And Save data in dict, \"PON_NUM\", \"Aut202510790-01\"\n\n  \n @FREEFORM_INTEGRATION\n  Scenario Outline: Login to SFTP Sever and create an order\n    Given connect SFTP with hostname=\"<sftp_hostname>\", port=\"<sftp_port>\", username=\"<sftp_username>\" and filename=\"<key_filename>\"\n    Then verify item=\"swift/new\" exists in CWD, title=\"Logged in to SFTP server\"\n    Then list files at current location on SFTP\n    \n\n    Examples:\n      | sftp_hostname                                                  | sftp_port | sftp_username | key_filename                                                                 | verify_location |\n      | s-9dac9ff260fc4fa59.server.transfer.eu-central-1.amazonaws.com | 22        | oqton-user-1  | C:/Automation/QA_Automation_tool/automation/src/data/Integration/private.pem | swift/new       |\n\n  Scenario Outline: Copy files to SFTP server to create an order\n    Given create folder on SFTP server with timestamp at location=\"<dest_location>\", key=\"<location_key>\"\n    Then verify item=\"##<location_key>\" exists in CWD, title=\"Verify test folder created in New\"\n    Then switch to location=\"##<location_key>\" on SFTP\n    Then upload file \"<local_csv_file_path>\" to the current location on the SFTP server, key=\"CSV_FILE_KEY1\"\n    Then upload file \"<local_pm_path>\" to the current location on the SFTP server, key=\"DATA_FILE_KEY1\"\n    Then verify item=\"##CSV_FILE_KEY1\" exists in CWD, title=\"Verify CSV file is uploaded\"\n    Then verify item=\"##DATA_FILE_KEY1\" exists in CWD, title=\"Verify data file is uploaded\"\n    Then navigate one level up on SFTP server\n    Then list files at current location on SFTP\n    And finally close SFTP connecton\n    But Wait for \"170\"\n\n    Examples:\n      | dest_location | location_key | local_csv_file_path                                                             | local_pm_path                                                                             |\n      | swift/new     | DATA_FOLDER  | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\0227SwiftA.csv | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\CrankGear_Automation.stl |\n\n  Scenario Outline: Connect to API and verify order\n    Given user logs in with API using username=\"<username>\",password=\"<password>\", tenant=\"<tenant>\", host=\"<host>\", url =\"<service_url>\"\n    Then find \"order\" with PO Number=\"<PO_number>\", store in key=\"ORDERID\" and assert, title=\"<title1>\"\n    Then Read row=\"0\" from CSV and store in dictionary: data=\"C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\0227SwiftA.csv\", key=\"CSV_DATA\"\n    Then get \"STL file name\" from key=\"##CSV_DATA\" and store in key=\"DATA_FILE_1\"\n    And get \"Part Description\" from key=\"##CSV_DATA\" and store in key=\"PART_MODEL_1\"\n\n    Examples:\n      | username              | password     | tenant           | host             | service_url                           | PO_number | title1                        |\n      | goutam.naik@oqton.com | Password@123 | freeform-testing | staging.oqton.ai | https://api.staging.oqton.ai/v1/items | ##PON_NUM | Order found with PON from API |\n\n  Scenario Outline: Log in to MOS\n    Given Enable all Screenshot\n    And Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"5\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    \n    \n    Examples:\n      | url                                        | email                 | password     | output_data_key | expected_data_key | title                          |\n      | https://freeform-testing.staging.oqton.ai/ | goutam.naik@oqton.com | Password@123 | Profile         | Profile           | Check inbox icon on Login page |\n \n  Scenario Outline: Access the order and verify Delivery Address, Contact Info nad custom field\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then verify orders details displayed for order id=\"<order_id>\", title=\"<title>\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | title                                           |\n      | ##ORDERID | Order        |         |            | Name            | Verified order ID after accessing order details |\n\n  Scenario Outline: Verify Delivery address, Custom Fields and Contact Info of order\n    Given verify \"<data_header>\", \"<data_field>\" to be \"<data_key>\", Ref=\"<dict_key>\" title=\"<title>\"\n\n    Examples: \n      | data_key              | dict_key   | data_header      | data_field                | title                                                            |\n      | Ship-to City          | ##CSV_DATA | Delivery Address | City                      | Assertion sucess for Delivery Address- City                      |\n      | Ship-to Zip           | ##CSV_DATA | Delivery Address | State / Province / Region | Assertion sucess for Delivery Address- State / Province / Region |\n      | Customer Order Number | ##CSV_DATA | Custom Fields    | PO Number                 | Assertion sucess for Custom Fields- PO Number                    |\n      | Ship-to Country       | ##CSV_DATA | Delivery Address | Country                   | Assertion sucess for Delivery Address - Country                  |\n      | Ship-to Contact       | ##CSV_DATA | Contact Info     | Name                      | Assertion sucess for Contact Info - Name                         |\n      | Ship-to Phone         | ##CSV_DATA | Contact Info     | Phone                     | Assertion sucess for Contact Info - Phone                        |\n\n  Scenario Outline: Verify part model details\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then expand part model that starts with \"<part_model>\" from order page\n    Then verify \"<data_header>\", \"<ui_field>\" to be \"<data_key>\", Ref=\"<dict_key>\" title=\"<title>\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | part_model     | data_header   | ui_field       | data_key   | dict_key   | title                                           |\n      | ##ORDERID | Order        |         |            | Name            | ##PART_MODEL_1 | Custom Fields | Price (ea)     | Unit Price | ##CSV_DATA | Assertion sucess for Custom Fields - Price (ea) |\n      | ##ORDERID | Order        |         |            | Name            | ##PART_MODEL_1 | Custom Fields | Order Quantity | Quantity   | ##CSV_DATA | Assertion sucess for Custom Fields - Quantity   |\n\n  Scenario Outline: Verify due date and part file\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then order due date should be \"Ship Date\", Ref to key=\"##CSV_DATA\", title=\"<title>\"\n    Then user access part model that starts with \"<part_model>\" from order page\n    Then verify element with text=\"<data_file_name>\" exists on current page, context=\"Imported Part\", title=\"<title2>\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | title                   | part_model     | data_file_name | title2                                            |\n      | ##ORDERID | Order        |         |            | Name            | Verified order Due Date | ##PART_MODEL_1 | ##DATA_FILE_1  | Verfied test file name on part model details page |",
      "002_SFTP_Integration_Materialise_Workflow.feature": "Feature: Freeform SFTP integration workflow for Materialise\n\n\n  @FREEFORM_INTEGRATION @materialise_integration\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And I set the screenshot flag to False\n    And Save data in dict, \"PON_NUM\", \"ima_ex12113\"\n    And Save data in dict, \"CSV_LOCATION\", \"C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\ima_ex2691.0301.csv\"\n    And Save data in dict, \"PEM_LOCATION\", \"C:/Automation/QA_Automation_tool/automation/src/data/Integration/private.pem\"\n\n  \n @FREEFORM_INTEGRATION @materialise_integration\n  Scenario Outline: Login to SFTP Sever and create an order\n    Given connect SFTP with hostname=\"<sftp_hostname>\", port=\"<sftp_port>\", username=\"<sftp_username>\" and filename=\"<key_filename>\"\n    Then verify item=\"materialise/new\" exists in CWD, title=\"Logged in to SFTP server\"\n    Then list files at current location on SFTP\n    \n\n    Examples:\n      | sftp_hostname                                                  | sftp_port | sftp_username | key_filename   | verify_location |\n      | s-9dac9ff260fc4fa59.server.transfer.eu-central-1.amazonaws.com | 22        | oqton-user-1  | ##PEM_LOCATION | materialise/new |\n\n  @FREEFORM_INTEGRATION @materialise_integration\n  Scenario Outline: Copy files to SFTP server to create an order\n    Given create folder on SFTP server with timestamp at location=\"<dest_location>\", key=\"<location_key>\"\n    Then verify item=\"##<location_key>\" exists in CWD, title=\"Verify test folder created in New\"\n    Then switch to location=\"##<location_key>\" on SFTP\n    Then upload file \"<local_csv_file_path>\" to the current location on the SFTP server, key=\"CSV_FILE_KEY1\"\n    Then upload file \"<local_pm_path>\" to the current location on the SFTP server, key=\"DATA_FILE_KEY1\"\n    Then upload file \"<local_pm_path2>\" to the current location on the SFTP server, key=\"DATA_FILE_KEY2\"\n    Then upload file \"<local_pm_path3>\" to the current location on the SFTP server, key=\"DATA_FILE_KEY3\"\n    Then verify item=\"##CSV_FILE_KEY1\" exists in CWD, title=\"Verify CSV file is uploaded\"\n    Then verify item=\"##DATA_FILE_KEY1\" exists in CWD, title=\"Verify data file is uploaded\"\n    Then verify item=\"##DATA_FILE_KEY2\" exists in CWD, title=\"Verify data file is uploaded\"\n    Then verify item=\"##DATA_FILE_KEY3\" exists in CWD, title=\"Verify data file is uploaded\"\n    Then navigate one level up on SFTP server\n    Then list files at current location on SFTP\n    And finally close SFTP connecton\n    But Wait for \"90\"\n\n    Examples:\n      | dest_location   | location_key | local_csv_file_path                                                                  | local_pm_path                                                             | local_pm_path2                                                             | local_pm_path3                                                             |\n      | materialise/new | DATA_FOLDER  | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\ima_ex2691.0301.csv | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\Belt.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\Belt2.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\Integration\\Belt3.stl |\n\n  \n  @FREEFORM_INTEGRATION @materialise_integration\n  Scenario Outline: Connect to API, verify order and save csv data to dictionary\n    Given user logs in with API using username=\"<username>\",password=\"<password>\", tenant=\"<tenant>\", host=\"<host>\", url =\"<service_url>\"\n    Then find \"order\" with PO Number=\"<PO_number>\", store in key=\"ORDERID\" and assert, title=\"<title1>\"\n    Then Read row=\"0\" from CSV and store in dictionary: data=\"<csv_file_path>\", key=\"CSV_DATA1\"\n    Then Read row=\"1\" from CSV and store in dictionary: data=\"<csv_file_path>\", key=\"CSV_DATA2\"\n    Then Read row=\"2\" from CSV and store in dictionary: data=\"<csv_file_path>\", key=\"CSV_DATA3\"\n    Then get \"STL\" from key=\"##CSV_DATA1\" and store in key=\"PART_MODEL_1\"\n    Then get \"STL\" from key=\"##CSV_DATA2\" and store in key=\"PART_MODEL_2\"\n    Then get \"STL\" from key=\"##CSV_DATA3\" and store in key=\"PART_MODEL_3\"\n    \n\n    Examples:\n      | username              | password     | tenant           | host             | service_url                           | PO_number | csv_file_path  | title1                        |\n      | goutam.naik@oqton.com | Password@123 | freeform-testing | staging.oqton.ai | https://api.staging.oqton.ai/v1/items | ##PON_NUM | ##CSV_LOCATION | Order found with PON from API |\n\n\n  @FREEFORM_INTEGRATION @materialise_integration\n  Scenario Outline: Log in to MOS\n    Given Enable all Screenshot\n    And Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"5\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    \n    \n    Examples:\n      | url                                        | email                 | password     | output_data_key | expected_data_key | title                          |\n      | https://freeform-testing.staging.oqton.ai/ | goutam.naik@oqton.com | Password@123 | Profile         | Profile           | Check inbox icon on Login page |\n\n  \n  @FREEFORM_INTEGRATION @materialise_integration\n  Scenario Outline: Access the order and verify Delivery Address, Contact Info nad custom field\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then verify orders details displayed for order id=\"<order_id>\", title=\"<title>\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | title                                           |\n      | ##ORDERID | Order        |         |            | Name            | Verified order ID after accessing order details |\n \n  @FREEFORM_INTEGRATION @materialise_integration\n  Scenario Outline: Verify Custom Fields of order\n    Given verify \"<data_header>\", \"<data_field>\" to be \"<data_key>\", Ref=\"<dict_key>\" title=\"<title>\"\n\n    Examples: \n      | data_key | dict_key    | data_header   | data_field | title                                         |\n      | ORDER #  | ##CSV_DATA1 | Custom Fields | PO Number  | Assertion sucess for Custom Fields- PO Number |\n\n  @FREEFORM_INTEGRATION @materialise_integration\n  Scenario Outline:  Verify Delivery address\n    Given verify order data, section=\"<data_header>\", field=\"<data_field>\" to be \"<expected_value>\", title=\"<title>\"\n\n    Examples: \n      | data_header      | data_field     | expected_value        | title                                                    |\n      | About            | Customer       | Materialise [DEFAULT] | Verified Customer for the order                          |\n      | Delivery Address | Full Name      | Materialise NV        | Verified Delivery Address - Full Name for the order      |\n      | Delivery Address | Address Line 1 | Technologielaan 15    | Verified Delivery Address - Address Line 1 for the order |\n      | Delivery Address | Address Line 2 | 3001 Leuven           | Verified Delivery Address - Address Line 2 for the order |\n      | Delivery Address | Country        | Belgium               | Verified Delivery Address - Country for the order        |\n\n  Scenario Outline: Verify details of first part model\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then expand part model that starts with \"<part_model>\" from order page\n    Then verify \"<data_header>\", \"<ui_field>\" to be \"<data_key>\", Ref=\"<dict_key>\" title=\"<title>\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | part_model     | data_header   | ui_field   | data_key     | dict_key    | title                                |\n      | ##ORDERID | Order        |         |            | Name            | ##PART_MODEL_1 | Custom Fields | Price (ea) | UNIT PRICE $ | ##CSV_DATA1 | Verified price for first part model  |\n      | ##ORDERID | Order        |         |            | Name            | ##PART_MODEL_2 | Custom Fields | Price (ea) | UNIT PRICE $ | ##CSV_DATA2 | Verified price for second part model |\n      | ##ORDERID | Order        |         |            | Name            | ##PART_MODEL_3 | Custom Fields | Price (ea) | UNIT PRICE $ | ##CSV_DATA3 | Verified price for third part model  |\n\n  Scenario Outline: Approve all and create parts\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    Then click \"Approve\", context=\"NA\"\n    Then click \"split-dropdown-button\", context=\"Approve\"\n    Then click \"Approve All and Create Parts\", context=\"Approve All\"\n    Then click \"Approve and Create Parts\", context=\"NA\"\n    Then click \"Close\", context=\"Help\"\n    \n    Examples:\n      | order_id  | within_value | creator | time_range | context_element |\n      | ##ORDERID | Order        |         |            | Name            |\n\n  Scenario Outline: Verify route models on route details page\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    And verify element=\"Mflex - 420i - 30um - Finish - P\" is present, title=\"<title>\"\n    And verify element=\"Mflex - 420i - 30um - Finish - DM\" is present, title=\"<title>\"\n    And verify element=\"Mflex - 420i - 30um - Finish - BB\" is present, title=\"<title>\"\n\n    Examples:\n      | order_id  | within_value | creator | time_range | context_element | title                             |\n      | ##ORDERID | Order        |         |            | Name            | Checking presence for Route model |\n      \n      "
  },
  "JABIL": {
      "001_Jabil_workflow.feature": "Feature: Workflow to check Jabil scenario\n\n\n  @PERFORMANCE @test\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  \n @PERFORMANCE @test\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 5\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    \n    Examples:\n      | url                          | email                 | password     | output_data_key | expected_data_key | title                          | filter_category |\n      | https://qa.staging.oqton.ai/ | goutam.naik@oqton.com | Password@123 | Profile         | Profile           | Check inbox icon on Login page | OLD             |\n\n @test\n Scenario Outline: Search an order\n    Given I search for =\"<order_id>\", within=\"<within_value>\", created_by=\"<creator>\", in time range=\"<time_range>\"\n    And Save data in dict, \"<source_order_key>\", \"<order_id>\"\n    And click \"<order_id>\" on Search page, context=\"<context_element>\"\n    And duplicate current order on order page, option=\"<duplicate_option>\", Reference=\"<dup_ref_text>\", Notes=\"<notes>\", key=\"<new_order_key>\"\n    And click \"##<new_order_key>\" on Search page, context=\"<context_element2>\"\n\n    Examples:\n      | order_id   | within_value | creator | time_range | context_element | duplicate_option             | dup_ref_text              | notes            | new_order_key | source_order_key | context_element2     |\n      | O-000-0793 | Order        |         |            | Name            | Create Order, Parts and Nest | Automation Reference text | Automation notes | NEW_ORDER_ID  | SOURCE_ORDER_ID  | Toastify__toast-body |\n\nScenario Outline: Access part model replace source file\n    Given user access part model that starts with \"<part_model>\" from order page\n    Then edit part model currently displayed\n    And download the source file from product editor, Save source in key=\"<source_key>\"\n    Then rename source, Key=\"<souce_file_name>\" to Key=\"<new_file_name>\" from location=\"<source_location>\"\n    And upload file=<new_file>, context=\"<upload_context>\", location=\"<source_location>\", title=\"<title>\"\n    And click on Save on product editor\n    And click on Close on product editor\n\n    Examples:\n      | part_model | source_key       | souce_file_name    | new_file_name     | source_location | new_file        | upload_context         | title                    |\n      | CrankGear  | SOURCE_FILE_KEY1 | ##SOURCE_FILE_KEY1 | ##PART_MODEL_NAME | ##OUTPUT_FOLDER | ##NEW_FILE_KEY1 | Upload New Source File | New Source file uploaded |\n"
  },
  "MULTIFACILITY": {
      "Admin_Multifacility_Workflow.feature": "Feature: Admin Workflow for Multifacility\n\n  @MULTIFACILITY\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  @MULTIFACILITY\n\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"10\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://automation-qa.staging.oqton.ai/|vidhi.kandolkar@oqton.com|Oqton123#|Profile|Profile|To check inbox icon on Login page(step1 to 4)|\n\n\n  @MULTIFACILITY\n  Scenario Outline: Create Facility\n    When Create Facility,\"<facility_name>\"\n    And Read data and store in dictionary: data=\"<facility_name>\", key=\"FACILITY1_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_OUTPUT_KEY\", expected=\"##EXPECTED_FACILITY_NAME1\". title=\"<title>\"\n\n\n\n\n    Examples:\n    |facility_name|output_data_key|expected_data_key|title|\n    |MULTIFACILITY_BY_ADMIN_FACILITY1|OUTPUT_FACILITY_NAME1|EXPECTED_FACILITY_NAME1|To check facility 1  is getting created|\n  \n\n\n  @MULTIFACILITY\n  Scenario Outline: Update Facility\n    When Update facility value,\"<user>\" \"<facility>\"\n    Then Check value of element \"<element_name>\" \"<title>\"\n\n\n\n\n    Examples:\n    |user|facility|element_name|title|\n    |vidhi.kandolkar+houstonuser2@oqton.com|##FACILITY1_OUTPUT_KEY|Facilities|To check facility value is getting updated|\n\n\n    \n@MULTIFACILITY\n  Scenario Outline: Create customer selecting facility using admin account\n    When Create Customer for  Facility__=\"<facility>\" using admin account,\"<customer_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<customer_name_to_enter>\", key=\"FACILITY1_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n      |facility|customer_name_to_enter|title|\n      |##FACILITY1_OUTPUT_KEY|Facility 1 Customer|To check  Customer for Facility1  is created successfully using admin account|\n\n\n\n\n@MULTIFACILITY\n  Scenario Outline: Create Subcontractor selecting facility using admin account\n    When Create Subcontractor for  Facility__=\"<facility>\" using admin account,\"<subcontractor_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<subcontractor_name_to_enter>\", key=\"FACILITY1_SUBCONTRACTOR_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n      |facility|subcontractor_name_to_enter|title|\n      |##FACILITY1_OUTPUT_KEY|Facility 1 Subcontractor|To check Subcontractor for Facility1  is created successfully using admin account|\n\n\n\n      \n@MULTIFACILITY\n  Scenario Outline: Create Supplier selecting facility using admin account\n    When Create Supplier for  Facility__=\"<facility>\" using admin account,\"<supplier_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<supplier_name_to_enter>\", key=\"FACILITY1_SUPPLIER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_SUPPLIER_OUTPUT_KEY\", expected=\"##EXPECTED_SUPPLIER_NAME\". title=\"<title>\"\n\n     Examples:\n      |facility|supplier_name_to_enter|title|\n      |##FACILITY1_OUTPUT_KEY|Facility 1 Supplier|To check Supplier for Facility1  is created successfully using admin account|\n\n\n\n\n@MULTIFACILITY\n  Scenario Outline: Create Manufacturer selecting facility using admin account\n    When Create Manufacturer for Facility__=\"<facility>\" using admin account,\"<manufacturer_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<manufacturer_name_to_enter>\", key=\"FACILITY1_MANUFACTURER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_MANUFACTURER_OUTPUT_KEY\", expected=\"##EXPECTED_MANUFACTURER_NAME\". title=\"<title>\"\n\n     Examples:\n      |facility|manufacturer_name_to_enter|title|\n      |##FACILITY1_OUTPUT_KEY|Facility 1 Manufacturer|To check Manufacturer for Facility1 is created successfully using admin account|\n\n\n      @MULTIFACILITY\n  Scenario Outline: Create Material Model selecting facility using admin account\n    When Create Material Model for Facility__=\"<facility>\" using admin account,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"FACILITY1_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n     Examples:\n      |facility|material_model_name_to_enter|title|\n      |##FACILITY1_OUTPUT_KEY|Facility 1 Material Model|To check Material Model of type Generic for Facility1 is created successfully using admin account|\n\n\n      \n      @MULTIFACILITY\n  Scenario Outline: Create Material  selecting facility using admin account\n    When Create Material of \"<type>\" type for Facility__=\"<facility>\" using admin account,\"<material_model_output_key>\" <initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"FACILITY1_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n     Examples:\n      |type|facility|material_model_name_to_enter|initial_weight|price|file1|file_path|file2|output_data_key|expected_data_key|title|\n      |Generic|##FACILITY1_OUTPUT_KEY|Facility 1 Material Model|50|110|LIST-123_V1.0.pdf|C:\\AMNOVIS\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|MATERIAL_MODEL_FOUND|EXPECTED_MATERIAL_MODEL_NAME|Check if Material Model name on Materials Page Step 10 - 11|\n\n\n\n            @MULTIFACILITY\n  Scenario Outline: Create Cell Model  selecting facility using admin account\n    When Create Cell Model for Facility__=\"<facility>\" using admin account,\"<cell_model_name_generic_to_enter>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic_to_enter>\", key=\"FACILITY1_CELL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY1_CELL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n     Examples:\n      |facility|cell_model_name_generic_to_enter|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|output_data_key|expected_data_key|title|\n      |##FACILITY1_OUTPUT_KEY|Facility 1 Cell Model Generic|100|190| 610|FACILITY1_CELL_MODEL_OUTPUT_KEY|GENERIC_FACILITY_CELL_MODEL|Check if Generic Facility Cell Model Has Been Created|\n\n\n\n  @REGRESSIONG\n  Scenario Outline: Create cell Generic for facility\n    When Create Cell for Facility__=\"<facility>\" using admin account,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"GENERIC_FACILITY_CELL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_FACILITY_CELL_OUTPUT_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n  \n     Examples:\n    |facility|cell_name_generic|serial_no|file1|file_path|file2|title|\n    |##FACILITY1_OUTPUT_KEY|Facility Generic Cell|Reg Serial Number|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|To verify Cell with facility of type Generic is created successfully|\n\n\n@MULTIFACILITY\n  Scenario Outline: Create Action Model Generic for facility \n    When Create Action Model for Facility__=\"<facility>\" using admin account,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_FACILITY_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_FACILITY_ACTION_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n     |facility|action_model_name_to_enter|title|\n     |##FACILITY1_OUTPUT_KEY|Facility Action Model Generic|To verify Generic Action Model using facility is created successfully|\n\n\n\n@MULTIFACILITY\n  Scenario Outline: Create Route Model for facility\n    When Create Route Model for Facility__=\"<facility>\" with \"{action_model_type}\" using admin account,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_FOR_FACILITY_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_FOR_FACILITY_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_GENERIC_AM\". title=\"<title>\"\n\n \n     Examples:\n      |facility|action_model_type|route_model_name|material_model|action_model_name|title|\n      |##FACILITY1_OUTPUT_KEY|Generic|ROUTE_MODEL_FOR_FACILITY_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|FACILITY1_MATERIAL_MODEL_OUTPUT_KEY|GENERIC_FACILITY_ACTION_MODEL_OUTPUT_KEY|Facility Route model with Generic Action Model is created successfully|\n\n\n\n\n@MULTIFACILITY\n  Scenario Outline: Create Part Model for facility\n    When Create Part Model for Facility__=\"<facility>\" using admin account, \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_FACILITY_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##PART_MODEL_WITH_FACILITY_OUTPUT_KEY\", expected=\"##PART_MODEL\". title=\"<title>\"\n\n \n     Examples:\n      |facility|action_model_type|material_model_input|route_model_input|pm_type|part_model_name|file|file_path|title|\n      |##FACILITY1_OUTPUT_KEY|Generic|FACILITY1_MATERIAL_MODEL_OUTPUT_KEY|ROUTE_MODEL_FOR_FACILITY_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|3D Geometry|Facility Part Model|K59YH14L-70A.stl|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Facility Part model with Generic Action Model is created successfully|\n\n\n\n@MULTIFACILITY\n  Scenario Outline: Approve Part Model for facility\n    When Edit Part Model with \"<type>\" Action Model and approve  for Facility using admin account,\"<file1>\" \"<file_path>\" \"<file2>\"\n      Then Verifying files are uploaded on Part Model,\"<file1>\"\"<file2>\"\n      Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n      And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_FACILITY_ACTION_MODEL_OUTPUT_KEY\"\n      Then Assert data equals expected: data=\"##PART_MODEL_WITH_FACILITY_ACTION_MODEL_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_AM\". title=\"<title>\"\n\n\n    Examples:\n      |type|file1|file_path|file2|part_model_name|status_type|expected_data|title|\n      |Generic|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Facility Part Model|Approved|Approved|Check if Part model status has been approved|\n\n\n\n @REGRESSIONS \n  Scenario Outline: Create Parts for facility\n    Given Create Parts from Part list page for Facility__=\"<facility>\" using admin account,\"<part_model_name_input>\" <qty> \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\" \"<file3>\" \"<file4>\"\n    When Read Part IDs from \"<part_model_name_input>\" details and store\n    And Click on Parts page to view the details\n    Then Read data and store in dictionary: data=\"<action_id>\", key=\"PART_ACTION_ID\"\n\n\n      Examples:\n      |facility|part_model_name_input|qty|notes|file1|file_path|file2|file3|file4|status_type|expected_data|title|action_id|\n      |##FACILITY1_OUTPUT_KEY|PART_MODEL_WITH_FACILITY_OUTPUT_KEY|10|Facility Part Notes|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|Ready To Start|Ready To Start|Check if parts are getting created|A-0|\n\n  @REGRESSIONS \n  Scenario Outline: Create 2 more parts from Part Models\n    Given Create Parts from Part Model details page  for Facility__=\"<facility>\" using admin account,<qty> \"<Part_Model_input>\"\n    And Read Part IDs from \"<Part_Model_input>\" details and store\n\n    #Then Verifying Parts created,\"<element_to_find>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |facility|qty|Part_Model_input|\n      |##FACILITY1_OUTPUT_KEY|5|PART_MODEL_WITH_FACILITY_ACTION_MODEL_OUTPUT_KEY|\n      |##FACILITY1_OUTPUT_KEY|5|PART_MODEL_WITH_FACILITY_ACTION_MODEL_OUTPUT_KEY|\n\n\n @REGRESSIONS \n  Scenario Outline: To Start Part Action\n    When Start an Action,\"<action_id>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |action_id|status_type|expected_data|title|\n    |PART_ACTION_ID|In Progress|In Progress|Check if Part Action status is in In Progress|\n\n\n\n @REGRESSIONS \n  Scenario Outline: To Finish Part Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Part Action status has been Finished.|\n\n",
      "Generic_Workflow_OP1_Fac1.feature": "\nFeature: Generic Workflow for OP1\n\n  @REGRESSIONG\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONG\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://automation-qa.staging.oqton.ai/|vidhi.kandolkar+houston@oqton.com|Oqton123#|Profile|Profile|To check inbox icon on Login page(step1 to 4)|\n\n\n @REGRESSIONG\n  Scenario Outline: Create Material Model Resin\n    When Create Material Model with type as Resin,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"RESIN_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##RESIN_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##RESIN_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n     |material_model_name_to_enter|title|\n     |Regression Material Model Resin|Regression Material Model of type Resin is created successfully|\n\n\n   @REGRESSIONG\n  Scenario Outline: Create Material of model resin\n    Given Create Material of model resin,<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"RESIN_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##RESIN_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##RESIN_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      |material_id|initial_weight|price|file1|file_path|file2|title|\n      |M-000|50|110|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression material of type resin is created successfully|\n\n\n @REGRESSIONG\n  Scenario Outline: Create Tool Model Build Plate\n    When Create Tool Model of type Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n    And Read data and store in dictionary: data=\"<tool_model_name>\", key=\"TOOL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##TOOL_MODEL_OUTPUT_KEY\", expected=\"##BUILD_PLATE_TOOL_MODEL\". title=\"<title>\"\n\n\n     Examples:\n      |tool_model_name|length_val|width_val|height_val|title|\n      |Regression Build Tool Model|500|500| 500|Regression Tool Model of type Build Plate is created successfully|\n \n @REGRESSIONG\n  Scenario Outline:Build Plate\n    When Create Tool of type Build Plate,\"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<tool_model_name>\", key=\"TOOL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##TOOL_MODEL_OUTPUT_KEY\", expected=\"##BUILD_PLATE_TOOL_MODEL\". title=\"<title>\"\n\n    Examples:\n    |tool_model_name|notes|file1|file_path|file2|output_data_key|expected_data_key|title|\n     |Regression Build Tool Model|Regression Tool notes|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|TOOL_MODEL_FOUND|EXPECTED_TOOL_MODEL_NAME|A Tool is created of type build plate|\n\n\n  @REGRESSIONG\n  Scenario Outline: Create cell model Generic\n    When Create Cell Model of type Generic,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic>\", key=\"GENERIC_CELL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n      Examples:\n      |cell_model_name_generic|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|title|\n      |Regression Cell Model Generic|100|190| 610|Regression Cell Model of type Generic is created successfully|\n\n @REGRESSIONG\n  Scenario Outline: Create cell Generic\n    When Create Cell from Cell Model of type Generic,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"GENERIC_CELL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_OUTPUT_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n  \n     Examples:\n     |cell_name_generic|serial_no|file1|file_path|file2|title|\n      |Regression Generic Cell|Reg Serial Number|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression Cell of type Generic is created successfully|\n\n\n@REGRESSIONG\n  Scenario Outline: Create Action Model Generic\n    When Create Action Model of type Generic,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n     |action_model_name_to_enter|title|\n     |Regression Action Model Generic|Regression Generic Action Model is created successfully|\n\n@REGRESSIONG\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_GENERIC_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|route_model_name|material_model|action_model_name|title|\n      |Generic|Route Model with Generic Action Model|RESIN_MATERIAL_MODEL_OUTPUT_KEY|GENERIC_ACTION_MODEL_OUTPUT_KEY|Regression Route model with Generic Action Model is created successfully|\n\n\n@REGRESSIONG\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n      |customer_name|title|\n      |Regression Customer|To check Regression Customer is created successfully|\n\n@REGRESSIONG\n Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|material_model_input|route_model_input|pm_type|part_model_name|file|file_path|title|\n      |Generic|RESIN_MATERIAL_MODEL_OUTPUT_KEY|ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|3D Geometry|Regression Part Model|K59YH14L-70A.stl|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Regression Part model with Generic Action Model is created successfully|\n\n\n\n\n @REGRESSIONG\n  Scenario Outline: Approve Part Model\n    When Edit Part Model with \"<type>\" Action Model and approve,\"<file1>\" \"<file_path>\" \"<file2>\"\n      Then Verifying files are uploaded on Part Model,\"<file1>\"\"<file2>\"\n      Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n      And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n      Then Assert data equals expected: data=\"##PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_GENERIC_AM\". title=\"<title>\"\n\n\n    Examples:\n      |type|file1|file_path|file2|part_model_name|status_type|expected_data|title|\n      |Generic|LIST-123_V1.0.pdf|C:\\Github_Working\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression Part Model|Approved|Approved|Check if Part model status has been approved|\n\n\n\n @REGRESSIONG \n  Scenario Outline: Create Parts\n    Given Create Parts from Part list page,\"<part_model_name_input>\" <qty> \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\" \"<file3>\" \"<file4>\"\n    When Read Part IDs from \"<part_model_name_input>\" details and store\n    And Click on Parts page to view the details\n    Then Read data and store in dictionary: data=\"<action_id>\", key=\"PART_ACTION_ID\"\n\n\n      Examples:\n      |part_model_name_input|qty|notes|file1|file_path|file2|file3|file4|status_type|expected_data|title|action_id|\n      |PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|10|Regression Part Notes|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|Ready To Start|Ready To Start|Check if parts are getting created|A-0|\n\n  @REGRESSIONG \n  Scenario Outline: Create 2 more parts from Part Models\n    Given Create Parts from Part Model details page,<qty> \"<Part_Model_input>\"\n    And Read Part IDs from \"<Part_Model_input>\" details and store\n\n    #Then Verifying Parts created,\"<element_to_find>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |qty|Part_Model_input|\n      |5|PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|\n      |5|PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Start Part Action\n    When Start an Action,\"<action_id>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |action_id|status_type|expected_data|title|\n    |PART_ACTION_ID|Processing|Processing|Check if Part Action status is in Processing.|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Finish Part Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Part Action status has been Finished.|\n\n\n\n @REGRESSIONG \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then View details page of the approved Nest\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n    Examples:\n    |nest_action_id|\n    |A-0|\n\n\n    @REGRESSIONG \n    Scenario Outline: To Start Nest Action\n    When Start an Action,\"<action_id>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |action_id|status_type|expected_data|title|\n    |NEST_ACTION_ID_OUTPUT_KEY|Processing|Processing|Check if Nest Action status is in Processing after starting an Action.|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Finish Nest Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Nest Action status has been Finished  after finishing an Action.|\n\n",
      "Generic_Workflow_OP2_Fac2.feature": "\nFeature: Generic Workflow for OP1\n\n  @REGRESSIONG\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONG\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://automation-qa.staging.oqton.ai/|vidhi.kandolkar+montrose@oqton.com|Oqton123#|Profile|Profile|To check inbox icon on Login page(step1 to 4)|\n\n\n @REGRESSIONG\n  Scenario Outline: Create Material Model Resin\n    When Create Material Model with type as Resin,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"RESIN_MATERIAL_MODEL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##RESIN_MATERIAL_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##RESIN_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n     |material_model_name_to_enter|title|\n     |Facility2 Material Model Resin|To verify Facility2 Material Model of type Resin is created successfully|\n\n\n   @REGRESSIONG\n  Scenario Outline: Create Material of model resin\n    Given Create Material of model resin,<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"RESIN_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##RESIN_MATERIAL_MODEL_FAC2_OUTPUT_KEY\", expected=\"##RESIN_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      |material_id|initial_weight|price|file1|file_path|file2|title|\n      |M-000|50|110|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|To verify Facility2 material of type resin is created successfully|\n\n\n @REGRESSIONG\n  Scenario Outline: Create Tool Model Build Plate\n    When Create Tool Model of type Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n    And Read data and store in dictionary: data=\"<tool_model_name>\", key=\"TOOL_MODEL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##TOOL_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##BUILD_PLATE_TOOL_MODEL\". title=\"<title>\"\n\n\n     Examples:\n      |tool_model_name|length_val|width_val|height_val|title|\n      |Facility2 Build Tool Model|500|500| 500|To verify for Facility2, Tool Model of type Build Plate is created successfully|\n \n @REGRESSIONG\n  Scenario Outline:Build Plate\n    When Create Tool of type Build Plate,\"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<tool_model_name>\", key=\"TOOL_MODEL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##TOOL_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##BUILD_PLATE_TOOL_MODEL\". title=\"<title>\"\n\n    Examples:\n    |tool_model_name|notes|file1|file_path|file2|output_data_key|expected_data_key|title|\n     |Facility2 Build Tool Model|Regression Tool notes|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|TOOL_MODEL_FOUND|EXPECTED_TOOL_MODEL_NAME|To verify for Facility2, Tool is created of type build plate|\n\n\n  @REGRESSIONG\n  Scenario Outline: Create cell model Generic\n    When Create Cell Model of type Generic,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic>\", key=\"GENERIC_CELL_MODEL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n      Examples:\n      |cell_model_name_generic|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|title|\n      |Facility2 Cell Model Generic|100|190| 610|To verify for Facility2, Cell Model of type Generic is created successfully|\n\n @REGRESSIONG\n  Scenario Outline: Create cell Generic\n    When Create Cell from Cell Model of type Generic,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"GENERIC_CELL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_FACILITY2_OUTPUT_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n  \n     Examples:\n     |cell_name_generic|serial_no|file1|file_path|file2|title|\n      |Facility2 Generic Cell|Reg Serial Number|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|To verify for Facility2, Cell of type Generic is created successfully|\n\n\n@REGRESSIONG\n  Scenario Outline: Create Action Model Generic\n    When Create Action Model of type Generic,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##GENERIC_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n     |action_model_name_to_enter|title|\n     |Facility2 Action Model Generic|To verify for Facility2, Generic Action Model is created successfully|\n\n@REGRESSIONG\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_GENERIC_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|route_model_name|material_model|action_model_name|title|\n      |Generic|Facility2 Route Model with Generic Action Model|RESIN_MATERIAL_MODEL_FACILITY2_OUTPUT_KEY|GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY|To verify for Facility2, Route model with Generic Action Model is created successfully|\n\n\n@REGRESSIONG\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"FACILITY2_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##FACILITY2_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title1>\"\n    And Click Element,Element_Text=\"<element_text>\",Element_Context=\"<element_context>\"\n    And Checking item does not exists, \"<item>\", \"<title2>\"\n\n     Examples:\n      |customer_name|title1|element_text|element_context|item|title2|\n      |Facility2 Customer|To Verify for Facility2,Customer is created successfully|Customers|Edit|Facility 1 Customer_2025-01-25 12:43:24|To Verify Facility1 customer is not shown in Facility2|\n\n@REGRESSIONG\n Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##PART_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|material_model_input|route_model_input|pm_type|part_model_name|file|file_path|title|\n      |Generic|RESIN_MATERIAL_MODEL_FACILITY2_OUTPUT_KEY|ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY|3D Geometry|Facility2 Part Model|K59YH14L-70A.stl|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|To verify for Facility2, Part model with Generic Action Model is created successfully|\n\n\n\n\n @REGRESSIONG\n  Scenario Outline: Approve Part Model\n    When Edit Part Model with \"<type>\" Action Model and approve,\"<file1>\" \"<file_path>\" \"<file2>\"\n      Then Verifying files are uploaded on Part Model,\"<file1>\"\"<file2>\"\n      Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n      And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\"\n      Then Assert data equals expected: data=\"##PART_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_GENERIC_AM\". title=\"<title>\"\n\n\n    Examples:\n      |type|file1|file_path|file2|part_model_name|status_type|expected_data|title|\n      |Generic|LIST-123_V1.0.pdf|C:\\Github_Working\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Facility2 Part Model|Approved|Approved|To verify for Facility2, Part model status has been approved|\n\n\n\n @REGRESSIONG \n  Scenario Outline: Create Parts\n    Given Create Parts from Part list page,\"<part_model_name_input>\" <qty> \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\" \"<file3>\" \"<file4>\"\n    When Read Part IDs from \"<part_model_name_input>\" details and store\n    And Click on Parts page to view the details\n    Then Read data and store in dictionary: data=\"<action_id>\", key=\"PART_ACTION_ID\"\n\n\n      Examples:\n      |part_model_name_input|qty|notes|file1|file_path|file2|file3|file4|status_type|expected_data|title|action_id|\n      |PART_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY|10|Facility2 Part Notes|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|Ready To Start|Ready To Start|To verify for Facility2,parts are getting created|A-0|\n\n  @REGRESSIONG \n  Scenario Outline: Create 2 more parts from Part Models\n    Given Create Parts from Part Model details page,<qty> \"<Part_Model_input>\"\n    And Read Part IDs from \"<Part_Model_input>\" details and store\n\n    #Then Verifying Parts created,\"<element_to_find>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |qty|Part_Model_input|\n      |5|PART_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY|\n      |5|PART_MODEL_WITH_GENERIC_ACTION_MODEL_FACILITY2_OUTPUT_KEY|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Start Part Action\n    When Start an Action,\"<action_id>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |action_id|status_type|expected_data|title|\n    |PART_ACTION_ID|Processing|Processing|Check if Part Action status is in Processing.|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Finish Part Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Part Action status has been Finished.|\n\n\n\n @REGRESSIONG \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then View details page of the approved Nest\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n    Examples:\n    |nest_action_id|\n    |A-0|\n\n\n    @REGRESSIONG \n    Scenario Outline: To Start Nest Action\n    When Start an Action,\"<action_id>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |action_id|status_type|expected_data|title|\n    |NEST_ACTION_ID_OUTPUT_KEY|Processing|Processing|Check if Nest Action status is in Processing after starting an Action.|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Finish Nest Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Nest Action status has been Finished  after finishing an Action.|\n\n\n"
  },
  "NAMI": {
      "NamiRequestWorkflow.feature": "Feature: Nami Workflow with single Line Item\n\n\nScenario Outline: Set timestamp for workflow\n  Given Set timestamp\n  Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\nExamples:\n  |json            |json_path|\n  |testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\nScenario: initial derectives\n  Given Enable all Screenshot\n\n\nScenario Outline: Login as a Customer\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verifying customer login success\"\n\n  Examples:\n  |url                                  |email                                  |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+customerdefault_nami@oqton.com|Oqton2018!|\n\n\n\nScenario Outline: Create New Request\n  Given Create a new request for Nami with \"<description>\" and \"<requester_company>\"\n  When Verify OrderV2 created successfully with \"<description>\"\n  And Get OrderV2 ID from Order Details page\n  Then Save Key=\"OrderID_V2\" Value=\"!!OrderID_V2\" to Json_File=\"<json>\",Json_Path=\"<path>\"\n\n\n  Examples:\n  |description         |requester_company         |json            |path                                                       |\n  |Test Description|Test Requester Company|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\n Scenario Outline: Add Line item\n  Given Nami-Add Line item \"<file_name>\",\"<file_path>\",\"<quantity>\",\"<due_date>\",\"<base_material>\" and \"<material>\"\n   When Verify line item of \"<requested_service>\" has been addeed successfully\n   And Get LineItem ID from Order Details page\n   Then Save Key=\"LineItemIDs\" Value=\"!!LineItemIDs\" to Json_File=\"<json>\",Json_Path=\"<path>\"\n\nExamples:\n    |requested_service|file_name|file_path|quantity|due_date|base_material|material|json|path|\n    |Full Production|Crown1.stl|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|4|7200|Metal|Other|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\n Scenario Outline: Submit Request\n  Given Submit the customer request with \"<delivery_method>\" as Pickup\n  When Enter Pickup details \"<pickup_address>\"\n  And Verify that request has been submitted successfully\n  Then Logout\n\n\n  Examples:\n  |delivery_method|pickup_address|\n  |Pickup           |Your address|\n\n\nScenario Outline: Login to Engineering Default Persona\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verify Engineering Default Login Success\"\n\n  Examples:\n  |url                                  |email                              |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+engineeringdefault_nami@oqton.com|Oqton2018!|\n\n\nScenario Outline: Open the Request, Edit Line Item and Move to Costing\n  Given Read Key=\"OrderID_V2,LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Click \"Home\"\n  And Open the \"<orderID_v2>\" request\n  And Wait for \"5\"\n  And Assign Nami \"<responsible_engineer>\"\n  And Move Nami \"<line_item>\" to Costing\n  Then Verify that \"<line_item>\" was successfully moved to Costing\n\n  Examples:\n |responsible_engineer                  |orderID_v2|line_item|json            |json_path|\n |jaiyesh.salgaonkar+engineeringdefault_nami@oqton.com|!!OrderID_V2|!!LineItemIDs|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\nScenario Outline: Set Price for line items from Engineering Default persona\n  Given Read Key=\"OrderID_V2,LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Click \"Home\"\n  And Open the \"<orderID_v2>\" request\n  Given Set Price \"<line_item>\" with \"<quoted_quantities>\",\"<unit_part_cost>\",\"<unit_part_price>\" and \"<total_price>\"\n  And Get Quote ID\n  Then Save Key=\"pricing_QuoteID\" Value=\"!!pricing_QuoteID\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n   Then Logout\n\nExamples:\n    |orderID_v2|line_item|quoted_quantities|unit_part_cost|unit_part_price|total_price|json|json_path|\n    |!!OrderID_V2|!!LineItemIDs|5|100|111|125|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\n\nScenario Outline: Login to Sales Default Persona\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verify Sales Default Login Success\"\n\n  Examples:\n  |url                                  |email                              |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+salesdefault_nami@oqton.com|Oqton2018!|\n\n\n  Scenario Outline: Create and Submit Quote from Sales Default\n   Given Read Key=\"OrderID_V2,LineItemIDs,pricing_QuoteID\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Click \"Home\"\n  And Open the \"<orderID_v2>\" request\n  And Create Quote for the Nami \"<line_item>\" with \"<pricing_QuoteID>\" \"<total_cost>\" \"<total_price>\" \"<final_price>\" \"<lead_time>\"\n  Then Nami Generate and Submit Quote to Customer\n  And Get Submitted Quote ID\n   Then Save Key=\"submitted_QuoteID\" Value=\"!!submitted_QuoteID\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n  Then Logout\n\n  Examples:\n  |orderID_v2  |line_item    |pricing_QuoteID  |total_cost|total_price|final_price|lead_time|json                |json_path                                                       |\n  |!!OrderID_V2|!!LineItemIDs|!!pricing_QuoteID|200      |300        |555.89              |5        |testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\n Scenario Outline: Login as a Customer Default to accept the quote\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verify Customer Login Success\"\n\n  Examples:\n  |url                                  |email                                  |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+customerdefault_nami@oqton.com|Oqton2018!|\n\n\nScenario Outline: Accept the Quote and provide payment information\n   Given Read Key=\"OrderID_V2,submitted_QuoteID\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Open the \"<orderID_v2>\" request\n  And Accept the Nami \"<submitted_quote>\"\n  And Enter payment information \"<payment_method>\" \"<PO_number>\" \"<PO_file>\" for \"<submitted_quote>\"\n  Then Logout\n\n  Examples:\n |orderID_v2  |submitted_quote    |payment_method|PO_number|PO_file  |json                |json_path                                                       |\n|!!OrderID_V2|!!submitted_QuoteID|Purchase Order|12345    |Oqton.pdf|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\n  Scenario Outline: Login to Sales Default Persona\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verify Sales Default Login Success\"\n\n  Examples:\n  |url                                  |email                              |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+salesdefault_nami@oqton.com|Oqton2018!|\n\n\n Scenario Outline: Accept Payment\n  Given Read Key=\"OrderID_V2,LineItemIDs,submitted_QuoteID\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Open the \"<orderID_v2>\" request\n   And Wait for \"6\"\n  And Confirm payment for Nami \"<line_item>\" \"<submitted_quote>\" with \"<payment_line_number>\"\n  Then Logout\n\n  Examples:\n  |orderID_v2  |line_item    |submitted_quote    |payment_line_number|json                |json_path                                                       |\n  |!!OrderID_V2|!!LineItemIDs|!!submitted_QuoteID|11111              |testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\n Scenario Outline: Login to Engineering Default Persona\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verify Engineering Default Login Success\"\n\n  Examples:\n  |url                                  |email                              |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+engineeringdefault_nami@oqton.com|Oqton2018!|\n\n\n Scenario Outline: Create and Assign Part Model & Send to Customer\n   Given Read Key=\"OrderID_V2,LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n   Given Open the \"<orderID_v2>\" request\n   When Create part model for Nami \"<line_item>\" \"<customer>\" \"<material_model>\"\n   And Nami-Assign the part model \"<pm_name>\" to \"<line_item>\"\n   Then Nami-Send to Customer for Approval \"<line_item>\" \"<file_name1>\",\"<file_name2>\",\"<file_path>\"\n   Then Logout\n\n   Examples:\n  |orderID_v2  |line_item |pm_name|file_name1| file_name2|file_path|timestamp  |json                |json_path                                                       |customer|material_model|\n  |!!OrderID_V2|!!LineItemIDs|Crown1.stl    |Oqton.pdf|Quote.pdf  |C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|!!timestamp|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|TestJ Customer|DuraForm ProX PA|\n\n\n Scenario Outline: Login as a Customer\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verifying customer login success\"\n\n  Examples:\n  |url                                  |email                                  |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+customerdefault_nami@oqton.com|Oqton2018!|\n\n\n  Scenario Outline: Approve Route\n   Given Read Key=\"OrderID_V2,LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n   When Open the \"<orderID_v2>\" request\n   Then Click on Approve Route \"<line_item>\"\n    Then Logout\n\n   Examples:\n  |orderID_v2  |line_item   |json                |json_path                                                       |\n  |!!OrderID_V2|!!LineItemIDs|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n\n\n\nScenario Outline: Login to Engineering Default Persona\n  Given Go to <url>\n  When login with \"<email>\" \"<password>\"\n  Then Verify Element exists on page, element=\"Request Portal\", title=\"Verify Engineering Default Login Success\"\n\n  Examples:\n  |url                                  |email                              |password  |\n  |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+engineeringdefault_nami@oqton.com|Oqton2018!|\n\n\nScenario Outline: Move to Production\n  Given Read Key=\"OrderID_V2,LineItemIDs\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Click \"Home\"\n  And Open the \"<orderID_v2>\" request\n  And Nami-Move \"<line_item>\" to Production\n  Then Create OrderV1 for \"<line_item>\",\"<customer>\"\n\n\n\n  Examples:\n|orderID_v2|line_item|customer|json            |json_path|\n |!!OrderID_V2|!!LineItemIDs|TestJ Customer|testNamiWorkflow.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Nami|\n",
      "NamiWorkflow1.feature": "Feature: Nami Workflow\n\n   @Nami\n   Scenario: Setting Directives\n    Given Enable all Screenshot\n\n  @Nami\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n\t|url|email|password|output_data_key|expected_data_key|title|\n\t|https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+automation@oqton.com|Oqton2018!|Inbox|Inbox|Check if User Login logged in|\n\n\n  @Nami\n  Scenario Outline:Verifying Personas details pages for NAMI\n#    When Verify Personas, \"<persona_name>\" \"<persona_output>\"\n#    Then Verifying \"Personas\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    When Open persona: persona=\"<persona_name>\"\n    And Read data and store in dictionary: data=\"<persona_name>\", key=\"<output_data_key>\"\n#    And Add to dictionary: key=\"<expected_data_key>\", value=\"<persona_name>\"\n    Then Assert data equals expected: data=\"##<output_data_key>\", expected=\"<persona_name>\". title=\"<title>\"\n\n   Examples:\n      |persona_name|output_data_key|title|\n      |SEC|Persona_Name|Verify Persona name is shown as SEC|\n      |MAADEN|Persona_Name|Verify Persona name is shown as MAADEN|\n      |Ministry of Industry and Mineral Resources|Persona_Name|Verify Persona name is shown as Ministry of Industry and Mineral Resources|\n\n  @Nami\n  Scenario Outline:Verifying Personas Navigation paths tab Part Library details\n#    When Verify Persona navigation path tab Overview details, \"<persona_name>\" \"<part_library>\"\n#    Then Verifying \"Personas\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    When Open persona: persona=\"<persona_name>\"\n    And click \"Navigation Paths\"\n    And Read data and store in dictionary: data=\"<part_library>\", key=\"<output_data_key>\"\n    And Click on: item=\"Item Detail Layouts\", context=\"/part models\"\n    And Read data and store in dictionary: data=\"<partModelDetailPage>\", key=\"<partModel_output_data_key>\"\n#    And Add to dictionary: key=\"<expected_data_key>\", value=\"<persona_name>\"\n    Then Assert data equals expected: data=\"##<output_data_key>\", expected=\"<part_library>\". title=\"<title>\"\n    Then Assert data equals expected: data=\"##<partModel_output_data_key>\", expected=\"<partModelDetailPage>\". title=\"<title2>\"\n\n    Examples:\n      |persona_name|part_library|output_data_key|expected_data_key|title|partModelDetailPage|partModel_output_data_key|title2|\n      |SEC|Part Library - SEC|Part_Library_Name|Expected Part Library Name|Verify Persona Part Library Name is shown as SEC|Part Model Detail Page|Part_Model_Detail_Page|Verify Persona Item details layout for SEC|\n      |MAADEN|Part Library - MAADEN|Part_Library_Name|Expected Part Library Name|Verify Persona Part Library Name is shown as MAADEN|Part Model Detail Page|Part_Model_Detail_Page|Verify Persona Item details layout for MAADEN|\n      |Ministry of Industry and Mineral Resources|Part Library - Ministry of Industry and Mineral Resources|Part_Library_Name|Expected Part Library Name|Verify Persona Part Library Name is shown as Ministry of Industry and Mineral Resources|Part Model Detail Page|Part_Model_Detail_Page|Verify Persona Item details layout for Ministry of Industry and Mineral Resources|\n\n\n   @Nami\n  Scenario Outline:Verifying Personas Navigation paths tab Item details layouts\n    When Verify Persona navigation path tab Item details, \"<persona_name>\" \"<partModelDetailPage>\"\n    Then Verifying \"Personas\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n      |persona_name|partModelDetailPage|output_data_key|expected_data_key|title|\n      |SEC|Part Model Detail Page|Part Model Detail Page Name|Expected Part Model Detail Page Name|Verify Persona Item details layout for SEC|\n      |MAADEN|Part Model Detail Page|Part Model Detail Page Name|Expected Part Model Detail Page Name|Verify Persona Item details layout for MAADEN|\n      |Ministry of Industry and Mineral Resources|Part Model Detail Page|Part Model Detail Page Name|Expected Part Model Detail Page Name|Verify Persona Item details layout for Ministry of Industry and Mineral Resources|\n\n   @Nami\n  Scenario Outline:Verifying Personas Global Navigation paths tab details\n    When Verify Persona Global Navigation path tab details, \"<persona_name>\" \"<partModels>\"\n    Then Verifying \"Personas\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n      |persona_name|partModels|output_data_key|expected_data_key|title|\n      |SEC|Part Models|Part Models Name|Expected Part Models Name|Verify Persona Global Navigation menu for SEC|\n      |MAADEN|Part Models|Part Models Name|Expected Part Models Name|Verify Persona Global Navigation menu for MAADEN|\n      |Ministry of Industry and Mineral Resources|Part Models|Part Models Name|Expected Part Models Name|Verify Persona Global Navigation menu for Ministry of Industry and Mineral Resources|\n\n\n#@Nami\n#Scenario Outline:Verifying assigned Role Personas & Default Personas to all 3 Users\n#  Given Verify assigned Role & Personas to User, \"<user>\" \"<role>\" \"<personas>\" \"<defaultPersonas>\"\n#  Examples:\n#  |user|role|personas|defaultPersonas|\n#  |jaiyesh.salgaonkar+customer1_nami@oqton.com|Customer|SEC|SEC|\n#  |jaiyesh.salgaonkar+customer2_nami@oqton.com|Customer|MAADEN|MAADEN|\n#  |jaiyesh.salgaonkar+customer3_nami@oqton.com|Customer|Ministry of Industry and Mineral Resources|Ministry of Industry and Mineral Resources|\n#\n#\n# @Nami\n#Scenario Outline:Verifying Part Models count for each customer\n#  Given Verify Part Models, \"<customer>\"\n#\n#  Examples:\n#  |customer|\n#  |SEC|\n#  |Maden|\n#  |Ministry|\n#\n#\n#  @Nami\n#Scenario Outline: Verify Login to check each Personas access\n#  Given Go to <url>\n#  And login with \"<email>\" \"<password>\"\n#  Then Check Persona view for Logged In User, \"<persona>\"\n#  And Click logout\n#\n#  Examples:\n#  |url|email|password|persona|\n#  |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+customer1_nami@oqton.com|Oqton2018!|Part Library - SEC|\n#  |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+customer2_nami@oqton.com|Oqton2018!|Part Library - MAADEN|\n#  |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+customer3_nami@oqton.com|Oqton2018!|Part Library - Ministry of Industry and Mineral Resources|\n#\n\n\n",
      "PersonaAccess.feature": "Feature: Nami Workflow Persona Access check for Users\n\n @Nami\n Scenario: Setting Directives\n  Given Enable all Screenshot\n\n\n#  @Nami\n#  Scenario Outline: Login with valid credentials\n#    Given Go to <url>\n#    When login with \"<email>\" \"<password>\"\n#    And Wait for 10\n#    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n#\n#    Examples:\n#\t|url|email|password|output_data_key|expected_data_key|title|\n#\t|https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+automation@oqton.com|Oqton2018!|Inbox|Inbox|Check if User Login logged in|\n#\n\n\n\n#  @Nami\n#  Scenario Outline:Verifying Part Models count for each customer\n#    When Open Part Models, \"<customer>\"\n#    And Read data and store in dictionary: data=\"<partModelID>\", key=\"<partModelID_output_data_key>\"\n#    Then Assert data equals expected: data=\"##<partModelID_output_data_key>\", expected=\"<partModelID>\". title=\"<title>\"\n#\n#    Examples:\n#    |customer|partModelID|partModelID_output_data_key|title|\n#    |SEC|P-M-000-0018|PartModel_ID|Verify SEC customer Part model ID|\n#    |Maden|P-M-000-0017|PartModel_ID|Verify Maden customer Part model ID|\n#    |Ministry|P-M-000-0061|PartModel_ID|Verify Ministry customer Part model ID|\n\n\n\n  @Nami\n  Scenario Outline: Verify Login to check each Personas access\n    Given Go to <url>\n    And login with \"<email>\" \"<password>\"\n    And Wait for 15\n    And Read data and store in dictionary: data=\"<partLibrary>\", key=\"<output_data_key>\"\n    Then Assert data equals expected: data=\"##<output_data_key>\", expected=\"<partLibrary>\". title=\"<title>\"\n    And Read data and store in dictionary: data=\"<partModelID>\", key=\"<partModelID_output_data_key>\"\n    Then Assert data equals expected: data=\"##<partModelID_output_data_key>\", expected=\"<partModelID>\". title=\"<title2>\"\n    And Click logout\n\n    Examples:\n    |url|email|password|partLibrary|output_data_key|title|partModelID|partModelID_output_data_key|title2|\n#    |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+customer1_nami@oqton.com|Oqton2018!|Part Library - SEC|Part_Library_Name|Verify Part Library SEC is shown|P-M-000-0018|PartModel_ID|Verify SEC customer Part model ID|\n#    |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+customer2_nami@oqton.com|Oqton2018!|Part Library - MAADEN|Part_Library_Name|Verify Part Library MAADEN is shown|P-M-000-0017|PartModel_ID|Verify Maden customer Part model ID|\n#    |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+customer3_nami@oqton.com|Oqton2018!|Part Library - Ministry of Industry and Mineral Resources|Part_Library_Name|Verify Part Library Ministry of Industry and Mineral Resources is shown|P-M-000-0061|PartModel_ID|Verify Ministry customer Part model ID|\n    |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+customer1_nami@oqton.com|Oqton2018!|Part Library - SEC|Part_Library_Name|Verify Part Library SEC is shown|P-M-000-0003|PartModel_ID|Verify SEC customer Part model ID|\n    |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+customer2_nami@oqton.com|Oqton2018!|Part Library - MAADEN|Part_Library_Name|Verify Part Library MAADEN is shown|P-M-000-0004|PartModel_ID|Verify Maden customer Part model ID|\n    |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+customer3_nami@oqton.com|Oqton2018!|Part Library - Ministry of Industry and Mineral Resources|Part_Library_Name|Verify Part Library Ministry of Industry and Mineral Resources is shown|P-M-000-0007|PartModel_ID|Verify Ministry customer Part model ID|\n\n\n\n     @Nami\n  Scenario Outline: Verify Login to check pagination for persona access\n    Given Go to <url>\n    And login with \"<email>\" \"<password>\"\n    And Wait for 10\n    And click \"2\"\n    And Wait for 3\n    And Read data and store in dictionary: data=\"<partModelID>\", key=\"<partModelID_output_data_key>\"\n    Then Assert data equals expected: data=\"##<partModelID_output_data_key>\", expected=\"<partModelID>\". title=\"<title2>\"\n    And Click logout\n\n    Examples:\n    |url|email|password|partModelID|partModelID_output_data_key|title2|\n    |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+customer3_nami@oqton.com|Oqton2018!|P-M-000-0016|PartModel_ID|Verify Ministry customer Part model ID on page 2|",
      "PersonaDetails.feature": "Feature: Nami Workflow Persona details page verification\n\n   @NamiJ\n   Scenario: Setting Directives\n    Given Enable all Screenshot\n\n  @Nami\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n\t|url|email|password|output_data_key|expected_data_key|title|\n#\t|https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+automation@oqton.com|Oqton2018!|Inbox|Inbox|Check if User Login logged in|\n    |https://nami3dp.staging.oqton.ai/|jaiyesh.salgaonkar+automation@oqton.com|Oqton2018!|Inbox|Inbox|Check if User Login logged in|\n\n\n     @Nami\n  Scenario Outline:Verifying Personas details pages for NAMI\n    When Open persona: persona=\"<persona_name>\"\n    And Read data and store in dictionary: data=\"<persona_name>\", key=\"<output_data_key>\"\n    Then Assert data equals expected: data=\"##<output_data_key>\", expected=\"<persona_name>\". title=\"<title>\"\n\n   Examples:\n      |persona_name|output_data_key|title|\n      |SEC|Persona_Name|Verify Persona name is shown as SEC|\n      |MAADEN|Persona_Name|Verify Persona name is shown as MAADEN|\n      |Ministry of Industry and Mineral Resources|Persona_Name|Verify Persona name is shown as Ministry of Industry and Mineral Resources|\n\n\n  @Nami\n  Scenario Outline:Verifying Personas Navigation paths tab Part Library details\n    When Open persona: persona=\"<persona_name>\"\n    And click \"Navigation Paths\"\n    And Read data and store in dictionary: data=\"<part_library>\", key=\"<output_data_key>\"\n    And Click on: item=\"Item Detail Layouts\", context=\"/part models\"\n    And Read data and store in dictionary: data=\"<partModelDetailPage>\", key=\"<partModel_output_data_key>\"\n    Then Assert data equals expected: data=\"##<output_data_key>\", expected=\"<part_library>\". title=\"<title>\"\n    Then Assert data equals expected: data=\"##<partModel_output_data_key>\", expected=\"<partModelDetailPage>\". title=\"<title2>\"\n    And click \"Global Navigation Menu\"\n    And Read data and store in dictionary: data=\"<part_models>\", key=\"<global_partModels_output_data_key>\"\n    Then Assert data equals expected: data=\"##<global_partModels_output_data_key>\", expected=\"<globalPartModels>\". title=\"<title3>\"\n\n\n    Examples:\n      |persona_name|part_library|output_data_key|title|partModelDetailPage|partModel_output_data_key|title2|part_models|global_partModels_output_data_key|title3|globalPartModels|\n      |SEC|Part Library - SEC|Part_Library_Name|Verify Persona Part Library Name is shown as SEC|Part Model Detail Page|Part_Model_Detail_Page|Verify Persona Item details layout for SEC|Part Models|Part_Models_Name|Verify Persona Global Navigation menu for SEC|Part Models|\n      |MAADEN|Part Library - MAADEN|Part_Library_Name|Verify Persona Part Library Name is shown as MAADEN|Part Model Detail Page|Part_Model_Detail_Page|Verify Persona Item details layout for MAADEN|Part Models|Part_Models_Name|Verify Persona Global Navigation menu for MAADEN|Part Models|\n      |Ministry of Industry and Mineral Resources|Part Library - Ministry of Industry and Mineral Resources|Part_Library_Name|Verify Persona Part Library Name is shown as Ministry of Industry and Mineral Resources|Part Model Detail Page|Part_Model_Detail_Page|Verify Persona Item details layout for Ministry of Industry and Mineral Resources|Part Models|Part_Models_Name|Verify Persona Global Navigation menu for Ministry of Industry and Mineral Resources|Part Models|\n\n",
      "UsersRolePersonas.feature": "Feature: Nami Workflow Users assigned Role Personas & Default Personas\n\n   @Nami\n   Scenario: Setting Directives\n    Given Enable all Screenshot\n\n  @Nami\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n\t|url|email|password|output_data_key|expected_data_key|title|\n\t|https://qa.staging.oqton.ai/|jaiyesh.salgaonkar+automation@oqton.com|Oqton2018!|Inbox|Inbox|Check if User Login logged in|\n\n\n @Nami\n  Scenario Outline:Verifying assigned Role Personas & Default Personas for users\n    When Open user: user=\"<user_name>\"\n    And Wait for 3\n    Then Verify assigned Role to User: \"<role>\"\n    And Read data and store in dictionary: data=\"<personas>\", key=\"<personas_output_data_key>\"\n    Then Assert data equals expected: data=\"##<personas_output_data_key>\", expected=\"<personas>\". title=\"<titlePersonas>\"\n    And Read data and store in dictionary: data=\"<default_personas>\", key=\"<default_personas_output_data_key>\"\n    Then Assert data equals expected: data=\"##<default_personas_output_data_key>\", expected=\"<default_personas>\". title=\"<titleDefaultPersonas>\"\n\n\n   Examples:\n      |user_name|role|personas|titlePersonas|default_personas|titleDefaultPersonas|personas_output_data_key|default_personas_output_data_key|\n      |jaiyesh.salgaonkar+customer1_nami@oqton.com|Customer|SEC|Verify Customer1 Persona|SEC|Verify Customer1 Default Persona|User_Persona|User_Default_Persona|\n      |jaiyesh.salgaonkar+customer2_nami@oqton.com|Customer|MAADEN|Verify Customer2 Persona|MAADEN|Verify Customer2 Default Persona|User_Persona|User_Default_Persona|\n      |jaiyesh.salgaonkar+customer3_nami@oqton.com|Customer|Ministry of Industry and Mineral Resources|Verify Customer3 Persona|Ministry of Industry and Mineral Resources|Verify Customer3 Default Persona|User_Persona|User_Default_Persona|\n\n\n\n\n"
  },
  "performance": {
      "OrderWorkflowCompletion.feature": "Feature: Verify Order creation, PM Approval, Part Creation & Action status update\n\n\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary\n    And Hard Failure\n    And Enable all Screenshot\n\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://freeform-testing.staging.oqton.ai/|jaiyesh.salgaonkar@oqton.com|3Dsystems#1|Profile|Profile|Check if User Login logged in|\n#    |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar@oqton.com|3Dsystems#1|Profile|Profile|Check if User Login logged in|\n#    |https://freeform-testing.eu4.oqton.ai/|jaiyesh.salgaonkar@oqton.com|3Dsystems#1|Profile|Profile|Check if User Login logged in|\n\n\n    Scenario Outline: Create Order\n    And Click \"Create Order\"\n    And Add Line Item \"<file_name>\" \"<file_path>\" \"<quantity>\" \"<material_model>\" \"<route_model_name>\" <row__>\n    And Click \"Create\"\n    And Wait for 1\n    Then save time now, key= \"<start_key>\"\n    And Read data and store in dictionary: data=\"O-\", key=\"Order_id\"\n    And Check all order items initialised \"<part_models_count_expected>\" \"<parts_count_expected>\" \"<schedule_actions_count_expected>\" \"<element_text1_actual>\" \"<element_text2_actual>\" \"<element_text3_actual>\"\n    And Read data and store in dictionary: data=\"P-00\", key=\"Part_id\"\n    Then save time now, key= \"<end_key>\"\n    Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n#    Then verify \"<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\"\n    Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\", Records processed = \"NA\", save Records fetched in \"NA\"\n    And Click Part id from Order details page\n    Then Read data and store in dictionary: data=\"A-00\", key=\"Action_id\"\n\n\n   Examples:\n    |file_name|file_path|quantity|material_model|route_model_name|part_models_count_expected|parts_count_expected|schedule_actions_count_expected|expected_time_to_load|start_key|end_key|duration|title1|element_text1_actual|element_text2_actual|element_text3_actual|row__|\n    |Crown1.stl|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|1|420i|TestJ Generic Route Model- with 8 action models|1/1 Approved|1/1 Created|0/8 Scheduled|10000|##START|##END|DURATION|Verify page load time to update the Order details|1/1 Approved|1/1 Created|0/8 Scheduled|1|\n\n\nScenario Outline: To Start Part Action\n    When Click Action id from Part details page\n    Then save time now, key= \"<start_key>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    Then save time now, key= \"<end_key>\"\n    Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n#    Then verify \"<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\"\n  Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\", Records processed = \"NA\", save Records fetched in \"NA\"\n\n     Examples:\n    |status_type|expected_data|title|expected_time_to_load|start_key|end_key|duration|title1|\n    |In Progress|In Progress|Check if Part Action status is in In Progres|10000|##START|##END|DURATION|Verify page load time to update the Status to In Progress|\n\n\nScenario Outline: To Pause Part Action\n    When Pause Action\n    Then save time now, key= \"<start_key>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    Then save time now, key= \"<end_key>\"\n    Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n#    Then verify \"<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\"\n  Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\", Records processed = \"NA\", save Records fetched in \"NA\"\n\n     Examples:\n    |status_type|expected_data|title|expected_time_to_load|start_key|end_key|duration|title1|\n    |Paused|Paused|Check if Part Action status is in  Paused|10000|##START|##END|DURATION|Verify page load time to update the Status to Paused|\n\n\n\n  Scenario Outline: To Resume Part Action\n    When Resume Action\n    Then save time now, key= \"<start_key>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    Then save time now, key= \"<end_key>\"\n    Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n#    Then verify \"<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\"\n    Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\", Records processed = \"NA\", save Records fetched in \"NA\"\n\n     Examples:\n    |status_type|expected_data|title|expected_time_to_load|start_key|end_key|duration|title1|\n    |In Progress|In Progress|Check if Part Action status is in In Progress|10000|##START|##END|DURATION|Verify page load time to update the Status to In Progress|\n\nScenario Outline: To Finish Part Action\n    When Finish Action\n    Then save time now, key= \"<start_key>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    Then save time now, key= \"<end_key>\"\n    Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n#    Then verify \"<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\"\n  Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\", Records processed = \"NA\", save Records fetched in \"NA\"\n\n     Examples:\n    |status_type|expected_data|title|expected_time_to_load|start_key|end_key|duration|title1|\n    |Finished|Finished|Check if Part Action status has been Finished|10000|##START|##END|DURATION|Verify page load time to update the Status to Finished|\n",
      "PartModelsfromJson.feature": "Feature: Verify Order creation with multiple Part models (reading from json file)\n\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary\n    And Hard Failure\n    And Enable all Screenshot\n\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n#    |https://freeform-testing.staging.oqton.ai/|jaiyesh.salgaonkar@oqton.com|3Dsystems#1|Profile|Profile|Check if User Login logged in|\n    |https://qa.staging.oqton.ai/|jaiyesh.salgaonkar@oqton.com|3Dsystems#1|Profile|Profile|Check if User Login logged in|\n#    |https://freeform-testing.eu4.oqton.ai/|jaiyesh.salgaonkar@oqton.com|3Dsystems#1|Profile|Profile|Check if User Login logged in|\n\n\n    Scenario Outline: Create Order\n    Given Click \"Create Order\"\n    And Add Line items from json file, filename=\"<filename>\" filepath=\"<filepath>\"\n    And Click \"Create\"\n    And Wait for 1\n    Then save time now, key= \"<start_key>\"\n    And Read data and store in dictionary: data=\"O-\", key=\"Order_id\"\n    And Check all order items initialised \"<part_models_count_expected>\" \"<parts_count_expected>\" \"<schedule_actions_count_expected>\" \"<element_text1_actual>\" \"<element_text2_actual>\" \"<element_text3_actual>\"\n    And Read data and store in dictionary: data=\"P-000\", key=\"Part_id\"\n    Then save time now, key= \"<end_key>\"\n    Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n    Then verify \"<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title1>\"\n\n\n   Examples:\n    |filename|filepath|part_models_count_expected|parts_count_expected|schedule_actions_count_expected|expected_time_to_load|start_key|end_key|duration|title1|element_text1_actual|element_text2_actual|element_text3_actual|\n    |Order.json|C:\\Automation_LatestAugust2024\\QA_Automation_tool\\automation\\src\\data\\Testdata|2/2 Approved|2/2 Created|0/16 Scheduled|10000|START|END|DURATION|Verify load time to update the Order details|2/2 Approved|2/2 Created|0/16 Scheduled|\n",
      "Performance_Automation_QA_Listing.feature": "Feature: Workflow to check load time on different listing pages with new filters\n\n\n  @PERFORMANCE @test\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  \n @PERFORMANCE @test\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"5\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Then set flag for filters as \"<filter_category>\"\n\n\n    Examples:\n      | url                                     | email                 | password     | output_data_key | expected_data_key | title                          | filter_category |\n      | https://automation-qa.staging.oqton.ai/ | goutam.naik@oqton.com | Password@123 | Profile         | Profile           | Check inbox icon on Login page | NEW             |\n\n @PERFORMANCE\n Scenario Outline: Check load time for listing pages\n  Given user navigates to \"<left_menu_option>\" under \"<left_menu_section>\"\n  Then save time now, key= \"<start_key>\"\n  And hold for the listing table to load\n  Then save time now, key= \"<end_key>\"\n  Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n  Then page title should be \"<left_menu_option>\"\n  And get the number of records in \"<on_load_count_key>\"\n  Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title>\", Records processed = \"##<on_load_count_key>\", save Records fetched in \"##DISP_<on_load_count_key>\"\n  Then apply filter \"<filter>\" with value as \"<filter_value>\"\n  Then save time now, key= \"<filter_start_key>\"\n  And hold for the listing table to load\n  Then save time now, key= \"<filter_end_key>\"\n  Then save duration for \"<filter_start_key>\" and \"<filter_end_key>\" in \"<filter_duration>\"\n  And get the number of records in \"<on_filter_count_key>\"\n  Then verify duration= \"##<filter_duration>\" is within \"<expected_time_to_load_filter>\" milliseconds, title=\"Page : <left_menu_option>, Filter : <filter_value>\", Records processed = \"##<on_filter_count_key>\", save Records fetched in \"##DISP_<on_filter_count_key>\"\n  Then navigate to Organisation page\n\n  Examples:\n    | left_menu_option | left_menu_section | expected_page_title | filter        | filter_value                  | expected_time_to_load | start_key | end_key | duration    | filter_start_key      | filter_end_key      | filter_duration    | expected_time_to_load_filter | title                            | on_load_count_key    | on_filter_count_key     |\n    | Part Models      | DEFINE            | Part Models         | Last Modified | Last 30 Days                  | 15000                 | ##START16 | ##END16 | DURATION_16 | ##FILTER_START_KEY_16 | ##FILTER_END_KEY_16 | FILTER_DURATION_16 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_16 | FILTER_RECORDS_COUNT_16 |\n    | Part Models      | DEFINE            | Part Models         | Last Modified | Last 7 Days                   | 15000                 | ##START17 | ##END17 | DURATION_17 | ##FILTER_START_KEY_17 | ##FILTER_END_KEY_17 | FILTER_DURATION_17 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_17 | FILTER_RECORDS_COUNT_17 |\n    | Part Models      | DEFINE            | Part Models         | Last Modified | Custom - August 2024, 3 to 28 | 15000                 | ##START32 | ##END32 | DURATION_32 | ##FILTER_START_KEY_32 | ##FILTER_END_KEY_32 | FILTER_DURATION_32 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_32 | FILTER_RECORDS_COUNT_32 |\n    | Part Models      | DEFINE            | Part Models         | Last Modified | Last Year                     | 15000                 | ##START18 | ##END18 | DURATION_18 | ##FILTER_START_KEY_18 | ##FILTER_END_KEY_18 | FILTER_DURATION_18 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_18 | FILTER_RECORDS_COUNT_18 |\n    | Orders           | MAKE              | Orders              | Last Modified | Last 30 Days                  | 15000                 | ##START19 | ##END19 | DURATION_19 | ##FILTER_START_KEY_19 | ##FILTER_END_KEY_19 | FILTER_DURATION_19 | 7000                         | Verified load time for page load | ON_LOAD_COUNT_KEY_19 | FILTER_RECORDS_COUNT_19 |\n    | Orders           | MAKE              | Orders              | Last Modified | Last 7 Days                   | 15000                 | ##START20 | ##END20 | DURATION_20 | ##FILTER_START_KEY_20 | ##FILTER_END_KEY_20 | FILTER_DURATION_20 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_20 | FILTER_RECORDS_COUNT_20 |\n    | Orders           | MAKE              | Orders              | Last Modified | Custom - August 2024, 3 to 28 | 15000                 | ##START33 | ##END33 | DURATION_33 | ##FILTER_START_KEY_33 | ##FILTER_END_KEY_33 | FILTER_DURATION_33 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_33 | FILTER_RECORDS_COUNT_33 |\n    | Orders           | MAKE              | Orders              | Last Modified | Last Year                     | 15000                 | ##START21 | ##END21 | DURATION_21 | ##FILTER_START_KEY_21 | ##FILTER_END_KEY_21 | FILTER_DURATION_21 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_21 | FILTER_RECORDS_COUNT_21 |\n    | Parts            | MAKE              | Parts               | Last Modified | Last 30 Days                  | 15000                 | ##START22 | ##END22 | DURATION_22 | ##FILTER_START_KEY_22 | ##FILTER_END_KEY_22 | FILTER_DURATION_22 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_22 | FILTER_RECORDS_COUNT_22 |\n    | Parts            | MAKE              | Parts               | Last Modified | Last 7 Days                   | 15000                 | ##START23 | ##END23 | DURATION_23 | ##FILTER_START_KEY_23 | ##FILTER_END_KEY_23 | FILTER_DURATION_23 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_23 | FILTER_RECORDS_COUNT_23 |\n    | Parts            | MAKE              | Parts               | Last Modified | Custom - August 2024, 3 to 28 | 15000                 | ##START34 | ##END34 | DURATION_34 | ##FILTER_START_KEY_34 | ##FILTER_END_KEY_34 | FILTER_DURATION_34 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_34 | FILTER_RECORDS_COUNT_34 |\n    | Parts            | MAKE              | Parts               | Last Modified | Last Year                     | 15000                 | ##START24 | ##END24 | DURATION_24 | ##FILTER_START_KEY_24 | ##FILTER_END_KEY_24 | FILTER_DURATION_24 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_24 | FILTER_RECORDS_COUNT_24 |\n    | Actions          | MAKE              | Actions             | Last Modified | Last 30 Days                  | 15000                 | ##START25 | ##END25 | DURATION_25 | ##FILTER_START_KEY_25 | ##FILTER_END_KEY_25 | FILTER_DURATION_25 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_25 | FILTER_RECORDS_COUNT_25 |\n    | Actions          | MAKE              | Actions             | Last Modified | Last 7 Days                   | 15000                 | ##START26 | ##END26 | DURATION_26 | ##FILTER_START_KEY_26 | ##FILTER_END_KEY_26 | FILTER_DURATION_26 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_26 | FILTER_RECORDS_COUNT_26 |\n    | Actions          | MAKE              | Actions             | Last Modified | Custom - August 2024, 3 to 28 | 15000                 | ##START35 | ##END35 | DURATION_35 | ##FILTER_START_KEY_35 | ##FILTER_END_KEY_35 | FILTER_DURATION_35 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_35 | FILTER_RECORDS_COUNT_35 |\n    | Actions          | MAKE              | Actions             | Last Modified | Last Year                     | 15000                 | ##START27 | ##END27 | DURATION_27 | ##FILTER_START_KEY_27 | ##FILTER_END_KEY_27 | FILTER_DURATION_27 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_27 | FILTER_RECORDS_COUNT_27 |\n    | Nests            | MAKE              | Nests               | Last Modified | Last 30 Days                  | 25000                 | ##START28 | ##END28 | DURATION_28 | ##FILTER_START_KEY_28 | ##FILTER_END_KEY_28 | FILTER_DURATION_28 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_28 | FILTER_RECORDS_COUNT_28 |\n    | Nests            | MAKE              | Nests               | Last Modified | Last 7 Days                   | 25000                 | ##START29 | ##END29 | DURATION_29 | ##FILTER_START_KEY_29 | ##FILTER_END_KEY_29 | FILTER_DURATION_29 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_29 | FILTER_RECORDS_COUNT_29 |\n    | Nests            | MAKE              | Nests               | Last Modified | Custom - August 2024, 3 to 28 | 25000                 | ##START31 | ##END31 | DURATION_31 | ##FILTER_START_KEY_31 | ##FILTER_END_KEY_31 | FILTER_DURATION_31 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_31 | FILTER_RECORDS_COUNT_31 |\n    | Nests            | MAKE              | Nests               | Last Modified | Last Year                     | 25000                 | ##START30 | ##END30 | DURATION_30 | ##FILTER_START_KEY_30 | ##FILTER_END_KEY_30 | FILTER_DURATION_30 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_30 | FILTER_RECORDS_COUNT_30 |\n    \n   ",
      "Performance_Freeform_Testing_Eu4_Listing.feature": "Feature: Workflow to check load time on different listing pages with new filters\n\n\n  @PERFORMANCE @test\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  \n @PERFORMANCE @test\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 5\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Then set flag for filters as \"<filter_category>\"\n\n\n    Examples:\n      | url                                    | email | password | output_data_key | expected_data_key | title                          | filter_category |\n      | https://freeform-testing.eu4.oqton.ai/ |       |          | Profile         | Profile           | Check inbox icon on Login page | NEW             |\n\n @PERFORMANCE\n Scenario Outline: Check load time for listing pages\n  Given user navigates to \"<left_menu_option>\" under \"<left_menu_section>\"\n  Then save time now, key= \"<start_key>\"\n  And hold for the listing table to load\n  Then save time now, key= \"<end_key>\"\n  Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n  Then page title should be \"<left_menu_option>\"\n  And get the number of records in \"<on_load_count_key>\"\n  Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title>\", Records processed = \"##<on_load_count_key>\", save Records fetched in \"##DISP_<on_load_count_key>\"\n  Then apply filter \"<filter>\" with value as \"<filter_value>\"\n  Then save time now, key= \"<filter_start_key>\"\n  And hold for the listing table to load\n  Then save time now, key= \"<filter_end_key>\"\n  Then save duration for \"<filter_start_key>\" and \"<filter_end_key>\" in \"<filter_duration>\"\n  And get the number of records in \"<on_filter_count_key>\"\n  Then verify duration= \"##<filter_duration>\" is within \"<expected_time_to_load_filter>\" milliseconds, title=\"Page : <left_menu_option>, Filter : <filter_value>\", Records processed = \"##<on_filter_count_key>\", save Records fetched in \"##DISP_<on_filter_count_key>\"\n  Then navigate to Organisation page\n\n  Examples:\n    | left_menu_option | left_menu_section | expected_page_title | filter        | filter_value                    | expected_time_to_load | start_key | end_key | duration    | filter_start_key      | filter_end_key      | filter_duration    | expected_time_to_load_filter | title                            | on_load_count_key    | on_filter_count_key     |\n    | Part Models      | DEFINE            | Part Models         | Last Modified | Custom - October 2024, 28 to 31 | 15000                 | ##START36 | ##END36 | DURATION_36 | ##FILTER_START_KEY_36 | ##FILTER_END_KEY_36 | FILTER_DURATION_36 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_36 | FILTER_RECORDS_COUNT_36 |\n    | Orders           | MAKE              | Orders              | Last Modified | Custom - October 2024, 28 to 31 | 15000                 | ##START37 | ##END37 | DURATION_37 | ##FILTER_START_KEY_37 | ##FILTER_END_KEY_37 | FILTER_DURATION_37 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_37 | FILTER_RECORDS_COUNT_37 |\n    | Parts            | MAKE              | Parts               | Last Modified | Custom - October 2024, 28 to 31 | 15000                 | ##START38 | ##END38 | DURATION_38 | ##FILTER_START_KEY_38 | ##FILTER_END_KEY_38 | FILTER_DURATION_38 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_38 | FILTER_RECORDS_COUNT_38 |\n    | Actions          | MAKE              | Actions             | Last Modified | Custom - October 2024, 21 to 26 | 15000                 | ##START39 | ##END39 | DURATION_39 | ##FILTER_START_KEY_39 | ##FILTER_END_KEY_39 | FILTER_DURATION_39 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_39 | FILTER_RECORDS_COUNT_39 |\n    | Nests            | MAKE              | Nests               | Last Modified | Custom - October 2024, 21 to 26 | 25000                 | ##START40 | ##END40 | DURATION_40 | ##FILTER_START_KEY_40 | ##FILTER_END_KEY_40 | FILTER_DURATION_40 | 3500                         | Verified load time for page load | ON_LOAD_COUNT_KEY_40 | FILTER_RECORDS_COUNT_40 |",
      "Performance_Listing_Pages.feature": "Feature: Workflow to check load time on different listing pages with old filters\n\n\n  @PERFORMANCE @test\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  \n @PERFORMANCE @test\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 5\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Then set flag for filters as \"<filter_category>\"\n\n\n    Examples:\n      | url                          | email                 | password     | output_data_key | expected_data_key | title                          | filter_category |\n      | https://qa.staging.oqton.ai/ | goutam.naik@oqton.com | Password@123 | Profile         | Profile           | Check inbox icon on Login page | OLD             |\n\n @PERFORMANCE\n Scenario Outline: Check load time for Part Model\n  Given user navigates to \"<left_menu_option>\" under \"<left_menu_section>\"\n  Then save time now, key= \"<start_key>\"\n  And hold for the listing table to load\n  Then save time now, key= \"<end_key>\"\n  Then save duration for \"<start_key>\" and \"<end_key>\" in \"<duration>\"\n  Then page title should be \"<left_menu_option>\"\n  And get the number of records in \"<on_load_count_key>\"\n  Then verify duration= \"##<duration>\" is within \"<expected_time_to_load>\" milliseconds, title=\"<title>\", Records processed = \"##<on_load_count_key>\", save Records fetched in \"##DISP_<on_load_count_key>\"\n  Then apply filter \"<filter>\" with value as \"<filter_value>\"\n  Then save time now, key= \"<filter_start_key>\"\n  And hold for the listing table to load\n  Then save time now, key= \"<filter_end_key>\"\n  Then save duration for \"<filter_start_key>\" and \"<filter_end_key>\" in \"<filter_duration>\"\n  And get the number of records in \"<on_filter_count_key>\"\n  Then verify duration= \"##<filter_duration>\" is within \"<expected_time_to_load_filter>\" milliseconds, title=\"Page : <left_menu_option>, Filter : <filter_value>\", Records processed = \"##<on_filter_count_key>\", save Records fetched in \"##DISP_<on_filter_count_key>\"\n  Then navigate to Organisation page\n\n    Examples:\n      | left_menu_option | left_menu_section | expected_page_title | filter     | filter_value | expected_time_to_load | start_key | end_key | duration    | filter_start_key      | filter_end_key      | filter_duration    | expected_time_to_load_filter | title                           | on_load_count_key    | on_filter_count_key     |\n      | Part Models      | DEFINE            | Part Models         | Time Range | Last 7 Days  | 15000                 | ##START1  | ##END1  | DURATION_1  | ##FILTER_START_KEY_1  | ##FILTER_END_KEY_1  | FILTER_DURATION_1  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_1  | FILTER_RECORDS_COUNT_1  |\n      | Part Models      | DEFINE            | Part Models         | Time Range | Last 30 Days | 9000                  | ##START2  | ##END2  | DURATION_2  | ##FILTER_START_KEY_2  | ##FILTER_END_KEY_2  | FILTER_DURATION_2  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_2  | FILTER_RECORDS_COUNT_2  |\n      | Part Models      | DEFINE            | Part Models         | Time Range | All Time     | 9000                  | ##START3  | ##END3  | DURATION_3  | ##FILTER_START_KEY_3  | ##FILTER_END_KEY_3  | FILTER_DURATION_3  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_3  | FILTER_RECORDS_COUNT_3  |\n      | Orders           | MAKE              | Orders              | Time Range | Last 7 Days  | 9000                  | ##START4  | ##END4  | DURATION_4  | ##FILTER_START_KEY_4  | ##FILTER_END_KEY_4  | FILTER_DURATION_4  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_4  | FILTER_RECORDS_COUNT_4  |\n      | Orders           | MAKE              | Orders              | Time Range | Last 30 Days | 9000                  | ##START5  | ##END5  | DURATION_5  | ##FILTER_START_KEY_5  | ##FILTER_END_KEY_5  | FILTER_DURATION_5  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_5  | FILTER_RECORDS_COUNT_5  |\n      | Orders           | MAKE              | Orders              | Time Range | All Time     | 9000                  | ##START6  | ##END6  | DURATION_6  | ##FILTER_START_KEY_6  | ##FILTER_END_KEY_6  | FILTER_DURATION_6  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_6  | FILTER_RECORDS_COUNT_6  |\n      | Parts            | MAKE              | Parts               | Time Range | Last 7 Days  | 9000                  | ##START7  | ##END7  | DURATION_7  | ##FILTER_START_KEY_7  | ##FILTER_END_KEY_7  | FILTER_DURATION_7  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_7  | FILTER_RECORDS_COUNT_7  |\n      | Parts            | MAKE              | Parts               | Time Range | Last 30 Days | 9000                  | ##START8  | ##END8  | DURATION_8  | ##FILTER_START_KEY_8  | ##FILTER_END_KEY_8  | FILTER_DURATION_8  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_8  | FILTER_RECORDS_COUNT_8  |\n      | Parts            | MAKE              | Parts               | Time Range | All Time     | 9000                  | ##START9  | ##END9  | DURATION_9  | ##FILTER_START_KEY_9  | ##FILTER_END_KEY_9  | FILTER_DURATION_9  | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_9  | FILTER_RECORDS_COUNT_9  |\n      | Actions          | MAKE              | Actions             | Time Range | Last 7 Days  | 9000                  | ##START10 | ##END10 | DURATION_10 | ##FILTER_START_KEY_10 | ##FILTER_END_KEY_10 | FILTER_DURATION_10 | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_10 | FILTER_RECORDS_COUNT_10 |\n      | Actions          | MAKE              | Actions             | Time Range | Last 30 Days | 9000                  | ##START11 | ##END11 | DURATION_11 | ##FILTER_START_KEY_11 | ##FILTER_END_KEY_11 | FILTER_DURATION_11 | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_11 | FILTER_RECORDS_COUNT_11 |\n      | Actions          | MAKE              | Actions             | Time Range | All Time     | 9000                  | ##START12 | ##END12 | DURATION_12 | ##FILTER_START_KEY_12 | ##FILTER_END_KEY_12 | FILTER_DURATION_12 | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_12 | FILTER_RECORDS_COUNT_12 |\n      | Nests            | MAKE              | Nests               | Time Range | Last 7 Days  | 9000                  | ##START13 | ##END13 | DURATION_13 | ##FILTER_START_KEY_13 | ##FILTER_END_KEY_13 | FILTER_DURATION_13 | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_13 | FILTER_RECORDS_COUNT_13 |\n      | Nests            | MAKE              | Nests               | Time Range | Last 30 Days | 9000                  | ##START14 | ##END14 | DURATION_14 | ##FILTER_START_KEY_14 | ##FILTER_END_KEY_14 | FILTER_DURATION_14 | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_14 | FILTER_RECORDS_COUNT_14 |\n      | Nests            | MAKE              | Nests               | Time Range | All Time     | 9000                  | ##START15 | ##END15 | DURATION_15 | ##FILTER_START_KEY_15 | ##FILTER_END_KEY_15 | FILTER_DURATION_15 | 3500                         | Verified load time on page load | ON_LOAD_COUNT_KEY_15 | FILTER_RECORDS_COUNT_15 |\n"
  },
  "POM": {
      "action.feature": "Feature: Start Pause Resume Stop Action\n\n  @Action\n  Scenario Outline: Start Action\n    Given Start Action,\"<cell_name>\" \"<material_name>\"\n\n     Examples:\n      |cell_name|material_name|\n      |SPEC-35 Action Model #|100|\n\n\n  @Action\n  Scenario: Pause Action\n    Given Pause Action\n\n\n  @Action\n  Scenario: Resume Action\n    Given Resume Action\n\n  @Action\n  Scenario Outline: Finish Action\n    Given Finish Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n\n     Examples:\n      |file1|file2|file3|file4|file_path|\n     |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|src/data/AMNOVIS/files|\n",
      "action_model.feature": "Feature: Create, Update, Delete  Action Model\n\n  @ActionModel\n  Scenario Outline: Create Action Model SLM\n    Given Create Action Model SLM,\"<action_model_name>\" \"<cell_model>\" \"<material_model>\" \"<tool_model>\"\n\n     Examples:\n      |action_model_name|cell_model|material_model|tool_model|\n      |SPEC-35 Action Model #|100|SPEC-35 Serial Number|             |\n\n  @ActionModel\n  Scenario Outline:Delete Action Model\n    Given Delete Action Model,\"<action_model_name>\"\n\n     Examples:\n      |action_model_name|\n      |SPEC-35 Generic Action Model|\n\n\n  @ActionModel\n  Scenario: Show Archived\n    Given Show Archived Action Models",
      "alert_model.feature": "Feature: Create, Update, Delete Alert Model\n\n\n    @AlertModel\n  Scenario Outline: Create Alert Model Event\n    Given Create and delete Alert Model Event,\"<alert_model_name>\" \"<cell_model>\" \"<cell>\" \"<email>\"\n\n     Examples:\n      |alert_model_name|cell_model|cell|email|\n      |SPEC-35 Cell Alert Model|SPEC-35 Cell Model|   |vidhi.kandolkar+amnovis@oqton.com|\n\n  @AlertModel\n  Scenario Outline: Create Alert Model Periodical\n    Given Create and delete Alert Model Periodical,\"<alert_model_name>\" \"<tool_model>\" \"<email>\"\n\n     Examples:\n      |alert_model_name|tool_model|email|\n      |SPEC-35 Tool Alert Model|100|vidhi.kandolkar+amnovis@oqton.com|\n\n\n",
      "cell.feature": "Feature: Create, Update, Delete  Cell\n\n  @Cell\n  Scenario Outline: Create cell SLM\n    Given Create Cell SLM,\"<cell_name>\" \"<cell_model_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n\n Examples:\n      |cell_name|cell_model_name_generic|serial_no|file1|file_path|file2|\n      |SPEC-35 Cell 1|SPEC-35 Cell Model|SPEC-35 Serial Number|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|\n\n\n  @Cell\n  Scenario Outline: Create cell Generic\n    Given Create Cell Generic,\"<cell_name>\" \"<cell_model_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n\n     Examples:\n     |cell_name|cell_model_name_generic|serial_no|file1|file_path|file2|\n      |SPEC-35 Cell 1|SPEC-35 Cell Model Generic|SPEC-35 Serial Number|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files|SPEC-35_V3.0.pdf|\n\n",
      "cell_model.feature": "Feature: Create, Update, Delete for Cell Models\n\n  @CellModel\n  Scenario Outline: Create cell model Generic\n    Given Create Cell Model Generic,\"<cell_model_name_generic>\" \"<cell_fixed_cost>\" \"<cell_hourly_cost>\" \"<labour_hourly_cost>\"\n\n     Examples:\n      |cell_model_name_generic|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|\n      |Cell Model Generic using Behave|100|190| 610|\n\n   @CellModel\n  Scenario Outline: Create cell model SLM\n    Given Create Cell Model SLM,\"<cell_model_name_generic>\" \"<length_val>\" \"<width_val>\" \"<height_val>\" \"<part_material_model>\" \"<build_plate_model>\"\n\n     Examples:\n      |cell_model_name_generic|length_val|width_val|height_val|part_material_model|build_plate_model|\n      |Cell Model SLM using Behave|100|190| 610|JW Material Model_Powder - 2023-02-06 15:32|JW Tool Model_BuildPlate_Resin_SLA - 2024-06-21 17-28|\n\n\n   @CellModel\n  Scenario Outline: Create cell model SLA\n    Given Create Cell Model SLA,\"<cell_model_name_generic>\" \"<length_val>\" \"<width_val>\" \"<height_val>\" \"<part_material_model>\" \"<build_plate_model>\"\n\n     Examples:\n      |cell_model_name_generic|length_val|width_val|height_val|part_material_model|build_plate_model|\n      |Cell Model SLA using Behave|100|190| 610|JW Material Model_Powder - 2023-02-06 15:32|JW Tool Model_BuildPlate_Resin_SLA - 2024-06-21 17-28|\n\n\n      @CellModel\n  Scenario Outline: Create cell model SLS\n    Given Create Cell Model SLA,\"<cell_model_name_generic>\" \"<length_val>\" \"<width_val>\" \"<height_val>\" \"<part_material_model>\"\n\n     Examples:\n      |cell_model_name_generic|length_val|width_val|height_val|part_material_model|\n      |Cell Model SLS using Behave|100|190| 610|Material Model Resin using behave|\n\n\n @CellModel\n  Scenario Outline: Create cell model DLP\\LCD\n    Given Create Cell Model SLA,\"<cell_model_name_generic>\" \"<length_val>\" \"<width_val>\" \"<height_val>\" \"<part_material_model>\"\n\n     Examples:\n      |cell_model_name_generic|length_val|width_val|height_val|part_material_model|build_plate_model|\n      |Cell Model DLP_LCD using Behave|100|190| 610|Material Model Resin using behave|TestJ Generic Tool Model      |",
      "customers.feature": " Feature: Create, Update, Delete for Customer\n\n  @Customer\n  Scenario Outline: Create customer\n    Given Create Customer,\"<customer_name>\"\n\n     Examples:\n      |customer_name|\n      |SPEC-35 Customer|\n\n\n   @Customer\n  Scenario: Delete Customer\n    Given Delete Customer\n\n\n   @Customer\n  Scenario: Show Archived\n    Given Show Archived Customers",
      "location.feature": " Feature: Create, Update, Delete Locations\n\n  @Location\n  Scenario Outline: Create locations\n    Given Create Location,\"<location_name>\"\n\n     Examples:\n      |location_name|\n      |SPEC-35 Location|\n\n\n   @Location\n  Scenario Outline: Delete location\n    Given Delete Location,\"<loc_name>\"\n\n     Examples:\n      |loc_name|\n      |SPEC-35 Location|",
      "login.feature": "Feature: Login Functionality\n\n  @@demo1_order @test @basic @common @SLSWorkflow @CellModel\n  Scenario Outline: Validate login with valid credentials\n\n    Given Go to <url>\n    And Fill with ID \"<email>\" \"<email_id>\"\n    And Fill with ID \"<password>\" \"<password_id>\"\n    And Clicks \"<button>\"\n    #When Enter credentials \"<email>\" \"<password>\"\n    Then Logged in ?\n\nExamples:\n  |url|email|email_id|password|password_id|button|\n  |https://qa.dev.oqton.ai/|vidhi.kandolkar@oqton.com|loginId|Oqton123#|password|Continue|",
      "manage_setup.feature": "Feature: Create manufacturers, Suppliers\n\n@common\n  Scenario: Create\n    Given Manufacturers listing page\n    When Click create manufacturer\n    And Fill the data,\"3ds Manufacturer\",\"From: 3ds\",\"This is working\"\n    And Click Create\n    Then Created?\n\n\n Scenario: Supplier\n   Given Suppliers listing page\n   When Click create supplier\n   And Fill the data,\"3ds Supplier\",\"Reference: 3DS Supplier\",\"Location EU\"\n   Then Supplier Created?\n",
      "manage_setup_optimised.feature": "Feature: Create manufacturers, Suppliers\n\n  @test\n  Scenario Outline: Create\n    Given Navigate to list \"<page>\"\n    When  Clicked \"<button>\"\n    And   Fill data,\"<button>\" \"<name_data>\" \"<reference_data>\" \"<notes_data>\"\n    And   Create\n    #Then Created?\n\nExamples:\n    |page|button|name_data|reference_data|notes_data|\n    |Manufacturers|Create Manufacturer|3dst Manufacturer|reference for manufacturers|notes for manufacturers|\n    |Manufacturers|Create Manufacturer|3dS Manufacturer EU Region|IT|Refer Docs|\n    |Suppliers|Create Supplier|3dsSupplier|reference5|notes4|\n\n",
      "manufacturer.feature": " Feature: Create, Update, Delete for Manufacturers\n\n  @Supplier\n  Scenario Outline: Create Manufacturers\n    Given Create Manufacturers,\"<manufacturer_name>\"\n\n     Examples:\n      |manufacturer_name|\n      |Amnovis_Manufacturer|",
      "material.feature": "Feature: Create, Update, Delete  Materials\n\n  @SLSWorkflow\n  Scenario: Create material\n    Given Create Material\n\n\n  Scenario Outline: Delete Material\n    Given Delete material,\"<to_location>\"\n\n     Examples:\n      |to_location|\n      |SPEC-35 Location|\n",
      "material_model.feature": "Feature: Create, Update, Delete for Material Models\n\n  @SLSWorkflow\n  Scenario Outline: Create material model Powder\n    Given Create Material Model Powder,\"<material_model_name>\" \"<density_input>\" \"<yield_strength_input>\" \"<stiffness_input>\" \"<poisson_ratio_input>\" \"<specific_heat_capacity_input>\" \"<thermal_conductivity_input>\" \"<coefficient_thermal_expansion_input>\" \"<initial_weight_input>\" \"<price_input>\"\n\n     Examples:\n      |material_model_name|density_input|yield_strength_input|stiffness_input|poisson_ratio_input|specific_heat_capacity_input|thermal_conductivity_input|coefficient_thermal_expansion_input|initial_weight_input|price_input|\n      |Material Model POwder using Behave|12|1               |  10             |          0.9         |        1345                    |    2221                      |      11                             |     210|        156|\n\n  @SLSWorkflow\n  Scenario Outline: Create material model Resin\n    Given Create Material Model Resin,\"<material_model_name>\"\n\n\n    Examples:\n      |material_model_name|\n      |Material Model Resin using behave|\n\n  @SLSWorkflow\n  Scenario Outline: Create material model Stock\n    Given Create Material Model Stock,\"<material_model_name>\" \"<stock_shape_input>\" \"<material_composition>\"\n\n    Examples:\n      |material_model_name|stock_shape_input|material_composition|\n      |Material Model Stock using behave|Mesh File|Zirconia|\n\n  @SLSWorkflow\n  Scenario Outline: Create material model Gas\n    Given Create Material Model Gas,\"<material_model_name>\"\n    Examples:\n      |material_model_name|\n      |Material Model Gas using behave|\n\n  @SLSWorkflow\n  Scenario Outline: Create material model Generic\n    Given Create Material Model Generic,\"<material_model_name>\" \"<spec_type>\" \"<qty_unit>\" \"<density>\"\n    Examples:\n      |material_model_name|spec_type|qty_unit|density|\n      |Material Model Gas using behave|Weight|kg     |  10     |\n\n  @SLSWorkflow\n  Scenario Outline: Create material model Liquid\n    Given Create Material Model Liquid,\"<material_model_name>\" \"<spec_type>\" \"<qty_unit>\" \"<density>\"\n    Examples:\n      |material_model_name|spec_type|qty_unit|density|\n      |Material Model Liquid using behave|Weight|kg     |  10     |\n\n\n  @SLSWorkflow\n  Scenario Outline: Create material model Filament\n    Given Create Material Model Filament,\"<material_model_name>\" \"<spec_type>\" \"<qty_unit>\" \"<density>\"\n    Examples:\n      |material_model_name|spec_type|qty_unit|density|\n      |Material Model Filament using behave|Weight|kg     |  10     |",
      "order.feature": "Feature: Order\n\n@basic @demo1_order\nScenario Outline: Order creation\n    Given Navigate to list \"<page>\"\n    When Clicks \"<button>\"\n    And Upload file \"<file_name>\" \"<upload_btn>\"\n    And Select dropdown \"<typeMM>\" \"<input1>\"\n    And Select dropdown \"<typeRM>\" \"<input2>\"\n    And Clicked \"<button2>\"\n    And Select \"<partmodel>\"\n    And Clicks \"<button3>\"cd\n    And Clicks \"<Create>\"\n    Then Order created?\n\n\n\n    Examples:\n    |page|button|file_name|upload_btn|typeMM|input1|typeRM|input2|button2|partmodel|button3|Create|\n    |Orders|Create Order|Cube_3d_printing_sample.stl|Upload File(s)|Material Model| Filament Material Model Batch NO.|Route Model|Route Model for BTACH NO |Add Existing Part Model(s)|Cube_3d_printing_sample|Add Existing Part Model(s)|Create|\n",
      "parts.feature": "Feature: Create, Update, Delete  Part\n\n  @Parts\n  Scenario Outline: Create Parts\n    Given Create Parts,\"<part_model>\" <qty> \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\" \"<file3>\" \"<file4>\"\n\n     Examples:\n      |part_model|qty|notes|file1|file_path|file2|file3|file4|\n      |SPEC-35 Part Model|10|SPEC-35 Part Notes|LIST-123_V1.0.pdf|src/data/AMNOVIS/files/LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|\n\n\n  @Parts\n  Scenario: Show Cancelled Parts\n    Show Cancelled Parts\n\n      @Parts\n  Scenario: Show Cancelled Nests\n    Show Cancelled Nests",
      "part_models.feature": "Feature: Create, Update, Delete  Part Model\n\n  @PartModel\n  Scenario Outline: Create Part Model\n    Given Create Part Model,\"<pm_type>\" \"<part_model_name>\"  \"<customer_name>\" \"<material_model>\" \"<route_model>\"\n\n     Examples:\n      |pm_type|part_model_name|customer_name|material_model|route_model|\n      |3D Geometry|SPEC-35 Part Model|SPEC-35 Customer|SPEC-35 Material Mode|SPEC-35 Route Model|\n\n  @PartModel\n  Scenario Outline: Edit Part Model\n    Given Edit Part Model,\"<file1>\" \"<file_path1>\" \"<file2>\" \"<file_path2>\"\n     Examples:\n      |file1|file_path1|file2|file_path2|\n      |LIST-123_V1.0.pdf|src/data/AMNOVIS/files/LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|src/data/AMNOVIS/files/SPEC-35_V3.0.pdf|\n\n\n#  Scenario : Approve Part Model\n#    Given Approve Part Model\n\n\n\n   @PartModel\n  Scenario: Delete Part Model\n    Given Delete Part Model\n\n",
      "route_model.feature": "Feature: Create, Update, Delete  Route Model\n\n  @RouteModel\n  Scenario Outline: Create Route Model\n    Given Create Route Model,\"<route_model_name>\" \"<supported_material_model>\" \"<action_model_generic>\" \"<action_model_slm>\"\n\n     Examples:\n      |route_model_name|supported_material_model|action_model_generic|action_model_slm|\n      |SPEC-35 Route Model|SPEC-35 Material Mode|SPEC-35Generic Action Model|SPEC-35 SLM Action Model|\n\n\n  @RouteModel\n  Scenario Outline: Obsolete Route Model\n    Given Obsolete Route Model,\"<route_model_name>\"\n\n     Examples:\n      |route_model_name|\n      |SPEC-35 Route Model|",
      "supplier.feature": " Feature: Create, Update, Delete for Suppliers\n\n  @Supplier\n  Scenario Outline: Create suppliers\n    Given Create Suppliers,\"<supplier_name>\"\n\n     Examples:\n      |supplier_name|\n      |Amnovis_Supplier|",
      "tool.feature": "Feature: Create, Update, Delete  Tools\n\n  @tool\n  Scenario:Build Plate\n    Given Create Tool Build Plate\n\n\n      @tool\n  Scenario Outline: Delete Tool Build Plate\n    Given Delete Tool Build Plate,\"<to_location>\"\n\n     Examples:\n      |to_location|\n      |SPEC-35 Location|\n",
      "tool_model.feature": "Feature: Create, Update, Delete for Tool Models\n\n\n  @ToolModel\n  Scenario Outline: Create Tool Model Build Plate\n    Given Create Tool Model Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n\n     Examples:\n      |tool_model_name|length_val|width_val|height_val|\n      |Tool Model Build Plate using Behave|100|190| 152|"
  },
  "regression": {
      "3DXpertIntegration_Workflow_1.feature": "Feature: End to End 3DXpert Integration Workflow 1\n\n\n@3DXpert01\nScenario Outline: Set timestamp for workflow\n    Given Set timestamp\n     Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |json|json_path|\n  |3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n\n@3DXpert01\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  Given login with \"<email>\" \"<password>\"\n\n  Examples:\n    |url|email|password|\n    |https://qa.staging.oqton.ai/|asaf.vaknin@oqton.com|Fbravo14!|\n\n\n\n@3DXpert01\n  Scenario Outline: Create Action Model AMusing3DXpert\n    Given Read Key=\"timestamp\" from Json_File=\"<json>\" to context,Json_Path=\"<path>\"\n    Given Create Action Model AMusing3DXpert,Action_Model_Name=\"<action_model_name>\" Cell_Model=\"<cell_model>\" Material_Model=\"<material_model>\" Tool_Model=\"<tool_model>\" Part_Model_Script__=\"<part_model_script>\" Nest_Script__=\"<nest_script>\" Scripts_Path__=\"<path>\"\n    Then Verify Action Model was created successfully\n    Then Save Key=\"action_model_name\" Value=\"!!action_model_name\" to Json_File=\"<json>\",Json_Path=\"<path>\"\n\n\n    Examples:\n      |action_model_name|cell_model|material_model|tool_model|part_model_script|nest_script|path|json|\n      |#                |DMP 350B Series|LaserForm 316L (A)_Sv8|DMP 350 Build Plate|DMP Part Model Preparation - Silent.scrpt|DMP Nest Preparation -Silent.scrpt|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|3DXpertIntegration.json|\n\n\n@3DXpert01\n  Scenario Outline: Create Route Model\n    Given Read Key=\"timestamp,action_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    Given Create Route Model,Route_Model_Name=\"<route_model_name>\" Supported_Material_Model=\"<supported_material_model>\" Action_Models=\"<action_models>\"\n    Then Verify Route Model was created successfully\n    Then Save Key=\"route_model_name\" Value=\"!!route_model_name\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n\n  Examples:\n  |route_model_name|supported_material_model|action_models|json|json_path|\n  |#|LaserForm 316L (A)_Sv8|Generic for 3DXpert automation,!!action_model_name,Generic 2 for 3DXpert automation|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n\n@3DXpert01\n  Scenario Outline: Create Order\n  Given Read Key=\"route_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<path>\"\n  And Navigate to List=\"Orders\"\n  And Click \"Create Order\"\n  And Select from Dropdown=\"Customer\",Value=\"QA Automation\"\n  And Add Line Item,File_Name=\"Cover.stl\" File_Path=\"<path>\" Quantity=\"3\" Material_Model=\"<material_model>\" Route_Model=\"<route_model>\" Line_Item_Number=\"1\"\n  And Click \"Create\"\n  Then Verify Order created successfully,Number_Of_Line_Items_Expected=\"1\"\n  Then Save Key=\"order_id\" Value=\"!!order_id\" to Json_File=\"<json>\",Json_Path=\"<path>\"\n  Then Get Part Model ID,Part_Model_Name=\"Cover.stl\"\n  Then Save Key=\"part_model_id\" Value=\"!!part_model_id\" to Json_File=\"<json>\",Json_Path=\"<path>\"\n\n     Examples:\n    | material_model | route_model | json | path |\n    |LaserForm 316L (A)_Sv8|!!route_model_name|3DXpertIntegration.json| C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n  @3DXpert01\n  Scenario Outline: Run 3DXpert Automation on Part Model\n    Given Read Key=\"part_model_id\" from Json_File=\"<json>\" to context,Json_Path=\"<path>\"\n    And Navigate to List=\"Part Models\"\n    And Click \"<part_model_id>\"\n    And Click \"Edit Route Plan\"\n    Then Verify Button=\"Run Automation in 3DXpert\" enabled\n    Then Verify Button=\"Approve\" disabled\n    Then Click \"Run Automation in 3DXpert\"\n    Then Wait for Button=\"Approve\" to be clickable,Timeout=\"300\"\n    Then Click \"Close\"\n\n\n    Examples:\n      | part_model_id | json | path |\n      |!!part_model_id|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n  @3DXpert01\n  Scenario Outline: Verify Automation Results for Part Model\n    Given Read key=\"part_model_id,action_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<path>\"\n    Given Read Json_File=\"<json>\" to context,Json_Path=\"<path>\"\n    And Navigate to List=\"Part Models\"\n    And Click \"<part_model_id>\"\n    And Click \"Edit Route Plan\"\n    And Click \"<action_model_name>\"\n    And Click \"Execute\"\n    And Click \"Prepare\"\n    Then Verify Button=\"Run Automation in 3DXpert\" enabled\n    Then Verify Button=\"Open in 3DXpert\" enabled\n    Then Verify 3DXpert Uploaded Files,Expected_File_name=\"<part_model_id>\"\n    Then Verify 3DXpert data estimations \"expected_data_part_model\"\n    Then Click \"Close\"\n\n\n    Examples:\n      | part_model_id | action_model_name | json | path |\n      |!!part_model_id|!!action_model_name|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n  @3DXpert01\n  Scenario Outline: Approve Part Model,Create Parts and Nest\n    Given Read Key=\"order_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    And Navigate to List=\"Orders\"\n    And Click \"!!order_id\"\n    And Click \"Edit Route Plans\"\n    And Click \"Approve\"\n    And Click \"Close\"\n    And Verify All Part Models Approved\n    And Click \"Create Parts\"\n    And Click Element_Text=\"Create Parts\",Tag=\"span\"\n    And Verify All Parts Created\n    And Wait for All Parts to be Ready,Number_of_Parts=\"3\" Timeout=\"300\"\n    And Click \"Nest Parts in One Nest\"\n    And Get Nest ID\n    And Click \"Close\"\n    Then Save Key=\"nest_id\" Value=\"!!nest_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n\n    Examples:\n      | json | json_path|\n      |3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n\n  @3DXpert01\n  Scenario Outline: Run 3DXpert Automation on Nest\n    Given Read Key=\"nest_id,action_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    And Navigate to List=\"Nests\"\n    And Click \"<nest_id>\"\n    And Click \"Edit\"\n    And Click \"<action_model_name>\"\n    And Click \"Execute\"\n    And Click \"Prepare\"\n    Then Verify Button=\"Run Automation in 3DXpert\" enabled\n    Then Verify Button=\"Open in 3DXpert\" enabled\n    Then Verify Button=\"Approve\" disabled\n    Then Click \"Run Automation in 3DXpert\"\n    Then Wait for button=\"Approve\" to be clickable,Timeout=\"600\"\n    Then Click \"Close\"\n\n    Examples:\n      | nest_id |action_model_name| json | json_path |\n      |!!nest_id|!!action_model_name|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n\n  @3DXpert01\n  Scenario Outline: Verify Automation Results for Nest\n    Given Read Key=\"nest_id,action_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    Given Read Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    And Navigate to List=\"Nests\"\n    And Click \"<nest_id>\"\n    And Click \"Edit\"\n    And Click \"<action_model_name>\"\n    And Click \"Execute\"\n    And Click \"Prepare\"\n    Then Verify Button=\"Run Automation in 3DXpert\" enabled\n    Then Verify Button=\"Open in 3DXpert\" enabled\n    Then Verify Button=\"Approve\" enabled\n    Then Verify 3DXpert Uploaded Files,Expected_File_name=\"<nest_id>\" Expected_Format__=\"<printer_format>\"\n    Then Verify 3DXpert data estimations \"expected_data_nest\"\n    Then Click \"Close\"\n\n\n    Examples:\n      | nest_id |action_model_name| printer_format| json | json_path |\n      |!!nest_id|!!action_model_name|    lmg        |3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n    @3DXpert01\n    Scenario Outline: Approve Nest\n      Given Read Key=\"nest_id,action_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n      And Navigate to List=\"Nests\"\n      And Click \"<nest_id>\"\n      And Click \"Edit\"\n      And Click \"<action_model_name>\"\n      And Click \"Execute\"\n      And Click \"Prepare\"\n      And Click \"Approve\"\n      And Click Element_Xpath=\"<approve_button>\"\n      Then Wait for button=\"Revert to Draft\" to be clickable,Timeout=\"120\"\n      Then Verify Button=\"Run Automation in 3DXpert\" disabled\n      Then Verify button=\"Open in 3DXpert\" disabled\n      And Click \"Close\"\n      Then Verify Element=\"Approved\" exists on page,title=\"Verify Nest Approved\"\n\n\n      Examples:\n      | nest_id | action_model_name|approve_button| json | json_path |\n      |!!nest_id|!!action_model_name|(//span[text()='Approve']/parent::button)[2]|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n\n    @3DXpert01\n    Scenario Outline: Start and Finish Actions\n      Given Read Key=\"nest_id,action_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n      And Navigate to List=\"Nests\"\n      And Click \"<nest_id>\"\n      And Get Action ID \"<action_model_name>\"\n      And Click \"!!action_id\"\n      And Click \"Start\"\n      And Click Element_Text=\"Start Action\",Tag=\"span\"\n      Then Verify Element=\"In Progress\" exists on page,title=\"Verify Action Started\"\n      And Click \"Finish\"\n      And Click Element_Text=\"Finish Action\",Tag=\"span\"\n      Then Verify Element=\"Finished\" exists on page,title=\"Verify Action Finished\"\n\n\n      Examples:\n       | nest_id | action_model_name| json | json_path |\n       |!!nest_id|Generic for 3DXpert automation|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n       |!!nest_id|!!action_model_name|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n       |!!nest_id|Generic 2 for 3DXpert automation|3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n\n    @3DXpert01\n    Scenario Outline: Verify Order Completed\n      Given Read Key=\"order_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n      And Navigate to List=\"Orders\"\n      And Click \"!!order_id\"\n      Then Verify Element=\"Completed\" exists on page,title=\"Verify Order Completed\"\n\n      Examples:\n      | json | json_path |\n      |3DXpertIntegration.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 1|\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "3DXpertIntegration_Workflow_2.feature": "Feature: End to End 3DXpert Integration Workflow 2\n\n\n@3DXpert02\nScenario Outline: Set timestamp for workflow\n    Given Set timestamp\n     Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |json|json_path|\n  |3DXpertIntegration_2.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 2|\n\n\n@3DXpert02\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  Given login with \"<email>\" \"<password>\"\n\n  Examples:\n    |url|email|password|\n    |https://qa.staging.oqton.ai/|asaf.vaknin+role-1@oqton.com|Fbravo14!|\n\n\n@3DXpert02\n  Scenario Outline: Create Action Model AMusing3DXpert\n    Given Read Key=\"timestamp\" from Json_File=\"<json>\" to context,Json_Path=\"<path>\"\n    Given Create Action Model AMusing3DXpert,Action_Model_Name=\"<action_model_name>\" Cell_Model=\"<cell_model>\" Material_Model=\"<material_model>\" Tool_Model=\"<tool_model>\" Part_Model_Script__=\"None\" Nest_Script__=\"<nest_script>\" Scripts_Path__=\"<path>\"\n    Then Verify Action Model was created successfully\n    Then Save Key=\"action_model_name\" Value=\"!!action_model_name\" to Json_File=\"<json>\",Json_Path=\"<path>\"\n\n\n    Examples:\n      |action_model_name|cell_model|material_model|tool_model|nest_script|path|json|\n      |#                |SLS 380|DuraForm ProX GF Advanced_Bv15|SLS 380 Build Plate|SLS Nest Preparation - Silent.scrpt|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 2|3DXpertIntegration_2.json|\n\n\n\n@3DXpert02\n  Scenario Outline: Create Route Model\n    Given Read Key=\"timestamp,action_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    Given Create Route Model,Route_Model_Name=\"<route_model_name>\" Supported_Material_Model=\"<supported_material_model>\" Action_Models=\"<action_models>\" Auto_Approve_Part_Model__=\"True\" Auto_Create_Parts__=\"True\"\n    Then Verify Route Model was created successfully\n    Then Save Key=\"route_model_name\" Value=\"!!route_model_name\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n\n  Examples:\n  |route_model_name|supported_material_model|action_models|json|json_path|\n  |#|DuraForm ProX GF Advanced_Bv15|!!action_model_name|3DXpertIntegration_2.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 2|\n\n\n\n@3DXpert02\n  Scenario Outline: Create Order\n  Given Read Key=\"route_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<path>\"\n  And Navigate to List=\"Orders\"\n  And Click \"Create Order\"\n  And Select from Dropdown=\"Customer\",Value=\"JW customer\"\n  And Add Line Item,File_Name=\"CrankGear.stl\" File_Path=\"<path>\" Quantity=\"25\" Material_Model=\"<material_model>\" Route_Model=\"<route_model>\" Line_Item_Number=\"1\" Lots__=\"True\"\n  And Add Line Item,File_Name=\"Handler.stl\" File_Path=\"<path>\" Quantity=\"15\" Material_Model=\"<material_model>\" Route_Model=\"<route_model>\" Line_Item_Number=\"2\" Lots__=\"True\"\n  And Add Line Item,File_Name=\"Holder.stl\" File_Path=\"<path>\" Quantity=\"10\" Material_Model=\"<material_model>\" Route_Model=\"<route_model>\" Line_Item_Number=\"3\" Lots__=\"True\"\n  And Click \"Create\"\n  Then Verify Order created successfully,Number_Of_Line_Items_Expected=\"3\"\n  Then Save Key=\"order_id\" Value=\"!!order_id\" to Json_File=\"<json>\",Json_Path=\"<path>\"\n\n\n     Examples:\n    |material_model | route_model | path |  json |\n    |DuraForm ProX GF Advanced_Bv15 |!!route_model_name |C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 2|3DXpertIntegration_2.json|\n\n\n\n  @3DXpert02\n  Scenario Outline: Create Nest\n   Given Read Key=\"order_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n   And Navigate to List=\"Orders\"\n   And Click \"!!order_id\"\n   And Verify All Part Models Approved\n   And Verify All Parts Created\n    And Wait for All Parts to be Ready,Number_of_Parts=\"50\" Timeout=\"300\"\n   And Click \"Nest Parts in One Nest\"\n   And Get Nest ID\n   Then Verify Nest Processing Done\n   Then Verify Nest Parts Number,Expected_Parts=\"3\"\n   Then Verify Button=\"Run Automation in 3DXpert\" enabled\n   Then Verify Button=\"Open in 3DXpert\" enabled\n   Then Click \"Close\"\n   Then Save Key=\"nest_id\" Value=\"!!nest_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |json|json_path|\n  |3DXpertIntegration_2.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 2|\n\n\n  @3DXpert02\n  Scenario Outline: Run 3DXpert Automation on Nest\n    Given Read Key=\"nest_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    And Navigate to List=\"Nests\"\n    And Click \"<nest_id>\"\n    And Click \"Edit\"\n    And Click \"Run Automation in 3DXpert\"\n    Then Wait for Button=\"Approve\" to be clickable,Timeout=\"600\"\n    Then Click \"Close\"\n\n    Examples:\n      | nest_id | json | json_path |\n      |!!nest_id|3DXpertIntegration_2.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 2|\n\n\n  @3DXpert02\n  Scenario Outline: Verify Automation Results for Nest\n    Given Read Key=\"nest_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    Given Read Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    And Navigate to List=\"Nests\"\n    And Click \"<nest_id>\"\n    And Click \"Edit\"\n    Then Verify Button=\"Run Automation in 3DXpert\" enabled\n    Then Verify Button=\"Open in 3DXpert\" enabled\n    Then Verify Button=\"Approve\" enabled\n    Then Verify 3DXpert Uploaded Files,Expected_File_Name=\"<nest_id>\" Expected_Format__=\"<printer_format>\"\n    Then Verify 3DXpert data estimations \"expected_data_nest\"\n    Then Click \"Close\"\n\n     Examples:\n      | nest_id | printer_format| json | json_path |\n      |!!nest_id|    bpx       |3DXpertIntegration_2.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 2|\n\n\n\n",
      "3DXpertIntegration_Workflow_3.feature": "Feature: End to End 3DXpert Integration Workflow 3\n\n\n@3DXpert03\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  Given login with \"<email>\" \"<password>\"\n\n  Examples:\n    |url|email|password|\n    |https://qa.staging.oqton.ai/|asaf.vaknin@oqton.com|Fbravo14!|\n\n\n\n@3DXpert03\nScenario Outline: Duplicate Order\n  Given Duplicate Order=\"<order_id>\" with Parts and Nest\n  And Verify Order=\"!!duplicated_order_id\" was duplicated successfully\n  Then Save Key=\"duplicated_order_id\" Value=\"!!duplicated_order_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n  And Get Part IDs,Number_of_Parts=\"3\"\n  Then Save Key=\"list_of_parts\" Value=\"!!list_of_parts\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n   Examples:\n  |order_id| json | json_path |\n  |O-000-1080|3DXpertIntegration_3.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 3|\n\n@3DXpert03\n  Scenario Outline: Insert Labels to Parts\n    Given Read Key=\"duplicated_order_id,list_of_parts\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    And Navigate to List=\"Orders\"\n    And Click \"!!duplicated_order_id\"\n    And Click \"<part_id>\",Json=\"<json>\" Json_Path=\"<json_path>\"\n    And Click \"Edit\"\n    And Input text to Element=\"label\",input=\"<label_input>\"\n    And Click \"Save\"\n\n\n  Examples:\n    |part_id| label_input|json | json_path |\n    |!!!list_of_parts[0]|111AAA|3DXpertIntegration_3.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 3|\n    |!!!list_of_parts[1]|222BBB|3DXpertIntegration_3.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 3|\n    |!!!list_of_parts[2]|333CCC|3DXpertIntegration_3.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 3|\n\n\n\n  @3DXpert03\n  Scenario Outline: Run 3DXpert Automation\n    Given Read Key=\"duplicated_order_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n    And Navigate to List=\"Orders\"\n    And Click \"!!duplicated_order_id\"\n    And Click Element that start with=\"N-\"\n    And Click \"Edit\"\n    And Get Nest ID\n    Then Click \"Run Automation in 3DXpert\"\n    Then Wait for updated Nest revision,Timeout=\"300\"\n    Then Click \"Close\"\n    Then Save Key=\"nest_id\" Value=\"!!nest_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n      Examples:\n    |json | json_path |\n    |3DXpertIntegration_3.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 3|\n\n@3DXpert03\n    Scenario Outline: Verify Automation Results for Nest\n      Given Read Key=\"nest_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n      And Navigate to List=\"Nests\"\n      And Click \"!!nest_id\"\n      And Click \"Edit\"\n      Then Verify Button=\"Run Automation in 3DXpert\" enabled\n      Then Verify Button=\"Open in 3DXpert\" enabled\n      Then Verify Button=\"Approve\" enabled\n      Then Verify 3DXpert Uploaded Files,Expected_File_Name=\"!!nest_id + _Opr\" Expected_Printer_Format__=\"lmg\"\n      Then Click \"Open in 3DXpert\"\n      Then Click \"Close\"\n\n      Examples:\n    |json | json_path |\n    |3DXpertIntegration_3.json|C:\\AutomationProjects\\QA_Automation_tool\\automation\\src\\data\\3DXpertIntegration\\Workflow 3|\n",
      "Approve_In_Nest_Editor_Workflow_Subcontractor.feature": "Feature: Approve in nest editor With Subcontractor Route Model and complete action\n\n# Workflow info\n# - Create an order with subcontractor\n# - Create Nest with 2 parts\n# - Approve nest from Nest editor and add to schedule\n# - Start nest action\n# - Finish nest action\n\n  @REGRESSIONS\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONS\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n      | url                          | email                   | password     | output_data_key | expected_data_key | title                                         |\n      | https://qa.staging.oqton.ai/ | goutam.naik+1@oqton.com | Password@123 | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n \n\n @REGRESSIONS\n  Scenario Outline: Create Subcontractor\n    When Create Subcontractor,\"<subcontractor_name>\"\n    And Read data and store in dictionary: data=\"<subcontractor_name>\", key=\"REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n       | subcontractor_name       | title                                                     |\n       | Regression Subcontractor | To check Regression Subcontractor is created successfully |\n\n @REGRESSIONS\n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | material_model_name_to_enter      | title                                                             |\n      | Regression Material Model Generic | Regression Material Model of type Generic is created successfully |\n\n   @REGRESSIONS\n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | type    | material_id | initial_weight | price | file1             | file_path                                                       | file2            | title                                                     |\n      | Generic | M-000       | 50             | 110   | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression material of type resin is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Action Model Subcontractor\n    When Create Action Model of type Subcontractor,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n      | action_model_name_to_enter            | title                                                         |\n      | Regression Action Model Subcontractor | Regression Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n       | action_model_type | route_model_name                            | material_model                    | action_model_name                     | title                                                                          |\n       | subcontractor     | Route Model with Subcontractor Action Model | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Regression Route model with Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n       | customer_name       | title                                                |\n       | Regression Customer | To check Regression Customer is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And verify that the file, \"<file>\" is displayed on the product details page and assert with \"<title>\"\n    And approve the part model\n\n     Examples:\n       | action_model_type | material_model_input              | route_model_input                                      | pm_type | part_model_name       | file             | file_path                                                       | title                                                                         |\n       | Subcontractor     | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Generic | Regression Part Model | K59YH14L-70A.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Subcontractor Action Model is created successfully |\n\n\n@REGRESSIONG\n  Scenario Outline: Create Order\n    Given navigate to Organisation page\n    Then user creates an order with existing part model \"<part_model>\",using material model=\"<material_model>\", route model=\"<route_model>\", qty=\"<qty>\" and customer=\"<customer>\"\n\n     Examples:\n       | material_model           | route_model           | qty | customer        | part_model           |\n       | ##GENERIC_MATERIAL_MODEL | ##ROUTE_MODEL_WITH_AM | 2   | ##CUSTOMER_NAME | ##PART_MODEL_WITH_AM |\n\n@REGRESSIONG \n Scenario Outline: Create nest from Parts created, approve and schedule in Nest editor\n   When Create a nest of two parts and \"<option>\"\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n   Examples:\n     | nest_action_id | option               |\n     | A-             | Approve and Schedule |\n\n @REGRESSIONG \n Scenario Outline: Save Schedule\n    Given action \"<nest_action_id>\" is displayed on the scheduler, title=\"<title1>\"\n    Then add Subcontractor=\"<subcontractor>\", Assignee=\"<assignee>\", Start Date & Time=\"10\"\n    Then click \"Save\" on Schedule editor\n    And Wait for 10\n    And Verify status=\"<expected_status>\" on schedule editor for Action=\"##NEST_ACTION_ID_OUTPUT_KEY\", title=\"<title2>\"\n    Then click \"Close\" on Schedule editor\n\n    Examples:\n      | nest_action_id              | title1                        | subcontractor        | assignee                | expected_status | title2                             |\n      | ##NEST_ACTION_ID_OUTPUT_KEY | Action displayed on scheduler | ##SUBCONTRACTOR_NAME | goutam.naik+1@oqton.com | Ready To Start  | Verified status on schedule editor |\n\n@REGRESSIONG \n    Scenario Outline: To Start Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                        | event |\n        | NEST_ACTION_ID_OUTPUT_KEY | In Progress     | Status after starting action | Start |\n\n @REGRESSIONG \n    Scenario Outline: To Finish Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title               | event  |\n        | NEST_ACTION_ID_OUTPUT_KEY | Finished        | Status after Finish | Finish |",
      "Approve_Nest_Workflow_with_Schedule_Generic.feature": "Feature: Complete Nest Action with Generic Workflow\n\n# Workflow info\n# - Create an order with Generic action\n# - Create Nest with 2 parts\n# - Approve nest from Nest details and add to schedule\n# - Start nest action\n# - Pause nest action\n# - Start processing nest action\n# - Pause processing\n# - Resume processing\n# - Finish nest action\n\n  @REGRESSIONS \n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONS \n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 5\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n      | url                          | email                   | password     | output_data_key | expected_data_key | title                                         |\n      | https://qa.staging.oqton.ai/ | goutam.naik+1@oqton.com | Password@123 | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n\n @REGRESSIONG \n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n       | customer_name | title                                                |\n       | Reg Cust      | To check Regression Customer is created successfully |\n\n  @REGRESSIONS \n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | material_model_name_to_enter | title                                                             |\n      | MM Generic type              | Regression Material Model of type Generic is created successfully |\n\n @REGRESSIONS \n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | type    | material_id | initial_weight | price | file1             | file_path                                                       | file2            | title                                                     |\n      | Generic | M-000       | 50             | 110   | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression material of type resin is created successfully |\n\n  @AMNOVIS \n  Scenario Outline: Create Tool Model Build Plate\n    When Create Tool Model Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n    Then Verifying \"Tool Model\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n       | tool_model_name    | length_val | width_val | height_val | output_data_key | expected_data_key        | title                                            |\n       | SPEC-35 Tool Model | 500        | 500       | 500        | Tool_Model_Name | EXPECTED_TOOL_MODEL_NAME | Check if Regression Tool Model Has Been Created. |\n\n  @AMNOVIS \n  Scenario Outline:Build Plate\n    When Create Tool Build Plate \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    Then Verifying \"Build Plate\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Examples:\n      | notes          | file1             | file_path                                                          | file2            | output_data_key  | expected_data_key        | title                                      |\n      | REG Tool notes | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files | SPEC-35_V3.0.pdf | TOOL_MODEL_FOUND | EXPECTED_TOOL_MODEL_NAME | Check if Regression Tool Has Been Created. |\n\n  @REGRESSIONG \n  Scenario Outline: Create cell model Generic\n    When Create Cell Model of type Generic,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic>\", key=\"GENERIC_CELL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n      Examples:\n        | cell_model_name_generic | cell_fixed_cost | cell_hourly_cost | labour_hourly_cost | title                                                         |\n        | Reg CM Generic          | 100             | 190              | 610                | Regression Cell Model of type Generic is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create cell Generic\n    When Create Cell from Cell Model of type Generic,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"GENERIC_CELL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_OUTPUT_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n     Examples:\n       | cell_name_generic | serial_no         | file1             | file_path                                                       | file2            | title                                                   |\n       | Reg Generic Cell  | Reg Serial Number | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression Cell of type Generic is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create Action Model Generic\n    When Create Action Model of type Generic,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n      | action_model_name_to_enter      | title                                                   |\n      | Regression Action Model Generic | Regression Generic Action Model is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n       | action_model_type | route_model_name                      | material_model         | action_model_name               | title                                                                    |\n       | Generic           | Route Model with Generic Action Model | GENERIC_MATERIAL_MODEL | GENERIC_ACTION_MODEL_OUTPUT_KEY | Regression Route model with Generic Action Model is created successfully |\n\n @REGRESSIONG  \n Scenario Outline: Create Part Model of type 3D Geometry using multiple files\n    When Create Part Model using \"<no_of_files>\" files for \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<files>\" \"<file_path>\"\n    Then click on \"Create\" button\n    And approve the part model\n    Examples:\n      | no_of_files | action_model_type | material_model_input   | route_model_input                                | pm_type     | part_model_name | files     | file_path                                                       | title                                                                   | field_to_edit | edited_value          | title2                                                                 |\n      | 1           | Generic           | GENERIC_MATERIAL_MODEL | ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY | 3D Geometry | *               | Crown.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Generic Action Model is created successfully | Reference     | Regression references | Regression Part model with Generic Action Model is edited successfully |\n\n\n\n    @REGRESSIONG\n    Scenario Outline: Create Order\n        Given navigate to Organisation page\n        Then user creates an order with existing part model \"<part_model>\",using material model=\"<material_model>\", route model=\"<route_model>\", qty=\"<qty>\" and customer=\"<customer>\"\n\n        Examples:\n          | material_model           | route_model           | qty | customer        | part_model |\n          | ##GENERIC_MATERIAL_MODEL | ##ROUTE_MODEL_WITH_AM | 2   | ##CUSTOMER_NAME | ##PART0    |\n\n @REGRESSIONG \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then view details page of the Nest, \"<nest_id>\" and approve it with option=\"Approve and Schedule\"\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n    Examples:\n      | nest_action_id | nest_id  |\n      | A-             | ##NESTID |\n \n @REGRESSIONG \n Scenario Outline: Save Schedule\n    Given action \"<nest_action_id>\" is displayed on the scheduler, title=\"<title1>\"\n    Then add Cell=\"<cell>\", Assignee=\"<assignee>\", Start Date & Time=\"10\"\n    Then click \"Save\" on Schedule editor\n    And Wait for 5\n    Then click \"Close\" on Schedule editor\n\n    Examples:\n      | nest_action_id | title1                        | cell                      | assignee                |\n      | ##NESTACTIONID | Action displayed on scheduler | ##GENERIC_CELL_OUTPUT_KEY | goutam.naik+1@oqton.com |\n\n  @REGRESSIONG \n    Scenario Outline: To Start Setup Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                        | event       |\n        | NEST_ACTION_ID_OUTPUT_KEY | Setup           | Status after starting action | Start Setup |\n\n   @REGRESSIONG \n    Scenario Outline: To Pause Setup Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                      | event       |\n        | NEST_ACTION_ID_OUTPUT_KEY | Setup - Paused  | Status after 'Pause Setup' | Pause Setup |\n\n    @REGRESSIONG \n    Scenario Outline: To Resume Setup Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                       | event        |\n        | NEST_ACTION_ID_OUTPUT_KEY | Setup           | Status after 'Resume Setup' | Resume Setup |\n\n    @REGRESSIONG \n    Scenario Outline: Start Processing Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                           | event            |\n        | NEST_ACTION_ID_OUTPUT_KEY | Processing      | Status after 'Start Processing' | Start Processing |\n\n    @REGRESSIONG \n    Scenario Outline: Pause Processing Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status     | title                           | event            |\n        | NEST_ACTION_ID_OUTPUT_KEY | Processing - Paused | Status after 'Pause Processing' | Pause Processing |\n\n    @REGRESSIONG \n    Scenario Outline: Resume Processing Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                            | event             |\n        | NEST_ACTION_ID_OUTPUT_KEY | Processing      | Status after 'Resume Processing' | Resume Processing |\n   \n   @REGRESSIONG \n    Scenario Outline: Finish Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                 | event  |\n        | NEST_ACTION_ID_OUTPUT_KEY | Finished        | Status after 'Finish' | Finish |",
      "Approve_Nest_Workflow_with_Schedule_Subcontractor.feature": "Feature: Part Model Creation Worklflow With Subcontractor Route Model\n\n# Workflow info\n# - Create an order with subcontractor\n# - Create Nest with 2 parts\n# - Approve nest from Nest details and add to schedule\n# - Start nest action\n# - Finish nest action\n\n  @REGRESSIONS\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONS\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n      | url                          | email                   | password     | output_data_key | expected_data_key | title                                         |\n      | https://qa.staging.oqton.ai/ | goutam.naik+1@oqton.com | Password@123 | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n\n @REGRESSIONS\n  Scenario Outline: Create Subcontractor\n    When Create Subcontractor,\"<subcontractor_name>\"\n    And Read data and store in dictionary: data=\"<subcontractor_name>\", key=\"REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n       | subcontractor_name       | title                                                     |\n       | Regression Subcontractor | To check Regression Subcontractor is created successfully |\n\n @REGRESSIONS\n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | material_model_name_to_enter      | title                                                             |\n      | Regression Material Model Generic | Regression Material Model of type Generic is created successfully |\n\n   @REGRESSIONS\n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | type    | material_id | initial_weight | price | file1             | file_path                                                       | file2            | title                                                     |\n      | Generic | M-000       | 50             | 110   | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression material of type resin is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Action Model Subcontractor\n    When Create Action Model of type Subcontractor,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n      | action_model_name_to_enter            | title                                                         |\n      | Regression Action Model Subcontractor | Regression Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n       | action_model_type | route_model_name                            | material_model                    | action_model_name                     | title                                                                          |\n       | subcontractor     | Route Model with Subcontractor Action Model | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Regression Route model with Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n       | customer_name       | title                                                |\n       | Regression Customer | To check Regression Customer is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And verify that the file, \"<file>\" is displayed on the product details page and assert with \"<title>\"\n    And approve the part model\n\n     Examples:\n       | action_model_type | material_model_input              | route_model_input                                      | pm_type | part_model_name       | file             | file_path                                                       | title                                                                         |\n       | Subcontractor     | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Generic | Regression Part Model | K59YH14L-70A.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Subcontractor Action Model is created successfully |\n\n@REGRESSIONG\n  Scenario Outline: Create Order\n    Given navigate to Organisation page\n    Then user creates an order with existing part model \"<part_model>\",using material model=\"<material_model>\", route model=\"<route_model>\", qty=\"<qty>\" and customer=\"<customer>\"\n\n     Examples:\n       | material_model           | route_model           | qty | customer        | part_model           |\n       | ##GENERIC_MATERIAL_MODEL | ##ROUTE_MODEL_WITH_AM | 2   | ##CUSTOMER_NAME | ##PART_MODEL_WITH_AM |\n\n@REGRESSIONG \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then view details page of the Nest, \"<nest_id>\" and approve it with option=\"Approve and Schedule\"\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n   Examples:\n     | nest_action_id | nest_id  | expected_status | action_id                 | title                             |\n     | A-             | ##NESTID | Ready To Start  | NEST_ACTION_ID_OUTPUT_KEY | Action status after nest approval |\n\n@REGRESSIONG \n Scenario Outline: Save Schedule\n    Given action \"<nest_action_id>\" is displayed on the scheduler, title=\"<title1>\"\n    Then add Subcontractor=\"<subcontractor>\", Assignee=\"<assignee>\", Start Date & Time=\"10\"\n    Then click \"Save\" on Schedule editor\n    And Wait for 10\n    Then click \"Close\" on Schedule editor\n\n    Examples:\n      | nest_action_id | title1                        | subcontractor        | assignee                |\n      | ##NESTACTIONID | Action displayed on scheduler | ##SUBCONTRACTOR_NAME | goutam.naik+1@oqton.com |\n\n@REGRESSIONG \n    Scenario Outline: To Start Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                        | event |\n        | NEST_ACTION_ID_OUTPUT_KEY | In Progress     | Status after starting action | Start |\n\n @REGRESSIONG \n    Scenario Outline: To Finish Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title               | event  |\n        | NEST_ACTION_ID_OUTPUT_KEY | Finished        | Status after Finish | Finish |",
      "Generic_Maintenance_Workflow.feature": "\nFeature: Generic Maintenance Workflow\n\n\n  @REGRESSIONFORGM\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n  \n\n @REGRESSIONFORGM\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://qa.staging.oqton.ai/|vidhi.kandolkar+amnovis@oqton.com|Oqton123#|Inbox|Inbox|To check inbox icon on Login page(step1 to 4)|\n\n\n @REGRESSIONS\n  Scenario Outline: Create Subcontractor\n    When Create Subcontractor,\"<subcontractor_name>\"\n    And Read data and store in dictionary: data=\"<subcontractor_name>\", key=\"REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##subcontractor_name\". title=\"<title>\"\n\n     Examples:\n      |subcontractor_name|title|\n      |Regression Subcontractor|To check Regression Subcontractor is created successfully|\n\n\n\n @REGRESSIONFORGM\n  Scenario Outline: Create Action Model Generic Maintenance\n    When Create Action Model of type Generic Maintenance,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_MAINTENANCE_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MAINTENANCE_OUTPUT_KEY\", expected=\"##GENERIC_MAINTENANCE_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n     |action_model_name_to_enter|title|\n     |Regression Action Model Generic|Regression Generic Maintenance Action Model is created successfully|\n\n\n\n  @REGRESSIONFORGM\n  Scenario Outline: Create cell model Generic\n    When Create Cell Model of type Generic,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic>\", key=\"CELL_MODEL_GENERIC_OUTPUT_DATA_KEY\"\n    Then Assert data equals expected: data=\"##CELL_MODEL_GENERIC_OUTPUT_DATA_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n    Examples:\n      |cell_model_name_generic|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|title|\n      |Regression Cell Model Generic|100|190|610|Cell Model of type GENERIC is created successfully|\n\n @REGRESSIONFORGM\n  Scenario Outline: Create cell Generic\n    When Create Cell of type Generic,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n     And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"CELL_GENERIC_OUTPUT_DATA_KEY\"\n    Then Assert data equals expected: data=\"##CELL_GENERIC_OUTPUT_DATA_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n     Examples:\n     |cell_name_generic|serial_no|file1|file_path|file2|title|\n      |Regression Generic Cell|SPEC-35 Serial Number|LIST-123_V1.0.pdf|C:\\Github_Working\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Cell of type GENERIC is created successfully|\n\n\n",
      "Generic_Workflow.feature": "\nFeature: Generic Workflow\n\n  @REGRESSIONG\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONG\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"10\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://qa.staging.oqton.ai/|vidhi.kandolkar+amnovis@oqton.com|Oqton123#|Profile|Profile|To check inbox icon on Login page(step1 to 4)|\n\n\n @REGRESSIONG\n  Scenario Outline: Create Material Model Resin\n    When Create Material Model with type as Resin,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"RESIN_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##RESIN_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##RESIN_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n     |material_model_name_to_enter|title|\n     |Regression Material Model Resin|Regression Material Model of type Resin is created successfully|\n\n\n   @REGRESSIONG\n  Scenario Outline: Create Material of model resin\n    Given Create Material of model \"<type>\",\"<material_model_output_key>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"RESIN_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##RESIN_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##RESIN_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      |type|material_model_output_key|material_id|initial_weight|price|file1|file_path|file2|title|\n      |resin|RESIN_MATERIAL_MODEL_OUTPUT_KEY|M-000|50|110|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression material of type resin is created successfully|\n\n\n @REGRESSIONG\n  Scenario Outline: Create Tool Model Build Plate\n    When Create Tool Model of type Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n    And Read data and store in dictionary: data=\"<tool_model_name>\", key=\"TOOL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##TOOL_MODEL_OUTPUT_KEY\", expected=\"##BUILD_PLATE_TOOL_MODEL\". title=\"<title>\"\n\n\n     Examples:\n      |tool_model_name|length_val|width_val|height_val|title|\n      |Regression Build Tool Model|500|500| 500|Regression Tool Model of type Build Plate is created successfully|\n \n @REGRESSIONG\n  Scenario Outline:Build Plate\n    When Create Tool of type Build Plate,\"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<tool_model_name>\", key=\"TOOL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##TOOL_MODEL_OUTPUT_KEY\", expected=\"##BUILD_PLATE_TOOL_MODEL\". title=\"<title>\"\n\n    Examples:\n    |tool_model_name|notes|file1|file_path|file2|output_data_key|expected_data_key|title|\n     |Regression Build Tool Model|Regression Tool notes|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|TOOL_MODEL_FOUND|EXPECTED_TOOL_MODEL_NAME|A Tool is created of type build plate|\n\n\n  @REGRESSIONG\n  Scenario Outline: Create cell model Generic\n    When Create Cell Model of type Generic,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic>\", key=\"GENERIC_CELL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n      Examples:\n      |cell_model_name_generic|cell_fixed_cost|cell_hourly_cost|labour_hourly_cost|title|\n      |Regression Cell Model Generic|100|190| 610|Regression Cell Model of type Generic is created successfully|\n\n @REGRESSIONG\n  Scenario Outline: Create cell Generic\n    When Create Cell from Cell Model of type Generic,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"GENERIC_CELL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_OUTPUT_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n  \n     Examples:\n     |cell_name_generic|serial_no|file1|file_path|file2|title|\n      |Regression Generic Cell|Reg Serial Number|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression Cell of type Generic is created successfully|\n\n\n@REGRESSIONG\n  Scenario Outline: Create Action Model Generic\n    When Create Action Model of type Generic,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n     |action_model_name_to_enter|title|\n     |Regression Action Model Generic|Regression Generic Action Model is created successfully|\n\n@REGRESSIONG\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_GENERIC_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|route_model_name|material_model|action_model_name|title|\n      |Generic|Route Model with Generic Action Model|RESIN_MATERIAL_MODEL_OUTPUT_KEY|GENERIC_ACTION_MODEL_OUTPUT_KEY|Regression Route model with Generic Action Model is created successfully|\n\n\n@REGRESSIONG\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n      |customer_name|title|\n      |Regression Customer|To check Regression Customer is created successfully|\n\n@REGRESSIONG\n Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|material_model_input|route_model_input|pm_type|part_model_name|file|file_path|title|\n      |Generic|RESIN_MATERIAL_MODEL_OUTPUT_KEY|ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|3D Geometry|Regression Part Model|K59YH14L-70A.stl|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Regression Part model with Generic Action Model is created successfully|\n\n\n\n\n @REGRESSIONG\n  Scenario Outline: Approve Part Model\n    When Edit Part Model with \"<type>\" Action Model and approve,\"<file1>\" \"<file_path>\" \"<file2>\"\n      Then Verifying files are uploaded on Part Model,\"<file1>\"\"<file2>\"\n      Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n      And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n      Then Assert data equals expected: data=\"##PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_GENERIC_AM\". title=\"<title>\"\n\n\n    Examples:\n      |type|file1|file_path|file2|part_model_name|status_type|expected_data|title|\n      |Generic|LIST-123_V1.0.pdf|C:\\Github_Working\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression Part Model|Approved|Approved|Check if Part model status has been approved|\n\n\n\n @REGRESSIONG \n  Scenario Outline: Create Parts\n    Given Create Parts from Part list page,\"<part_model_name_input>\" <qty> \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\" \"<file3>\" \"<file4>\"\n    When Read Part IDs from \"<part_model_name_input>\" details and store\n    And Click on Parts page to view the details\n    Then Read data and store in dictionary: data=\"<action_id>\", key=\"PART_ACTION_ID\"\n\n\n      Examples:\n      |part_model_name_input|qty|notes|file1|file_path|file2|file3|file4|status_type|expected_data|title|action_id|\n      |PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|10|Regression Part Notes|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|Ready To Start|Ready To Start|Check if parts are getting created|A-000|\n\n  @REGRESSIONG \n  Scenario Outline: Create 2 more parts from Part Models\n    Given Create Parts from Part Model details page,<qty> \"<Part_Model_input>\"\n    And Read Part IDs from \"<Part_Model_input>\" details and store\n\n    #Then Verifying Parts created,\"<element_to_find>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |qty|Part_Model_input|\n      |5|PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|\n      |5|PART_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Start Part Action\n    When Start an Action,\"<action_id>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |action_id|status_type|expected_data|title|\n    |PART_ACTION_ID|Processing|Processing|Check if Part Action status is in Processing.|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Finish Part Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Part Action status has been Finished.|\n\n\n\n @REGRESSIONG \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then View details page of the approved Nest\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n    Examples:\n    |nest_action_id|\n    |A-000|\n\n\n    @REGRESSIONG \n    Scenario Outline: To Start Nest Action\n    When Start an Action,\"<action_id>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |action_id|status_type|expected_data|title|\n    |NEST_ACTION_ID_OUTPUT_KEY|Processing|Processing|Check if Nest Action status is in Processing after starting an Action.|\n\n\n\n @REGRESSIONG \n  Scenario Outline: To Finish Nest Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\Github\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Nest Action status has been Finished  after finishing an Action.|\n\n",
      "Nest_Action_Generic_Workflow.feature": "Feature: Approve Nest Workflow with Generic Workflow (with 'Go to production' option)\n\n\n  @REGRESSIONS \n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONS \n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 5\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n      | url                          | email                   | password     | output_data_key | expected_data_key | title                                         |\n      | https://qa.staging.oqton.ai/ | goutam.naik+1@oqton.com | Password@123 | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n\n @REGRESSIONG \n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n       | customer_name | title                                                |\n       | Reg Cust      | To check Regression Customer is created successfully |\n\n  @REGRESSIONS \n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | material_model_name_to_enter | title                                                             |\n      | MM Generic type              | Regression Material Model of type Generic is created successfully |\n\n @REGRESSIONS \n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | type    | material_id | initial_weight | price | file1             | file_path                                                       | file2            | title                                                     |\n      | Generic | M-000       | 50             | 110   | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression material of type resin is created successfully |\n\n  @AMNOVIS \n  Scenario Outline: Create Tool Model Build Plate\n    When Create Tool Model Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n    Then Verifying \"Tool Model\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n       | tool_model_name    | length_val | width_val | height_val | output_data_key | expected_data_key        | title                                            |\n       | SPEC-35 Tool Model | 500        | 500       | 500        | Tool_Model_Name | EXPECTED_TOOL_MODEL_NAME | Check if Regression Tool Model Has Been Created. |\n\n  @AMNOVIS \n  Scenario Outline:Build Plate\n    When Create Tool Build Plate \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    Then Verifying \"Build Plate\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Examples:\n      | notes          | file1             | file_path                                                          | file2            | output_data_key  | expected_data_key        | title                                      |\n      | REG Tool notes | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files | SPEC-35_V3.0.pdf | TOOL_MODEL_FOUND | EXPECTED_TOOL_MODEL_NAME | Check if Regression Tool Has Been Created. |\n\n  @REGRESSIONG \n  Scenario Outline: Create cell model Generic\n    When Create Cell Model of type Generic,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic>\", key=\"GENERIC_CELL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n      Examples:\n        | cell_model_name_generic | cell_fixed_cost | cell_hourly_cost | labour_hourly_cost | title                                                         |\n        | Reg CM Generic          | 100             | 190              | 610                | Regression Cell Model of type Generic is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create cell Generic\n    When Create Cell from Cell Model of type Generic,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"GENERIC_CELL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_OUTPUT_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n     Examples:\n       | cell_name_generic | serial_no         | file1             | file_path                                                       | file2            | title                                                   |\n       | Reg Generic Cell  | Reg Serial Number | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression Cell of type Generic is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create Action Model Generic\n    When Create Action Model of type Generic,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n      | action_model_name_to_enter      | title                                                   |\n      | Regression Action Model Generic | Regression Generic Action Model is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n       | action_model_type | route_model_name                      | material_model         | action_model_name               | title                                                                    |\n       | Generic           | Route Model with Generic Action Model | GENERIC_MATERIAL_MODEL | GENERIC_ACTION_MODEL_OUTPUT_KEY | Regression Route model with Generic Action Model is created successfully |\n\n @REGRESSIONG  \n Scenario Outline: Create Part Model of type 3D Geometry using multiple files\n    When Create Part Model using \"<no_of_files>\" files for \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<files>\" \"<file_path>\"\n    Then click on \"Create\" button\n    And approve the part model\n    Examples:\n      | no_of_files | action_model_type | material_model_input   | route_model_input                                | pm_type     | part_model_name | files     | file_path                                                       | title                                                                   | field_to_edit | edited_value          | title2                                                                 |\n      | 1           | Generic           | GENERIC_MATERIAL_MODEL | ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY | 3D Geometry | *               | Crown.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Generic Action Model is created successfully | Reference     | Regression references | Regression Part model with Generic Action Model is edited successfully |\n\n\n\n    @REGRESSIONG\n    Scenario Outline: Create Order\n        Given navigate to Organisation page\n        Then user creates an order with existing part model \"<part_model>\",using material model=\"<material_model>\", route model=\"<route_model>\", qty=\"<qty>\" and customer=\"<customer>\"\n\n        Examples:\n          | material_model           | route_model           | qty | customer        | part_model |\n          | ##GENERIC_MATERIAL_MODEL | ##ROUTE_MODEL_WITH_AM | 2   | ##CUSTOMER_NAME | ##PART0    |\n\n#     @REGRESSIONG\n#     Scenario Outline: Approve Order\n#      Given navigate to Organisation page\n#      Given user access order \"##ORDERID\" and approves parts\n#      Then Click on: item=\"Approve All, Create Parts and Nest All In One\", context=\"Plan Editor\"\n#      Then Click on: item=\"Approve and Create Parts\", context=\"Approve All, Create Parts and Nest All In One\"\n#      Then Click on: item=\"Close\", context=\"Profile\"\n#      Then Click on: item=\"Close\", context=\"Profile\"\n\n#      Examples:\n#       | url                          | email                   | password     | output_data_key | expected_data_key | title                                         |\n#       | https://qa.staging.oqton.ai/ | goutam.naik+1@oqton.com | Password@123 | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n     \n\n    @REGRESSIONG \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then view details page of the Nest, \"<nest_id>\" and approve it with option=\"Approve and go to production\"\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n    Examples:\n      | nest_action_id | nest_id  |\n      | A-             | ##NESTID |\n\n    @REGRESSIONG \n    Scenario Outline: To Start Setup Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                        | event       |\n        | NEST_ACTION_ID_OUTPUT_KEY | Setup           | Status after starting action | Start Setup |\n\n   @REGRESSIONG \n    Scenario Outline: To Pause Setup Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                      | event       |\n        | NEST_ACTION_ID_OUTPUT_KEY | Setup - Paused  | Status after 'Pause Setup' | Pause Setup |\n\n    @REGRESSIONG \n    Scenario Outline: To Resume Setup Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                       | event        |\n        | NEST_ACTION_ID_OUTPUT_KEY | Setup           | Status after 'Resume Setup' | Resume Setup |\n\n    @REGRESSIONG \n    Scenario Outline: Start Processing Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                           | event            |\n        | NEST_ACTION_ID_OUTPUT_KEY | Processing      | Status after 'Start Processing' | Start Processing |\n\n    @REGRESSIONG \n    Scenario Outline: Pause Processing Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status     | title                           | event            |\n        | NEST_ACTION_ID_OUTPUT_KEY | Processing - Paused | Status after 'Pause Processing' | Pause Processing |\n\n    @REGRESSIONG \n    Scenario Outline: Resume Processing Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                            | event             |\n        | NEST_ACTION_ID_OUTPUT_KEY | Processing      | Status after 'Resume Processing' | Resume Processing |\n   \n   @REGRESSIONG \n    Scenario Outline: Finish Nest Action\n      When user perform an event,\"<event>\" on Action, \"<action_id>\"\n      Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n      Examples:\n        | action_id                 | expected_status | title                 | event  |\n        | NEST_ACTION_ID_OUTPUT_KEY | Finished        | Status after 'Finish' | Finish |\n",
      "Nest_Action_Subcontractor_Workflow.feature": "Feature: Approve Nest Workflow With Subcontractor Route Model (with 'Go to production' option)\n\n# Workflow info\n# - Create an order with subcontractor\n# - Create Nest with 2 parts\n# - Approve nest and Go to production\n# - Verify Ready To Start on nest action\n\n  @REGRESSIONS\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONS\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n      | url                          | email                   | password     | output_data_key | expected_data_key | title                                         |\n      | https://qa.staging.oqton.ai/ | goutam.naik+1@oqton.com | Password@123 | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n\n @REGRESSIONS\n  Scenario Outline: Create Subcontractor\n    When Create Subcontractor,\"<subcontractor_name>\"\n    And Read data and store in dictionary: data=\"<subcontractor_name>\", key=\"REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n       | subcontractor_name       | title                                                     |\n       | Regression Subcontractor | To check Regression Subcontractor is created successfully |\n\n @REGRESSIONS\n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | material_model_name_to_enter      | title                                                             |\n      | Regression Material Model Generic | Regression Material Model of type Generic is created successfully |\n\n   @REGRESSIONS\n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | type    | material_id | initial_weight | price | file1             | file_path                                                       | file2            | title                                                     |\n      | Generic | M-000       | 50             | 110   | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression material of type resin is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Action Model Subcontractor\n    When Create Action Model of type Subcontractor,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n      | action_model_name_to_enter            | title                                                         |\n      | Regression Action Model Subcontractor | Regression Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n       | action_model_type | route_model_name                            | material_model                    | action_model_name                     | title                                                                          |\n       | subcontractor     | Route Model with Subcontractor Action Model | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Regression Route model with Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n       | customer_name       | title                                                |\n       | Regression Customer | To check Regression Customer is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And verify that the file, \"<file>\" is displayed on the product details page and assert with \"<title>\"\n    And approve the part model\n\n     Examples:\n       | action_model_type | material_model_input              | route_model_input                                      | pm_type | part_model_name       | file             | file_path                                                       | title                                                                         |\n       | Subcontractor     | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Generic | Regression Part Model | K59YH14L-70A.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Subcontractor Action Model is created successfully |\n@REGRESSIONG\n  Scenario Outline: Create Order\n    Given navigate to Organisation page\n    Then user creates an order with existing part model \"<part_model>\",using material model=\"<material_model>\", route model=\"<route_model>\", qty=\"<qty>\" and customer=\"<customer>\"\n\n     Examples:\n       | material_model           | route_model           | qty | customer        | part_model           |\n       | ##GENERIC_MATERIAL_MODEL | ##ROUTE_MODEL_WITH_AM | 2   | ##CUSTOMER_NAME | ##PART_MODEL_WITH_AM |\n\n@REGRESSIONG \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then view details page of the Nest, \"<nest_id>\" and approve it with option=\"Approve and go to production\"\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n   Then verify status as \"<expected_status>\" for action \"<action_id>\" , title = \"<title>\"\n\n    Examples:\n      | nest_action_id | nest_id  | expected_status | action_id                 | title                             |\n      | A-             | ##NESTID | Ready To Start  | NEST_ACTION_ID_OUTPUT_KEY | Action status after nest approval |",
      "Part_Model_Creation_Workflow.feature": "\nFeature: Part Model Creation Worklflow With Generic Route Model\n\n\n  @REGRESSIONS \n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  \n @REGRESSIONS \n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 5\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n      | url                          | email                             | password  | output_data_key | expected_data_key | title                                         |\n      | https://qa.staging.oqton.ai/ | vidhi.kandolkar+amnovis@oqton.com | Oqton123# | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n\n @REGRESSIONG \n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n       | customer_name | title                                                |\n       | Reg Cust      | To check Regression Customer is created successfully |\n\n  @REGRESSIONS \n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | material_model_name_to_enter | title                                                             |\n      | MM Generic type              | Regression Material Model of type Generic is created successfully |\n\n @REGRESSIONS \n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | type    | material_id | initial_weight | price | file1             | file_path                                                       | file2            | title                                                     |\n      | Generic | M-000       | 50             | 110   | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression material of type resin is created successfully |\n\n  @AMNOVIS \n  Scenario Outline: Create Tool Model Build Plate\n    When Create Tool Model Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n    Then Verifying \"Tool Model\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n     Examples:\n       | tool_model_name    | length_val | width_val | height_val | output_data_key | expected_data_key        | title                                            |\n       | SPEC-35 Tool Model | 500        | 500       | 500        | Tool_Model_Name | EXPECTED_TOOL_MODEL_NAME | Check if Regression Tool Model Has Been Created. |\n\n  @AMNOVIS \n  Scenario Outline:Build Plate\n    When Create Tool Build Plate \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    Then Verifying \"Build Plate\" created,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n    Examples:\n      | notes          | file1             | file_path                                                          | file2            | output_data_key  | expected_data_key        | title                                      |\n      | REG Tool notes | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\AMNOVIS\files | SPEC-35_V3.0.pdf | TOOL_MODEL_FOUND | EXPECTED_TOOL_MODEL_NAME | Check if Regression Tool Has Been Created. |\n\n  @REGRESSIONG \n  Scenario Outline: Create cell model Generic\n    When Create Cell Model of type Generic,\"<cell_model_name_generic>\" <cell_fixed_cost> <cell_hourly_cost> <labour_hourly_cost>\n    And Read data and store in dictionary: data=\"<cell_model_name_generic>\", key=\"GENERIC_CELL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_CELL_MODEL\". title=\"<title>\"\n\n      Examples:\n        | cell_model_name_generic | cell_fixed_cost | cell_hourly_cost | labour_hourly_cost | title                                                         |\n        | Reg CM Generic          | 100             | 190              | 610                | Regression Cell Model of type Generic is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create cell Generic\n    When Create Cell from Cell Model of type Generic,\"<cell_name_generic>\" \"<serial_no>\" \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<cell_name_generic>\", key=\"GENERIC_CELL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_CELL_OUTPUT_KEY\", expected=\"##GENERIC_CELL\". title=\"<title>\"\n\n     Examples:\n       | cell_name_generic | serial_no         | file1             | file_path                                                       | file2            | title                                                   |\n       | Reg Generic Cell  | Reg Serial Number | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression Cell of type Generic is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create Action Model Generic\n    When Create Action Model of type Generic,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n      | action_model_name_to_enter      | title                                                   |\n      | Regression Action Model Generic | Regression Generic Action Model is created successfully |\n\n @REGRESSIONG \n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n       | action_model_type | route_model_name                      | material_model         | action_model_name               | title                                                                    |\n       | Generic           | Route Model with Generic Action Model | GENERIC_MATERIAL_MODEL | GENERIC_ACTION_MODEL_OUTPUT_KEY | Regression Route model with Generic Action Model is created successfully |\n\n @REGRESSIONG  \n Scenario Outline: Create Part Model of type 3D Geometry using multiple files\n    When Create Part Model using \"<no_of_files>\" files for \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<files>\" \"<file_path>\"\n    Then click on \"Create & Edit\" button\n    Then verify that the files, \"<files>\" are displayed on the product editor page and assert with \"<title>\"\n    And edit field, \"<field_to_edit>\" with valueas  \"<edited_value>\" on product editor page\n    And finally close product editor\n    And access part model \"##PART0\" from part models page\n    And verify \"<field_to_edit>\" value to be \"<edited_value>\". title=\"<title2>\"\n\n    Examples:\n      | no_of_files | action_model_type | material_model_input   | route_model_input                                | pm_type     | part_model_name | files                      | file_path                                                       | title                                                                   | field_to_edit | edited_value          | title2                                                                 |\n      | 2           | Generic           | GENERIC_MATERIAL_MODEL | ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY | 3D Geometry | *               | K59YH14L-70A.stl,Crown.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Generic Action Model is created successfully | Reference     | Regression references | Regression Part model with Generic Action Model is edited successfully |\n\n @REGRESSIONG  \n Scenario Outline: Create Generic Type Part Model with Generic Route Model\n    When Create Part Model using \"<no_of_files>\" files for \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    Then click on \"Create\" button\n    And verify that the file, \"<file>\" is displayed on the product details page and assert with \"<title>\"\n\n    Examples:\n      | no_of_files | action_model_type | material_model_input   | route_model_input                                | pm_type | part_model_name | file             | file_path                                                       | title                                                                             |\n      | 2           | Generic           | GENERIC_MATERIAL_MODEL | ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY | Generic | REG_PM          | K59YH14L-70A.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Generic type is created successfully with part name as |\n \n @REGRESSIONG \n Scenario Outline: Create and Edit Generic Type Part Model without file upload\n    When Create Part Model using \"<no_of_files>\" files for \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    Then click on \"Create & Edit\" button\n    And edit field, \"<field_to_edit>\" with valueas  \"<edited_value>\" on product editor page\n    And finally close product editor\n    And access part model \"##PART_MODEL_WITH_AM\" from part models page\n    And verify \"<field_to_edit>\" value to be \"<edited_value>\". title=\"<title>\"\n  \n    Examples:\n      | no_of_files | action_model_type | material_model_input   | route_model_input                                | pm_type | part_model_name | file | file_path                                                       | field_to_edit | edited_value          | title                                                                |\n      | 0           | Generic           | GENERIC_MATERIAL_MODEL | ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY | Generic | REG_PM_2        | *    | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Reference     | Regression references | Regression Part model created without a file and edited successfully |\n\n  @REGRESSIONG \n Scenario Outline: Create Generic Type Part Model without file upload\n    When Create Part Model using \"<no_of_files>\" files for \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    Then click on \"Create\" button\n    And access part model \"##PART_MODEL_WITH_AM\" from part models page\n    And verify \"<part_model_name>\" under section \"Revisions\".\"<title>\"\n\n    Examples:\n      | no_of_files | action_model_type | material_model_input   | route_model_input                                | pm_type | part_model_name | file | file_path                                                       | title                                      |\n      | 0           | Generic           | GENERIC_MATERIAL_MODEL | ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY | Generic | REG_PM_3        | *    | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model created successfully |\n\n   @REGRESSIONG \n Scenario Outline: Create Multiply Part Models\n    When Create Part Model using \"<no_of_files>\" files for \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<files>\" \"<file_path>\"\n    And change the \"<change_attr>\" for \"<file_to_edit>\" on New Part Model(s) screen\n    Then click on \"Create\" button\n    And access part model \"##PART0\" from part models page\n    And verify \"Type\" for \"##PART0\" on Part Details page to be \"<pm_type>\".title=\"<title>\"\n    And access part model \"##PART1\" from part models page\n    And verify \"Type\" for \"##PART1\" on Part Details page to be \"<pm_type>\".title=\"<title>\"\n    And access part model \"##PART2\" from part models page\n    And verify \"Type\" for \"##PART2\" on Part Details page to be \"Generic\".title=\"<title>\"\n    \n\n    Examples:\n      | no_of_files | action_model_type | material_model_input   | route_model_input                                | pm_type     | part_model_name | change_attr | file_to_edit | files                                 | file_path                                                       | title                                                             |\n      | 3           | Generic           | GENERIC_MATERIAL_MODEL | ROUTE_MODEL_WITH_GENERIC_ACTION_MODEL_OUTPUT_KEY | 3D Geometry | *               | Type        | Crown2       | K59YH14L-70A.stl,Crown.stl,Crown2.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Type verified for regression part model with Generic Action Model |",
      "Schedule.feature": "Feature: Functional Workflow: Schedule\n\n#Background:\n#  Given  Read Json_File=\"ui_workflow.json\" to context,Json_Path=\"C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION\"\n\nScenario Outline: Set timestamp for workflow\n  Given Set timestamp\n  Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\nExamples:\n  |json            |json_path|\n  |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario: initial derectives\n  Given Enable all Screenshot\n\n\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  Then login with \"<email>\" \"<password>\"\n\n\n  Examples:\n  |url                         |email                     |password  |\n  |https://qa.staging.oqton.ai/|nehali.chodnekar@oqton.com|3D-systems|\n\n\nScenario Outline: Create Order\n  Given Create a new order with \"<customer_name>\" \"<partmodel_name>\" and \"<qty>\" parts\n  When Verify Order created successfully \"<number_of_line_items_expected>\"\n  And Save Key=\"order_id\" Value=\"!!order_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n  And Get Part IDs on Order Details page\n  Then Save Key=\"part_id\" Value=\"!!part_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n  Then Click on the Part ID\n  And Save action_ids to json\n\n  Examples:\n  |customer_name|partmodel_name                                |qty|number_of_line_items_expected|json            |json_path|\n  |NC Customer  |10227754 - BLOCK,CLAMP B JBOX CAP REMV 6.75AOA|2  |1                            |testScheduleWorkflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Add to Schedule - Order Details Page\n  Given Read Key=\"part_id\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Open the order\n  And Click on Add to schedule\n  And Verify that action is selected\n  Then Select Cell and Assignee\n  And Update Start Time\n  And Click on Save\n  Then Click on the Action\n  Then Verify that schedule has appeared on Action details page\n  Then Save Key=\"part_id\" Value=\"!!part_id\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n#\n  Examples:\n  |customer_name|partmodel_name                                |qty|number_of_line_items_expected|json            |json_path|\n  |NC Customer  |test                                          |10  |1                            |testScheduleWorkflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|",
      "SLM_Workflow.feature": "\nFeature: Complete SLM Workflow\n\n  @SLM\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  Given login with \"<email>\" \"<password>\"\n\n  Examples:\n  |url|email|password|\n  |https://qa.dev.oqton.ai/|vidhi.kandolkar@oqton.com|Oqton123#|\n\n\n @SLM\nScenario Outline: Create material model Powder\n    Given Create Material Model Powder,\"<material_model_name>\" \"<density_input>\" \"<yield_strength_input>\" \"<stiffness_input>\" \"<poisson_ratio_input>\" \"<specific_heat_capacity_input>\" \"<thermal_conductivity_input>\" \"<coefficient_thermal_expansion_input>\" \"<initial_weight_input>\" \"<price_input>\"\n\n     Examples:\n      |material_model_name|density_input|yield_strength_input|stiffness_input|poisson_ratio_input|specific_heat_capacity_input|thermal_conductivity_input|coefficient_thermal_expansion_input|initial_weight_input|price_input|\n      |Material Model POwder using Behave|12|1               |  10             |          0.9         |        1345                    |    2221                      |      11                             |     210|        156|\n\n  @SLM\n  Scenario: Create material Powder\n    Given Create Material Powder\n\n\n  @SLM\n  Scenario Outline: Create Tool Model Build Plate\n    Given Create Tool Model Build Plate,\"<tool_model_name>\" \"<length_val>\" \"<width_val>\" \"<height_val>\"\n\n     Examples:\n      |tool_model_name|length_val|width_val|height_val|\n      |Tool Model Build Plate using Behave|100|190| 150|\n\n  @SLM\n  Scenario:Build Plate\n    Given Create Tool Build Plate\n\n\n\n @SLM\n  Scenario Outline: Create cell model SLM\n    Given Create Cell Model SLM,\"<cell_model_name_generic>\" \"<length_val>\" \"<width_val>\" \"<height_val>\" \"<part_material_model>\" \"<build_plate_model>\"\n\n     Examples:\n      |cell_model_name_generic|length_val|width_val|height_val|part_material_model|build_plate_model|\n      |Cell Model SLM using Behave|100|190| 610|JW Material Model_Powder - 2023-02-06 15:32|JW Tool Model_BuildPlate_Resin_SLA - 2024-06-21 17-28|\n\n",
      "Subcontractor_Create_Generic_Part_Model_Workflow.feature": "Feature: Part Model Creation Worklflow With Subcontractor Route Model\n\n\n  @REGRESSIONS\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n @REGRESSIONS\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n      | url                          | email                             | password  | output_data_key | expected_data_key | title                                         |\n      | https://qa.staging.oqton.ai/ | vidhi.kandolkar+amnovis@oqton.com | Oqton123# | Profile         | Profile           | To check inbox icon on Login page(step1 to 4) |\n\n @REGRESSIONS\n  Scenario Outline: Create Subcontractor\n    When Create Subcontractor,\"<subcontractor_name>\"\n    And Read data and store in dictionary: data=\"<subcontractor_name>\", key=\"REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n       | subcontractor_name       | title                                                     |\n       | Regression Subcontractor | To check Regression Subcontractor is created successfully |\n\n @REGRESSIONS\n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | material_model_name_to_enter      | title                                                             |\n      | Regression Material Model Generic | Regression Material Model of type Generic is created successfully |\n\n   @REGRESSIONS\n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      | type    | material_id | initial_weight | price | file1             | file_path                                                       | file2            | title                                                     |\n      | Generic | M-000       | 50             | 110   | LIST-123_V1.0.pdf | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | SPEC-35_V3.0.pdf | Regression material of type resin is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Action Model Subcontractor\n    When Create Action Model of type Subcontractor,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n      | action_model_name_to_enter            | title                                                         |\n      | Regression Action Model Subcontractor | Regression Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n       | action_model_type | route_model_name                            | material_model                    | action_model_name                     | title                                                                          |\n       | subcontractor     | Route Model with Subcontractor Action Model | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Regression Route model with Subcontractor Action Model is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n       | customer_name       | title                                                |\n       | Regression Customer | To check Regression Customer is created successfully |\n\n@REGRESSIONS\n  Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And verify that the file, \"<file>\" is displayed on the product details page and assert with \"<title>\"\n\n     Examples:\n       | action_model_type | material_model_input              | route_model_input                                      | pm_type | part_model_name       | file             | file_path                                                       | title                                                                         |\n       | Subcontractor     | GENERIC_MATERIAL_MODEL_OUTPUT_KEY | ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY | Generic | Regression Part Model | K59YH14L-70A.stl | C:\\Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION | Regression Part model with Subcontractor Action Model is created successfully |\n",
      "Subcontractor_Workflow.feature": "\nFeature: Subcontractor Workflow\n\n\n  @REGRESSIONS\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary \n    And Hard Failure\n    And Enable all Screenshot\n\n  \n @REGRESSIONS\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for 10\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://qa.staging.oqton.ai/|vidhi.kandolkar+amnovis@oqton.com|Oqton123#|Profile|Profile|To check inbox icon on Login page(step1 to 4)|\n\n\n @REGRESSIONS\n  Scenario Outline: Create Subcontractor\n    When Create Subcontractor,\"<subcontractor_name>\"\n    And Read data and store in dictionary: data=\"<subcontractor_name>\", key=\"REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n      |subcontractor_name|title|\n      |Regression Subcontractor|To check Regression Subcontractor is created successfully|\n\n @REGRESSIONS\n  Scenario Outline: Create Material Model Generic\n    When Create Material Model Generic,\"<material_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<material_model_name_to_enter>\", key=\"GENERIC_MATERIAL_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n     |material_model_name_to_enter|title|\n     |Regression Material Model Generic|Regression Material Model of type Generic is created successfully|\n\n\n   @REGRESSIONS\n  Scenario Outline: Create Material of model Generic\n    Given Create Material of model \"<type>\",\"<material_model_output_key>\",<initial_weight> <price> \"<file1>\" \"<file_path>\" \"<file2>\"\n    And Read data and store in dictionary: data=\"<material_id>\", key=\"GENERIC_MATERIAL_ID\"\n    Then Assert data equals expected: data=\"##GENERIC_MATERIAL_MODEL_OUTPUT_KEY\", expected=\"##GENERIC_MATERIAL_MODEL\". title=\"<title>\"\n\n    Examples:\n      |type|material_model_output_key|material_id|initial_weight|price|file1|file_path|file2|title|\n      |Generic|GENERIC_MATERIAL_MODEL_OUTPUT_KEY|M-000|50|110|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression material of type resin is created successfully|\n\n\n\n@REGRESSIONS\n  Scenario Outline: Create Action Model Subcontractor\n    When Create Action Model of type Subcontractor,\"<action_model_name_to_enter>\"\n    And Read data and store in dictionary: data=\"<action_model_name_to_enter>\", key=\"SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_ACTION_MODEL\". title=\"<title>\"\n\n    Examples:\n     |action_model_name_to_enter|title|\n     |Regression Action Model Subcontractor|Regression Subcontractor Action Model is created successfully|\n\n@REGRESSIONS\n  Scenario Outline: Create Route Model\n    When Create Route Model with \"<action_model_type>\" action model,\"<route_model_name>\" \"<material_model>\" \"<action_model_name>\"\n    And Read data and store in dictionary: data=\"<route_model_name>\", key=\"ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##ROUTE_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|route_model_name|material_model|action_model_name|title|\n      |subcontractor|Route Model with Subcontractor Action Model|GENERIC_MATERIAL_MODEL_OUTPUT_KEY|SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY|Regression Route model with Subcontractor Action Model is created successfully|\n\n\n@REGRESSIONS\n  Scenario Outline: Create customer\n    When Create Customer for regression,\"<customer_name>\"\n    And Read data and store in dictionary: data=\"<customer_name>\", key=\"REGRESSION_CUSTOMER_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##REGRESSION_CUSTOMER_OUTPUT_KEY\", expected=\"##CUSTOMER_NAME\". title=\"<title>\"\n\n     Examples:\n      |customer_name|title|\n      |Regression Customer|To check Regression Customer is created successfully|\n\n\n\n@REGRESSIONS\n  Scenario Outline: Create Part Model\n    When Create Part Model using \"<action_model_type>\" Action Model,\"<material_model_input>\" \"<route_model_input>\" \"<pm_type>\" \"<part_model_name>\" \"<file>\" \"<file_path>\"\n    And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n    Then Assert data equals expected: data=\"##PART_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_AM\". title=\"<title>\"\n\n \n     Examples:\n      |action_model_type|material_model_input|route_model_input|pm_type|part_model_name|file|file_path|title|\n      |Subcontractor|GENERIC_MATERIAL_MODEL_OUTPUT_KEY|ROUTE_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY|3D Geometry|Regression Part Model|K59YH14L-70A.stl|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Regression Part model with Subcontractor Action Model is created successfully|\n\n\n @REGRESSIONS\n  Scenario Outline: Approve Part Model\n    When Edit Part Model with \"<type>\" Action Model and approve,\"<file1>\" \"<file_path>\" \"<file2>\"\n      Then Verifying files are uploaded on Part Model,\"<file1>\"\"<file2>\"\n      Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n      And Read data and store in dictionary: data=\"<part_model_name>\", key=\"PART_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\"\n      Then Assert data equals expected: data=\"##PART_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY\", expected=\"##PART_MODEL_WITH_AM\". title=\"<title>\"\n\n\n    Examples:\n      |type|file1|file_path|file2|part_model_name|status_type|expected_data|title|\n      |Subcontractor|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|Regression Part Model|Approved|Approved|Check if Part model status has been approved|\n\n\n\n @REGRESSIONS \n  Scenario Outline: Create Parts\n    Given Create Parts from Part list page,\"<part_model_name_input>\" <qty> \"<notes>\" \"<file1>\" \"<file_path>\" \"<file2>\" \"<file3>\" \"<file4>\"\n    When Read Part IDs from \"<part_model_name_input>\" details and store\n    And Click on Parts page to view the details\n    Then Read data and store in dictionary: data=\"<action_id>\", key=\"PART_ACTION_ID\"\n\n\n      Examples:\n      |part_model_name_input|qty|notes|file1|file_path|file2|file3|file4|status_type|expected_data|title|action_id|\n      |PART_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY|10|Regression Part Notes|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|File2.docx|Ready To Start|Ready To Start|Check if parts are getting created|A-0|\n\n  @REGRESSIONS \n  Scenario Outline: Create 2 more parts from Part Models\n    Given Create Parts from Part Model details page,<qty> \"<Part_Model_input>\"\n    And Read Part IDs from \"<Part_Model_input>\" details and store\n\n    #Then Verifying Parts created,\"<element_to_find>\" \"<expected_data>\" \"<title>\"\n\n     Examples:\n      |qty|Part_Model_input|\n      |5|PART_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY|\n      |5|PART_MODEL_WITH_SUBCONTRACTOR_ACTION_MODEL_OUTPUT_KEY|\n\n\n\n @REGRESSIONS \n  Scenario Outline: To Start Part Action\n    When Start subcontractor Action,\"<action_id>\" \"<subcontractor_input>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    And  Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n    |action_id|subcontractor_input|status_type|expected_data|title|title|\n    |PART_ACTION_ID|REGRESSION_SUBCONTRACTOR_OUTPUT_KEY|In Progress|In Progress|Check if Part Action status is in In Progress.|Check the subcontractor name on action details page|\n\n\n\n @REGRESSIONS \n  Scenario Outline: To Finish Part Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Part Action status has been Finished.|\n\n\n\n @REGRESSIONS \n Scenario Outline: Create nest from Parts created and approve\n   When Create a nest of two parts\n   And Now Approve the Nest\n   Then View details page of the approved Nest\n   And Read data and store in dictionary: data=\"<nest_action_id>\", key=\"NEST_ACTION_ID_OUTPUT_KEY\"\n\n    Examples:\n    |nest_action_id|\n    |A-00|\n\n\n\n    Scenario Outline: To Start Nest Action\n    When Start subcontractor Action,\"<action_id>\" \"<subcontractor_input>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n    And  Assert data equals expected: data=\"##REGRESSION_SUBCONTRACTOR_OUTPUT_KEY\", expected=\"##SUBCONTRACTOR_NAME\". title=\"<title>\"\n\n     Examples:\n    |action_id|subcontractor_input|status_type|expected_data|title|title|\n    |NEST_ACTION_ID_OUTPUT_KEY|REGRESSION_SUBCONTRACTOR_OUTPUT_KEY|In Progress|In Progress|Check if Nest Action status is in In Progress.|Check the subcontractor name on action details page|\n\n\n    # @REGRESSIONS \n    # Scenario Outline: To Start Nest Action\n    # When Start subcontractor Action,\"<action_id>\" \"<subcontractor_input>\"\n    # Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n    #  Examples:\n    # |action_id|subcontractor_input|status_type|expected_data|title|\n    # |NEST_ACTION_ID_OUTPUT_KEY|REGRESSION_SUBCONTRACTOR_OUTPUT_KEY|Processing|Processing|Check if Nest Action status is in Processing after starting an Action.|\n\n\n\n @REGRESSIONS \n  Scenario Outline: To Finish Nest Action\n    When Finish an Action,\"<file1>\" \"<file2>\" \"<file3>\" \"<file4>\" \"<file_path>\"\n    Then Check status as \"<status_type>\",\"<expected_data>\" \"<title>\"\n\n     Examples:\n    |file1|file2|file3|file4|file_path|status_type|expected_data|title|\n    |LIST-123_V1.0.pdf|SPEC-35_V3.0.pdf|SPEC-35_V3.0.docx|LIST-123_V1.0.pdf|C:\\AUTOMATION\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|Finished|Finished|Check if Nest Action status has been Finished  after finishing an Action.|\n\n",
      "V2sorting.feature": "\nFeature: V2 Sorting\n\n\n  Scenario: Setting a Pre execution\n    Given Set Current time in Dictionary\n    And Hard Failure\n    And Enable all Screenshot\n\n  Scenario Outline: Login with valid credentials\n    Given Go to <url>\n    When login with \"<email>\" \"<password>\"\n    And Wait for \"10\"\n    Then Verifying \"Login\" icon,\"<output_data_key>\" \"<expected_data_key>\" \"<title>\"\n\n\n    Examples:\n    |url|email|password|output_data_key|expected_data_key|title|\n    |https://automation-qa.staging.oqton.ai/|jaiyesh.salgaonkar@oqton.com|3Dsystems#1|Profile|Profile|To check inbox icon on Login page|\n\n\n Scenario Outline: Verify sort options with single field (A-Z & Z-A) layouts\n    Given Go to <url>\n    When Click on Sort button\n   And Click on sort fields button\n   Then field should contain the text \"<field>\" \"<expected_text>\"\n   And Click on sort fields button\n  Then field should contain the text \"<field1>\" \"<expected_text1>\"\n\n    Examples:\n    |url|field|expected_text|field1|expected_text1|\n    |https://automation-qa.staging.oqton.ai/layouts/urn:staging:factoryos:eu-central-1:automation-qa:layout:41c4a347355a699d3ed8b53c7a36e72a   |Repeat|Repeat|Catalog|Catalog|\n\n\n  Scenario Outline: Verify sort options with multiple fields on layouts\n    Given Go to <url>\n    When Click on Sort button\n   And Click on sort button with multiple fields\n   Then field should contain the text \"<field>\" \"<expected_text>\"\n  Then field should contain the text \"<field1>\" \"<expected_text1>\"\n#    Then field should contain the text \"<field2>\" \"<expected_text2>\"\n\n    Examples:\n    |url|field|expected_text|field1|expected_text1|\n    |https://automation-qa.staging.oqton.ai/layouts/urn:staging:factoryos:eu-central-1:automation-qa:layout:41c4a347355a699d3ed8b53c7a36e72a   |Repeat|Repeat|New|New|\n\n",
      "Workflow_1-1.feature": "Feature: Workflow 1-1: UI automation test (Tool Model -> Material Model -> Cell Model)\n\nBackground:\n  Given  Read Json_File=\"ui_workflow.json\" to context,Json_Path=\"C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION\"\n\nScenario Outline: Set timestamp for workflow\n  Given Set timestamp\n  Then Save Key=\"timestamp\" Value=\"!!timestamp\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\nExamples:\n  |json            |json_path|\n  |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario: initial derectives\n  Given Enable all Screenshot\n\n\nScenario Outline: Login with valid credentials\n  Given Go to <url>\n  Then login with \"<email>\" \"<password>\"\n\n\n  Examples:\n  |url                         |email                     |password  |\n  |https://qa.staging.oqton.ai/|nehali.chodnekar@oqton.com|3D-systems|\n\n\nScenario Outline: Create Tool Model - Build Plate, Cutting Tool, Generic\n  When Create Tool Model of type \"<tool_model_type>\",\"<tool_model_name>\"\n  Then Verify Tool Model was created successfully\n  And Save Key=\"<key>\" Value=\"!!model_name\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n  |key                        |tool_model_type|tool_model_name|json            |json_path                                                               |\n  |tool_model_name_BuilPlate  |Build Plate    |#              |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n  |tool_model_name_CuttingTool|Cutting Tool   |#              |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n  |tool_model_name_Generic    |Generic        |#              |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Edit Tool Model\n  Given Read Key=\"tool_model_name_BuilPlate, tool_model_name_CuttingTool, tool_model_name_Generic\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit Tool Model \"<tool_model_name>\" by updating \"<notes>\"\n  Then Verify Tool Model was updated successfully with \"<notes>\" and \"<rev>\"\n\n  Examples:\n  |tool_model_name              |notes                             |rev   |json            |json_path                                                               |\n  |!!tool_model_name_BuilPlate  |Test Build Plate Tool Model Update|Rev. 2|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n  |!!tool_model_name_CuttingTool|Test Cutting Tool Model Update    |Rev. 2|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n  |!!tool_model_name_Generic    |Test Generic Tool Model Update    |Rev. 2|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Edit Tool Model from details - Generic\n  Given Read Key=\"tool_model_name_Generic\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit Tool Model \"<tool_model_name>\" from Tool Model details page by updating \"<notes>\"\n  Then Verify Tool Model was updated successfully with \"<notes>\" and \"<rev>\"\n\n  Examples:\n  |tool_model_name          |notes                                   |rev   |json            |json_path                                                               |\n  |!!tool_model_name_Generic|Test Tool Model Update from details page|Rev. 3|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Duplicate Tool Model - Generic\n  Given Read Key=\"tool_model_name_Generic\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Duplicate Tool Model \"<tool_model_name>\"\n  Then Verify Tool Model \"<tool_model_name>\" was duplicated successfully\n  And Save Key=\"<key>\" Value=\"!!tool_model_name\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n  Examples:\n |key                       |tool_model_name          |json            |json_path                                                               |\n |Duplicated_tool_model_name|!!tool_model_name_Generic|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Obsolete Tool Model - Generic\n  Given Read Key=\"Duplicated_tool_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Obsolete Tool Model \"<tool_model_name>\"\n  Then Verify Tool Model \"<tool_model_name>\" was obsoleted successfully\n\n  Examples:\n |tool_model_name             |json            |json_path                                                               |\n |!!Duplicated_tool_model_name|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Create Tool Model Instance - Generic\n  Given Read Key=\"tool_model_name_Generic\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Create Tool Model Instance \"<tool_model_name>\"\n  Then Verify Tool for \"<tool_model_name>\" was created successfully\n\n  Examples:\n |tool_model_name          |json            |json_path                                                               |\n |!!tool_model_name_Generic|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Create Material Model - Stock, Powder, Resin\n  When Create Material Model of type \"<material_model_type>\",\"<material_model_name>\"\n  Then Verify material Model was created successfully\n  And Save Key=\"<key>\" Value=\"!!model_name\" to Json_File=\"<json>\",Json_Path=\"<json_path>\"\n\n\n  Examples:\n  |key                       |material_model_type|material_model_name|json            |json_path                                                               |\n  |material_model_name_Stock |Stock              |#                  |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n  |material_model_name_Powder|Powder             |#                  |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n  |material_model_name_Resin |Resin              |#                  |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: View Material Model - Resin\n  Given Read Key=\"material_model_name_Resin\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When View Material Model \"<material_model_name>\" on Material list page\n  Then Verify Material Model \"<material_model_name>\" was loaded successfully with \"<rev>\"\n\n  Examples:\n  |material_model_name        |rev   |json            |json_path                                                               |\n  |!!material_model_name_Resin|Rev. 1|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Edit Material Model from details - Resin\n  Given Read Key=\"material_model_name_Resin\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Edit Material Model \"<material_model_name>\" from Material Model details page by updating \"<notes>\"\n  Then Verify Material Model was updated successfully with \"<notes>\" and \"<rev>\"\n\n  Examples:\n  |material_model_name        |notes                                       |rev   |json            |json_path                                                               |\n  |!!material_model_name_Resin|Test Material Model Update from details page|Rev. 2|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Duplicate Material Model - Resin\n  Given Read Key=\"material_model_name_Resin\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Duplicate Material Model \"<material_model_name>\"\n  Then Verify Material Model \"<material_model_name>\" was duplicated successfully\n  Then Save to JSON: \"<key>\", \"material_model_name\" to \"<json>\" \"<json_path>\"\n\n  Examples:\n |key                           |material_model_name         |json            |json_path                                                               |\n |Duplicated_material_model_name|!!material_model_name_Resin|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\n\nScenario Outline: Obsolete Material Model - Resin\n  Given Read Key=\"Duplicated_material_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Obsolete Material Model \"<material_model_name>\"\n  Then Verify Material Model \"<material_model_name>\" was obsoleted successfully\n\n  Examples:\n |material_model_name             |json            |json_path                                                               |\n |!!Duplicated_material_model_name|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Create Material Model Instance\n  Given Read Key=\"material_model_name_Resin\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Create Material Model Instance \"<material_model_name>\"\n  Then Verify Material for \"<material_model_name>\" was created successfully\n\n  Examples:\n |material_model_name         |json            |json_path                                                               |\n |!!material_model_name_Resin|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Create Cell Model - Generic, Inspection\n  When Create Cell Model of type \"<cell_model_type>\",\"<cell_model_name>\"\n  Then Verify cell Model was created successfully\n  Then Save to JSON: \"<key>\", \"model_name\" to \"<json>\" \"<json_path>\"\n\n  Examples:\n  |key                       |cell_model_type|cell_model_name|json            |json_path                                                               |\n  |cell_model_name_Generic   |Generic        |#              |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n  |cell_model_name_Inspection|Inspection     |#              |ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: View Cell Model - Resin\n  Given Read Key=\"cell_model_name_Generic\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When View Cell Model \"<cell_model_name>\" on Cell list page\n  Then Verify Cell Model \"<cell_model_name>\" was loaded successfully with \"<rev>\"\n\n  Examples:\n  |cell_model_name          |rev   |json            |json_path                                                               |\n  |!!cell_model_name_Generic|Rev. 1|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Edit Cell Model from details - Generic\n  When Edit Cell Model \"<cell_model_name>\" from Cell Model details page by updating \"<notes>\"\n  Then Verify Cell Model was updated successfully with \"<notes>\" and \"<rev>\"\n\n  Examples:\n  |cell_model_name          |notes                                   |rev   |json            |json_path                                                               |\n  |!!cell_model_name_Generic|Test Cell Model Update from details page|Rev. 2|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\n Scenario Outline: Duplicate Cell Model - Generic\n  Given Read Key=\"cell_model_name_Generic\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Duplicate Cell Model \"<cell_model_name>\"\n  Then Verify Cell Model \"<cell_model_name>\" was duplicated successfully\n  Then Save to JSON: \"<key>\", \"cell_model_name\" to \"<json>\" \"<json_path>\"\n\n  Examples:\n |key                       |cell_model_name          |json            |json_path                                                               |\n |Duplicated_cell_model_name|!!cell_model_name_Generic|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Obsolete Cell Model - Generic\n  Given Read Key=\"Duplicated_cell_model_name\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Obsolete Cell Model \"<cell_model_name>\"\n  Then Verify Cell Model \"<cell_model_name>\" was obsoleted successfully\n\n  Examples:\n |cell_model_name             |json            |json_path                                                               |\n |!!Duplicated_cell_model_name|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|\n\n\nScenario Outline: Create Cell Model Instance - Generic\n  Given Read Key=\"cell_model_name_Generic\" from Json_File=\"<json>\" to context,Json_Path=\"<json_path>\"\n  When Create Cell Model Instance \"<cell_model_name>\"\n  Then Verify Cell for \"<cell_model_name>\" was created successfully\n\n  Examples:\n |cell_model_name          |json            |json_path                                                               |\n |!!cell_model_name_Generic|ui_workflow.json|C:\\Oqton_QA_Automation\\QA_Automation_tool\\automation\\src\\data\\REGRESSION|"
  },
  "SDK_Testing": {
      "stratasys.feature": "\n\nFeature: Workflow DMC\n\n    Scenario Outline: IOT Setup\n        Given I set the screenshot flag to False\n            And IOT Gateway is \"<gateway>\"\n            And the GraphQL Service Port is \"<graphql_port>\"\n            And the File Upload Service Port is \"<file_upload_port>\"\n            And I set the device to \"<device>\"\n            And I set the plant to \"<plant>\"\n    Examples:\n        | gateway      | graphql_port | file_upload_port | plant       | device            |\n        | 10.70.31.236 | 4000         | 5558             | edgeoffline | 913004-f370D11111 |\n\n    Scenario Outline: Listening to Subscriptions\n        Given I set the function to \"<function>\"\n            And I set the mask to <mask>\n        Then I subscribe\n    Examples:\n        | function              | mask                                                                                      |\n        | notifyAck             | [\"msg_id\", \"timestamp\", \"request_sid\", \"job\", \"file_id\", \"error\"]                         |\n        | notifyCommandExecuted | [\"msg_id\", \"timestamp\", \"request_sid\", \"success\", \"method\", \"message\", \"job_id\", \"error\"] |\n\n        Scenario Outline: Upload Files\n            Given I upload the file \"<filename>\" from \"<location>\"\n            Then the file \"<filename>\" should be uploaded successfully\n        Examples:\n            | filename                      | location |\n            | 'The Box F370 PC-ABS T14.cmb' | None     |\n\n    Scenario Outline: job submission\n        Given I set the function to \"<function>\"\n            And I set the mask to <mask>\n        Then I submit job\n    Examples:\n        | function | mask                             |\n        | JobQueue | [\"msg_id\", \"timestamp\", \"error\"] |\n\n\n        Scenario: Closing\n            Given closing subscription\n\n\n"
  }
}