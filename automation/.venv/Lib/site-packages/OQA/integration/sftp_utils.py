import paramiko
import logging
from ..utils import utils
from .. import __exe_logger
import csv

#logging.basicConfig(level=logging.DEBUG)
global ssh
global sftp

def get_ssh():
    if ssh == None:
        __exe_logger("SSH connection not established")
        raise("SSH connection not established")
    return ssh

def set_ssh(ssh_obj):
    global ssh
    ssh = ssh_obj
    
def get_sftp():
    if sftp == None:
        __exe_logger("SFTP connection not established")
        raise("SFTP connection not established")
    return sftp

def set_sftp(sftp_obj):
    global sftp
    sftp = sftp_obj

def connect_to_sftp_server(sftp_hostname, sftp_port, sftp_username, key_filename):
    
    hostname = sftp_hostname
    port = int(sftp_port)
    username = sftp_username
    pam_file_path = key_filename
    
    """Connect to the SFTP server and return the SFTP client and SSH client."""
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(hostname, port, username, key_filename=pam_file_path)
        sftp = ssh.open_sftp()
        __exe_logger.info("\n---- Connection successfully established to sftp server ----\n")
        set_ssh(ssh)
        set_sftp(sftp)
        return sftp, ssh
    except Exception as e:
        __exe_logger.info(f"---- Failed to connect: {e} ----")
        set_ssh(None)
        set_sftp(None)
        return None, None
    
def close_sftp():
    """ Close SFTP and SSH connections"""
    if sftp:
        sftp.close()
    if ssh:
        ssh.close()
    __exe_logger.info("---- Disconnected from the SFTP server. ----\n")
    
    
def create_dir(folder_name):
    """Create a folder in the SFTP server."""
    if sftp:
        try:
            sftp.mkdir(folder_name)
            print(f"Folder '{folder_name}' created successfully.")
        except Exception as e:
            print(f"Failed to create folder: {e}")
    else:
        print("SFTP connection not established.")
        
        
def create_dir_at_location(dest_location, directory_key):
    if sftp:
        try:
            sftp.chdir(dest_location)
            __exe_logger.info(f"\n---- Navigated to folder '{dest_location}' successfully. ----\n")
            timestamp = utils.getDictionary("Current Time")
            sanitized_ts = utils.sanitize_string(timestamp)
            sanitized_ts= sanitized_ts.replace("_", "").replace(" ", "").replace("-", "")
            utils.setDictionary(directory_key,sanitized_ts)
            __exe_logger.info(f"New folder name will be {sanitized_ts}")
            create_dir(sanitized_ts)
            
        except Exception as e:
            __exe_logger.info(f"Failed to create folder: {e}")
    else:
        __exe_logger.info("SFTP connection not established.")
 
        
def list_all_files():
    """ List all files under current directory """
    if sftp:
        try:
            __exe_logger.info(f"---- Listing content from the current directory, {sftp.getcwd()} ----\n")
            files = sftp.listdir('.')
            if files:
                for filename in files:
                    __exe_logger.info(filename)
            else:
                __exe_logger.info("The current location is empty.")
            __exe_logger.info(f"\n---- Finished listing content from the current directory, {sftp.getcwd()} ----\n")
        except Exception as e:
            __exe_logger.info(f"Failed to list files: {e}")
    else:
        __exe_logger.info("SFTP connection not established.")
 
        
def switch_to_dir(location):
    """ Function to change directory to specified location on the SFTP server """
    try:
        sftp.chdir(location)
        __exe_logger.info(f"Switched to {sftp.getcwd()}")
        
    except Exception as e:
        __exe_logger.info(f"Failed to access {location}: {e}")

        
def copy_file_to_cwd(local_file_path,file_name):
    """Upload a file from the local system to the current location on the SFTP server."""
    sftp.put(local_file_path, sftp.getcwd()+"/"+file_name)
    __exe_logger.info(f"File '{file_name}' uploaded to '{sftp.getcwd()}' successfully.\n")
 
    
def navigate_one_level_up():
    """Navigate back one level up from the current directory on the SFTP server."""
    if sftp:
        try:
            sftp.chdir('..')
            __exe_logger.info(f"Navigated back to {sftp.getcwd()}\n")
        except Exception as e:
            __exe_logger.info(f"Failed to navigate to the root directory: {e}")
    else:
        __exe_logger.info("SFTP connection not established.\n") 
        
def check_folder_exists(folder_name):
    """Check if a folder exists in the current working directory on the SFTP server."""
    try:
        sftp.stat(folder_name)
        print(f"Folder '{folder_name}' exists.")
        return True
    except FileNotFoundError:
        print(f"Folder '{folder_name}' does not exist.")
        return False
    except Exception as e:
        print(f"Failed to check folder: {e}")
        return False
    
    