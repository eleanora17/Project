from .utils  import graphql_formatter
from gql import Client, gql
from gql.transport.websockets import WebsocketsTransport
from gql.transport.aiohttp import AIOHTTPTransport
from . import data_append, get_token


global __client
__client = None


def set_graphql_client(url:str,socket:bool=False):
    global __client
    __client =get_graphql_client(url,socket)


def get_graphql_client(url:str=None,socket:bool=False):
    global __client
    client=__client
    token=get_token()
    if url:
        headers=None
        if token:
            headers={
                "authorization":f"Bearer {token}"
            }
        if socket:
            transport=WebsocketsTransport(url,headers)
        else:
            transport = AIOHTTPTransport(url,headers)

        client = Client(transport=transport, fetch_schema_from_transport=True)


    return client


def ___graphQLquery(method:str,function_name:str, required_data:list,params:dict=None, url=None):
    query,variables=graphql_formatter.generate_query(method,function_name,required_data,params)
    res= get_graphql_client(url).execute(gql(query),variable_values=variables)
    data_append(f"{get_graphql_client().transport.url}-{function_name}",res)
    return res


r'''
Used for Query graphql methods
function_name: Name of the graphql method to invoke
mask: Data that needs to returned
params: parameters for the function.[optional]
params structure
{
 [param_name]:{
    type:[value_type],
    variable:[value]
 }
}
url: graphql url.[optional](Takes global url if not passed).
timeout: api timeout
'''
def get(function_name:str,mask:list, params:dict=None,url:str=None ):
    return ___graphQLquery("query",function_name,mask,params,url)


r'''
Used for Mutation graphql methods
function_name: Name of the graphql method to invoke
mask: Data that needs to returned
params: parameters for the function.[optional]
params structure
{
 [param_name]:{
    type:[value_type],
    variable:[value]
 }
}
url: graphql url.[optional](Takes global url if not passed).
timeout: api timeout
'''
def post(function_name:str, mask:list,params:dict,  url:str=None ):
    return ___graphQLquery("mutation",function_name,mask,params,url)


r'''
Used for Subscription graphql methods
function_name: Name of the graphql method to invoke
mask: Data that needs to returned
params: parameters for the function.[optional]
params structure
{
 [param_name]:{
    type:[value_type],
    variable:[value]
 }
}
url: graphql url.[optional](Takes global url if not passed).
timeout: api timeout
'''
def subscribe(function_name:str, mask:list,params:dict=None, url:str=None ,):
    query,variables=graphql_formatter.generate_query("subscription",function_name,mask,params)
    return get_graphql_client(url,True).subscribe(gql(query),variable_values=variables)


r'''
query:Raw graphql query/mutation
variables: param values
'''
def raw_graphql(query:str,variables:dict,url:str=None):
    res= get_graphql_client(url).execute(query,variable_values=variables)
    data_append(f"{get_graphql_client().transport.url}",{
        "data":res,
        "raw_query":query
    })
    return res


r'''
query:Raw graphql subscription
variables: param values
'''
def raw_subscribe(query:str,variables:dict,url:str=None):
    return  get_graphql_client(url,True).subscribe(query,variable_values=variables)
