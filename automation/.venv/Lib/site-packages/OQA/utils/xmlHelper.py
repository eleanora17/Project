import os
import xml.etree.ElementTree as ET
import json
from OQA.utils import utils
import datetime

def __join_filepath(filename: str = "", location: str = "", save: bool = False):
    filepath = os.path.join(location, filename)
    if location == "":
        from .. import __config

        if save:
            filepath = os.path.join(__config["testFolder"], filename)
        else:
            location = __config["dataSpace"]
            filepath = utils.findDataPath(file_name=filename, user_path=location)
        return filepath
    else: 
        if save:
            filepath = os.path.join(location, filename)
            return filepath
        elif os.path.exists(filepath):
            return filepath
    
    raise FileNotFoundError(f"filename:{filename}, looking at:{filepath}")

def read_xml_file(filename: str, location: str = ""):
    try:
        filepath = __join_filepath(filename, location)
        try:
            tree = ET.parse(filepath)
            return tree.getroot()
        except (OSError, ET.ParseError) as e:
            raise ValueError(f"Error reading XML file: {e}")
        
    except ValueError:
        raise FileNotFoundError(f"filename:{filename} not Found in config.")

def read_xml_data(keys: str, filename: str, location: str = ""):
    root = read_xml_file(filename, location)
    data = {key.strip(): root.find(key.strip()).text for key in keys.split(",") if root.find(key.strip()) is not None}
    return data

def save_as_xml_file(data: dict, filename: str = "", location: str = ""):
    if filename == "":
        filename = "outputXml_" + str(datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S")) + ".xml"

    filepath = __join_filepath(filename, location, save=True)

    root = ET.Element("root")
    for key, value in data.items():
        child = ET.SubElement(root, key)
        child.text = str(value)

    try:
        tree = ET.ElementTree(root)
        tree.write(filepath, xml_declaration=True, encoding='utf-8')
        print("Data saved in", filepath)
    except IOError as e:
        print(f"Error saving file: {e}")

def edit_xml_file(key, value, filename: str, location: str = ""):
    filepath = __join_filepath(filename, location, save=True)

    try:
        root = read_xml_file(filename, location)

        if value is not None:
            if key is not None:
                element = root.find(key)
                if element is not None:
                    element.text = str(value)
                else:
                    new_element = ET.SubElement(root, key)
                    new_element.text = str(value)
            else:
                print("Cannot update XML without key")
        else:
            print("Cannot update XML without value")

        tree = ET.ElementTree(root)
        tree.write(filepath, xml_declaration=True, encoding='utf-8')

        print("Data updated & saved in", filepath)

    except Exception as e:
        print(e)

# def xml_to_json(filename: str, location: str = ""):
#     root = read_xml_file(filename, location)
#     print(root)
#     def elem_to_dict(elem):
#         # Create a dictionary from the XML element
#         d = {}
#         for child in elem:
#             d[child.tag] = elem_to_dict(child) if len(child) > 0 else child.text.strip()
#         return d

#     json_data = elem_to_dict(root)
#     return json.dumps(json_data, indent=4)

# Example usage:
# json_output = xml_to_json("example.xml")
# print(json_output)
