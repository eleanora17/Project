import utils.imageDiffer as imgDiff
import assertions.__base as __base
import assertions.globalControls as globalControls
from .. import __config

# ImageDiff returns this dict
#    {
#       "error"
#       "outputResolution"
#       "expectedResolution"
#       "totalPixels"
#       "totalDifferentPixels"
#       "percentageOfDifferentPixels"
#     }

config = __config   #getConfig()
testFolderPath = config["testFolder"]

def assertImageEquals(outputPath, expectedPath, tolerance, title , hardFaliure = None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure
    
    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket
    
    diffDetails = imgDiff.ImageDiff(outputPath,expectedPath,testFolderPath)

    if diffDetails["error"]: 
        return __base.raiseAssertionError(title,"An error occured when comparing images. Resolutions do not match. Output:{output}, Expected:{expected}", 
                                          diffDetails["outputResolution"],diffDetails["expectedResolution"],hardFaliure, 
                                          createJiraTicket,outputFilePath=outputPath, expectedFilePath=expectedPath)

    percentageOfDiffPixels = diffDetails["percentageOfDifferentPixels"]

    if percentageOfDiffPixels > tolerance:
      return __base.raiseAssertionError(title, "Percentage of different pixels ({output}%) exceeds tolerance ({expected}%)", 
                                        round(percentageOfDiffPixels,2), tolerance, hardFaliure, 
                                        createJiraTicket, diffDetails["filePath"],
                                        outputFilePath=outputPath, expectedFilePath=expectedPath)
    
    __base.logSuccess(title,"Difference is below tolerance. Difference:{output}% tolerance:{expected}%",
                    round(percentageOfDiffPixels,2),tolerance,hardFaliure,diffDetails["filePath"],
                    outputFilePath=outputPath, expectedFilePath=expectedPath)
    return True