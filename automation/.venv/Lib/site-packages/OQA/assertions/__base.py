from logging import CRITICAL, WARNING, INFO
import sys, datetime, atexit, os
import atexit

from OQA.core import cactions
from OQA.common.logger import LogData, assertionLoggerOnExit, logToAssertionFile
from OQA.common import initialize
from OQA.assertions import globalControls
from OQA.utils import JiraHelper
from .. import __config

__aggregateFaliures = []

atexit.register(assertionLoggerOnExit)


def handleHardFaliure(__logData,hardFaliure):
    if hardFaliure:
        logToAssertionFile(__logData, logType=CRITICAL, noOfFramesBack=3)
        logToAssertionFile(LogData("","Stopped","Execution stopped due to Assertion Faliure","","",True),logType=INFO, noOfFramesBack=3)
        sys.exit(0)
    else: 
        logToAssertionFile(__logData, logType=WARNING, noOfFramesBack=3)
        return False

def raiseNonMatchingTypesError(title,output,expected,hardFaliure):
    remark = f"Assertion Failed. Type Mismatch. Got type {type(output)} and type {type(expected)}"
    __logData = LogData(title,"Assertion Failed",remark,output,expected, hardFaliure)

    if initialize.driver :
       __logData.screenshotPath = cactions.takeScreenshot()

    return handleHardFaliure(__logData,hardFaliure)
    

def raiseAssertionError(title,remark,output,expected,hardFaliure,createJiraTicket, diffFilePath="", outputFilePath="", expectedFilePath=""):

    remarkForJira = remark.format(output=output, expected=expected)
    JiraConfig = __config["Jira"] #getConfig()["Jira"]
    JiraIssueType = JiraHelper.Issue_Types(JiraConfig["issueType"])

    __logData = LogData(title,"Assertion Failed",remark,output,expected, hardFaliure,diffFilePath=diffFilePath,outputFilePath=outputFilePath,expectedFilePath=expectedFilePath)

    if initialize.driver : 
      __logData.screenshotPath = cactions.takeScreenshot()

    if(createJiraTicket):
        if(globalControls.__JiraTicketCreateMode == "perFaliure"):
            JiraHelper.createJiraTicket(f"{__logData.status}: {title or remarkForJira}",JiraIssueType.value,description=remarkForJira)
        
        if(globalControls.__JiraTicketCreateMode == "aggregateFaliures"):
            __aggregateFaliures.append(__logData)

    return handleHardFaliure(__logData,hardFaliure)
    
def logSuccess(title,remark,output,expected,hardFaliure, diffFilePath="", outputFilePath="", expectedFilePath=""):

    __logData = LogData(title,"Success",remark,output,expected, hardFaliure, diffFilePath=diffFilePath, outputFilePath=outputFilePath, expectedFilePath=expectedFilePath)

    if initialize.driver and globalControls.__ScreenShotOnSuccess: 
        __logData.screenshotPath = cactions.takeScreenshot()

    logToAssertionFile(__logData,INFO, noOfFramesBack=3)


def onExit():

    if len(__aggregateFaliures):
        jiraTitle = f"Assertions Failed ({str(datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S"))})"
        description = "The following assertions have failed:\n"
        config = __config  #getConfig()
        test_folder_path = config["testFolder"]
        JiraIssueType = JiraHelper.Issue_Types(config["Jira"]["issueType"])

        for logData in __aggregateFaliures:
            remark = f":{logData.remark}" if logData.remark!="" else f""
            description += f"{logData.title} {remark}\n"

        filePaths = list(map( lambda file: test_folder_path + f"\\{file}" , os.listdir(test_folder_path)))

        JiraHelper.createJiraTicket(jiraTitle, JiraIssueType.value, description=description, attachmentPaths=filePaths)

atexit.register(onExit)

    