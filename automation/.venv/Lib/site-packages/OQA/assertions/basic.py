from ..assertions import __base as __base
from ..assertions import globalControls

# Assertion Functions

## All assertion functions have a check on whether parameter hardFaliure is None
## This is to ensure that globally set ___HardFaliure is used in case hardFaliure is not specified
## this is to allow both global control and on a per assertion basis over hard falling.

remarks = {
    "assertValueEquals": "{output} is not equal to {expected}",
    "assertValueNotEquals": "{output} is equal to {expected}",
    "assertIsTrue": "Expected True, got False",
    "assertIsFalse": "Expected False, got True",
    "assertIsNull": "Expected Null, got {output}",
    "assertIsNotNull": "Expected not Null, got Null"
}

def assertValueEquals(output,expected, title ,hardFaliure = None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure
    
    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket

    if not isinstance(output,type(expected)): return __base.raiseNonMatchingTypesError(title,output,expected,hardFaliure)
    if output!=expected: return __base.raiseAssertionError(title ,remarks["assertValueEquals"],output,expected, hardFaliure, createJiraTicket) 

    __base.logSuccess(title,"",output,expected,hardFaliure)
    return True

def assertValueNotEquals(output,expected, title , hardFaliure = None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure

    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket

    if not isinstance(output,type(expected)): return __base.raiseNonMatchingTypesError(title,output,expected,hardFaliure)
    if output==expected: return __base.raiseAssertionError(title ,remarks["assertValueNotEquals"],output,expected, hardFaliure,createJiraTicket)

    __base.logSuccess(title,"",output,expected,hardFaliure)
    return True

def assertIsTrue(output:bool, title, hardFaliure =  None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure

    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket
        
    if not isinstance(output, bool): return __base.raiseNonMatchingTypesError(title,output,True,hardFaliure)
    if output != True: return __base.raiseAssertionError(title ,remarks["assertIsTrue"],output,True, hardFaliure, createJiraTicket)

    __base.logSuccess(title,"",output,True,hardFaliure)
    return True

def assertIsFalse(output:bool, title , hardFaliure = None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure

    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket

    if not isinstance(output, bool): return __base.raiseNonMatchingTypesError(title,output,False,hardFaliure)
    if output != False: return __base.raiseAssertionError(title ,remarks["assertIsFalse"],output,False, hardFaliure, createJiraTicket)

    __base.logSuccess(title,"",output,False,hardFaliure)
    return True

def assertIsNull(output, title , hardFaliure = None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure

    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket

    if output is not None: return __base.raiseAssertionError(title ,remarks["assertIsNull"],output,None, hardFaliure, createJiraTicket)

    __base.logSuccess(title,"",output,None,hardFaliure)
    return True

def assertIsNotNull(output, title, hardFaliure = None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure

    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket

    if output is None: return __base.raiseAssertionError(title ,remarks["assertIsNotNull"],output,None, hardFaliure, createJiraTicket)

    __base.logSuccess(title,"",output,None,hardFaliure)
    return True

def fail(title, hardFaliure = None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure

    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket

    return __base.raiseAssertionError(title,"", None ,None ,hardFaliure, createJiraTicket)

def assertTrueIfValueWithin(min_expected:float, max_expected:float, actual:float, title, remark = "", hardFaliure =  None, createJiraTicket=None):
    if hardFaliure is None:
        hardFaliure = globalControls.__HardFaliure

    if createJiraTicket is None:
        createJiraTicket = globalControls.__createJiraTicket
        
    if min_expected <= actual <= max_expected:
        output = True
    else :
        output = False
        
    if not isinstance(output, bool): return __base.raiseNonMatchingTypesError(title,output,True,hardFaliure)
    if output != True: return __base.raiseAssertionError(title ,remark,output,True, hardFaliure, createJiraTicket)

    __base.logSuccess(title,remark,output,True,hardFaliure)
    return True