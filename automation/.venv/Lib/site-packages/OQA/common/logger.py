import sys,os, inspect
import logging
import json
from traceback import format_tb
# from .. import __config


config = None
testFolderPath = None
consoleLogFileFP = None
# need to have different types of loggers
# setting them as none so that we don't create files when we have no assertions or errors
# executionLogger = __createLogger("execution")
__assertionLogger = None
__errorLogger = None
__assertionLogger_json = None


def __init_logger(__config):
  global config
  config = __config
  global testFolderPath
  testFolderPath = config["testFolder"]
  
  dumpOutputsToFile = config.get("dumpConsoleToFile")
  global consoleLogFileFP

  if(dumpOutputsToFile):
    consoleLogFileFP=open(os.path.normpath(f"{testFolderPath}/console.log"),"w")
    consoleErrorLogFileFP=open(os.path.normpath(f"{testFolderPath}/console_err.log"),"w")
    sys.stdout = consoleLogFileFP
    sys.stderr = consoleErrorLogFileFP


class JSONFormatter(logging.Formatter):
  def format(self, record):
    return record.getMessage()+","


def __createLogger(loggerName="test",logLevel=logging.DEBUG, extension="log"):
    global testFolderPath
    logFilePath = os.path.normpath(f"{testFolderPath}/{loggerName}.{extension}")
    # print(logFilePath)
    # create the logger or gets existing reference
    logger = logging.getLogger(loggerName)
    logger.setLevel(logLevel)
    # create console handler or file handler and set the log level

    if not len(logger.handlers):
      consoleHandler = logging.StreamHandler()
      fileHandler = logging.FileHandler(logFilePath)
      if loggerName == "errors":
        formatter_console = logging.Formatter("\033[91m %(asctime)s - %(levelname)s :- %(message)s \033[0m") if extension!="json" else JSONFormatter()
        formatter_log = logging.Formatter("%(asctime)s - %(levelname)s :- %(message)s") if extension!="json" else JSONFormatter()
      else:
        formatter_console = logging.Formatter("%(asctime)s - %(levelname)s :- %(message)s") if extension!="json" else JSONFormatter()
        formatter_log = logging.Formatter("%(asctime)s - %(levelname)s :- %(message)s") if extension!="json" else JSONFormatter()
         

      consoleHandler.setFormatter(formatter_console)
      fileHandler.setFormatter(formatter_log)

      if extension != "json":
         logger.addHandler(consoleHandler)
      
      logger.addHandler(fileHandler)

    return logger


#This function will handle all uncaught errors
def ___exceptHook(exctype, value, tb):
  global __errorLogger
  if __errorLogger is None:
     __errorLogger = __createLogger("errors")
  messageForLogFile = ""

  for val in format_tb(tb):
    messageForLogFile += "\n" + val.split("\n")[0].strip()
    
  messageForLogFile += "\n"
  messageForLogFile +=  exctype.__name__+":"+str(value) if str(value) else exctype.__name__

  __errorLogger.critical(messageForLogFile)
    
sys.excepthook = ___exceptHook


class LogData():
  def __init__(self, title, status, remark,output, expected ,hardFaliure:bool, screenshotPath="", diffFilePath="", outputFilePath="", expectedFilePath=""):
    self.title = title
    self.status = status
    self.hardFaliure = hardFaliure
    self.remark = remark
    self.output = output
    self.expected = expected
    self.screenshotPath = screenshotPath
    self.diffFilePath = diffFilePath
    self.outputFilePath = outputFilePath
    self.expectedFilePath = expectedFilePath

  def dumpAsJSON(self):
     return json.dumps(self.__dict__)


def logToAssertionFile(assertionDetails:LogData,logType=logging.INFO ,noOfFramesBack=0):
    global __assertionLogger
    global __assertionLogger_json

    if __assertionLogger is None:
       __assertionLogger = __createLogger("assertions")

    if __assertionLogger_json is None:
      __assertionLogger_json = __createLogger("assertions_json", extension="json")
    
    frame = inspect.currentframe()

    # going back the required no of frames in order to get the name of the original calling file
    # and not utility file names
    for i in range(0,noOfFramesBack):
        frame = frame.f_back

    #for human readble logs
    traceBack = inspect.getframeinfo(frame)
    filename = traceBack.filename
    line_no = traceBack.lineno

    ad_output = assertionDetails.output
    ad_expected = assertionDetails.expected

    titleForLog = f" {assertionDetails.title}, " if assertionDetails.title!="" else ""
    remarkForLog = f", ({assertionDetails.remark.format(output=ad_output, expected=ad_expected)})" if assertionDetails.remark != "" else ""

    assertionDetails.remark = assertionDetails.remark.format(output=ad_output, expected=ad_expected)

    # __assertionLogger.log(logType, f"{filename}, line {line_no}:{titleForLog} {assertionDetails.status}{remarkForLog}")
    # print(assertionDetails.status)
    if assertionDetails.status == "Success":
      log_message = f"{filename}, line {line_no}:{titleForLog} \033[92m {assertionDetails.status}{remarkForLog} \033[0m"
    elif assertionDetails.status =="Assertion Failed":
      log_message = f"{filename}, line {line_no}:{titleForLog} \033[91m {assertionDetails.status}{remarkForLog} \033[0m"
    else:
      log_message = f"{filename}, line {line_no}:{titleForLog} {assertionDetails.status}{remarkForLog}"


    __assertionLogger.log(logType, log_message)
    __assertionLogger_json.log(logType, assertionDetails.dumpAsJSON())


def assertionLoggerOnExit():
    
    #Formatting the JSON log to the right format before exiting
    try:
      fp=open(os.path.normpath(f"{testFolderPath}/assertions_json.json"), "r+")
    except:
       return

    lines = fp.readlines()
    last_index = len(lines)-1
    lines[0] = "[" + lines[0]
    lines[last_index] = lines[last_index][:-2] + "]"

    fp.seek(0)
    fp.writelines(lines)
    fp.close()

    #closing the console long file that was opened earlier on the global level
    if consoleLogFileFP:
      consoleLogFileFP.close()