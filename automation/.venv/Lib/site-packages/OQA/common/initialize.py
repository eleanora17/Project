from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options as ChromeOption

from selenium.webdriver.firefox.service import Service as FirefoxService
from webdriver_manager.firefox import GeckoDriverManager

from webdriver_manager.microsoft import EdgeChromiumDriverManager
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import os

from OQA import __config

# Initialize driver to None at the module level
driver = None
__filepath = os.path.join(__config['testFolder'],"browser_logs.log")


def setDriver(browser):
    global driver
    prefs = {
        "download.default_directory" : __config['testFolder'],
        "profile.default_content_setting_values.automatic_downloads": 1
    }

    match browser:
        case 'chrome':
            # Create an instance of Options
            chrome_options = ChromeOption()
            chrome_options.page_load_strategy = 'normal'
            chrome_options.add_argument("--start-maximized")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_experimental_option("prefs", prefs)
            # chrome_options.add_experimental_option("debuggerAddress","127.0.0.1:9222")
            chrome_options.enable_bidi=True
            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install(), log_output=__filepath, service_args=['--log', 'debug']), options=chrome_options)
        case 'firefox':
            options = webdriver.FirefoxOptions()
            options.page_load_strategy = 'normal'
            # needed for auto downloading multiple files without pop up alert
            options.set_preference("browser.download.dir", __config['testFolder'])
            options.set_preference("browser.download.folderList", 2)
            options.set_preference("browser.download.useDownloadDir", True)
            options.set_preference("browser.download.manager.showWhenStarting", False)
            options.set_preference("pdfjs.disabled", True)
            options.set_preference("devtools.console.stdout.content", True)
            options.set_preference("devtools.console.stderr.content", True)  
            options.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/octet-stream,application/pdf,application/zip,application/x-rar-compressed,application/x-msdownload")  # Auto-save common files
            options.set_preference("browser.link.open_newwindow", 1)
            options.set_preference("network.protocol-handler.external.dddxpertlauncher", True)
            options.set_preference("network.protocol-handler.warn-external.dddxpertlauncher", False)
            options.enable_bidi = True
            driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install(), log_output=__filepath, service_args=['--log', 'debug']), options=options)

        case 'edge':
            options = Options()
            options.add_experimental_option("detach", True)# This option is needed else the edge browser closes automatically after execution
            options.page_load_strategy = 'normal'
            options.add_experimental_option("prefs", prefs)
            options.add_argument("--disable-popup-blocking")
            options.enable_bidi = True
            driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install(), log_output=__filepath, service_args=['--log', 'debug']), options=options)
        case default:
            print("Invalid browser option")


def getDriver(browser):
    global driver    
    if driver is None:
        setDriver(browser)
    return driver


def tearDown():
    global driver
    if driver is not None:
        driver.quit()
        driver = None