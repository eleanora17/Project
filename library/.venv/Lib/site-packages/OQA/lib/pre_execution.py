import os
import re
import json
import sys
from datetime import datetime, timezone


from ..lib import speedTesting, metadata_helper
from ..utils import utils
from ..common import logger
# from ..core import cactions

__currentTime = None

def getConfig(workspace_path=''):
    conf_json = __read_config_file(workspace_path)
    test_execution_folder_name = __setTestExecutionFolder(conf_json)
    cnf = __setting_global_config(test_execution_folder_name, conf_json)
    return cnf

def __getCurrentTimestemp():
    global __currentTime
    if __currentTime == None:
        __currentTime = utils.getCurrentDateTime(delay_min=0)
    return __currentTime

def getLongDate():
    date_time_str = "".join(__getCurrentTimestemp())
    date_time_obj = datetime.strptime(date_time_str, '%Y/%m/%d %H:%M:%S.%f')
    long_date_str = date_time_obj.strftime('%A, %B %d, %Y %I:%M:%S.%f %p')
    return long_date_str


def __setTestExecutionFolder(config=''):
    try:
        conf_json = config
        if "workspace" in conf_json:
            # print("Key present")
            if conf_json["workspace"] != '':
                curr_date, curr_time = __getCurrentTimestemp()
                folder_suffix = f"{str(curr_date).replace('/', '').strip()}{str(re.sub(r'[:.]', "", curr_time)).strip()}"
                test_execution_folder_name = str(conf_json["workspace"]) + os.sep + f"Test_{folder_suffix}"
                normalised_workspace_path = utils.normalize_path(test_execution_folder_name)
                utils.create_folder(normalised_workspace_path)
                # print("Test execution folder is is {0}".format(test_execution_folder_name))
                return normalised_workspace_path
            else:
                raise ValueError()
        else:
            raise KeyError()
    except (ValueError, KeyError) as e:
        print("Exception occurred initializing test {0}".format(e))
        exit(str(e))


def __read_config_file(workspace_path):
    try:
        config_file_path = utils.findDataPath("config.json", user_path=workspace_path)
        # print(config_file_path)
        # conf_json
        try:
            # Opening JSON file
            f = open(config_file_path)
            # returns JSON object as a dictionary
            conf_json = json.load(f)
            f.close()
        except(OSError, json.JSONDecodeError, TypeError) as e:
            raise ValueError()
        return conf_json
    except(ValueError, FileNotFoundError) as e:
        print("Exception occurred getting config data {0}".format(e))


def __setting_global_config(exe_folder_name, conf_json):
    cnf = conf_json
    try:
        cnf['timestamp']= datetime.now(timezone.utc).isoformat()
        cnf["testFolder"] = exe_folder_name
        cnf['dataSpace'] = conf_json.get('dataSpace')
        cnf['tempSpace'] = conf_json.get('tempSpace')
        cnf["dumpConsoleToFile"] = conf_json.get("dumpConsoleToFile", False)
        cnf["Jira"] = conf_json.get("Jira")
        cnf["skippSpeedTest"] = conf_json.get("skippSpeedTest", True)#conf_json["skippSpeedTest"]
        cnf["host"] = conf_json.get("host", "www.google.com")

        if not cnf["skippSpeedTest"]:
            cnf["speed_factor"], cnf["ping [avg]"] = speedTesting.calculate_internet_speed_factor(cnf["host"])
            # set_metadata("ping",cnf["ping"])
        else :
            cnf["speed_factor"], cnf["ping [avg]"] =[1, None]
        
        return cnf
    except() as e:
        raise ValueError()
    
    
def init_metadata(__config, __exe_logger):
    metadata_helper.init_metadata(__config, __exe_logger)
    
#     metadata_exclude_options=['workspace','Jira']
#     configs = __config
#     metaData = {"testScript":sys.argv}
#     for config in __config:
#         if config not in metadata_exclude_options:
#             metaData[config]=configs[config]
#     return metaData


def init_execution_logger(__config):
    logger.__init_logger(__config)
    exelogger = logger.__createLogger("execution")
    return exelogger

def init_screenshot_folder(config):
    path = os.path.join(config['testFolder'], "screenshots")
    utils.create_folder(path)
