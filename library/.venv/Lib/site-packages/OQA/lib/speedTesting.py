import platform    # For getting the operating system name
import subprocess  # For executing a shell command

def __dataClining(rawData):
    requiredData = ["Average =", "Maximum =", "Minimum ="] # searching for
    rawLines = rawData.strip().split("\n")
    data = []

    # appending everything to single list
    for line in rawLines:
        data.extend(line.split(","))

    cleaned_array = {}

#   data cleaning process. which returns useful data
    for line in data:
        clean_line = line.strip()
        for rd in requiredData:
            if clean_line.startswith(rd):
                data_breakdown = clean_line.split('=')
                cleaned_array[data_breakdown[0].strip()]=data_breakdown[1].split('ms')[0]
                break  # Once matched, no need to check further
        # You might want to consider adding a condition to skip adding empty lines explicitly

    # print(len(cleaned_array))  # Optional: Print the length of cleaned data

    return cleaned_array


def __ping(host):
    """
    Returns True if host (str) responds to a ping request.
    Remember that a host may not respond to a ping (ICMP) request even if the host name is valid.
    """

    # Option for the number of packets as a function of
    param = '-n' if platform.system().lower()=='windows' else '-c'

    # Building the command. Ex: "ping -c 1 google.com"
    command = ['ping', param, '4', host]

    rawData = subprocess.getoutput(command)
    # print(rawData)
    data = __dataClining(rawData)

    return data["Average"]

# # config
# data = ping("www.google.com")
# print("data = ",data)


def calculate_internet_speed_factor(host):
    try:
        avg_speed = __ping(host)
        # executionLogger.info(f"Ping (Speedtest): {avg_speed['ping']} ms")

        if float(avg_speed) <= 50.0:
            speed_factor = 1
            # executionLogger.info(f"Speed factor is set to {speed_factor}")
        elif float(avg_speed) <= 100.0:
            speed_factor = 2
            # executionLogger.info(f"Speed factor is set to {speed_factor}")
        elif float(avg_speed) <= 150.0:
            speed_factor = 3
            # executionLogger.info(f"Speed factor is set to {speed_factor}")
        elif float(avg_speed) <= 200.0:
            speed_factor = 4
            # executionLogger.info(f"Speed factor is set to {speed_factor}")
        elif float(avg_speed) <= 250.0:
            speed_factor = 5
        else:
            raise Exception(f"Ping = {avg_speed}ms. Your internet speed is too slow to carry out the test. Aborting.")
    except Exception as e:
        # executionLogger.info(f"Exception occurred while checking the internet speed: {e}")
        exit(str(e))
    ping = avg_speed
    return speed_factor, str(ping+" ms")