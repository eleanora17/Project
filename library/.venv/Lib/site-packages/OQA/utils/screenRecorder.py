from OQA.core import cactions
from OQA.utils import utils
from time import sleep
import os
import atexit
from .. import __config, __exe_logger
import threading
from importlib.resources import files
import shutil


recording=False
paused=False
frames=0
capture_thread=None


def __init_rec_tmp_folder():
    normalised_workspace_path = utils.normalize_path(str(__config['testFolder'] + os.sep + '.rec'))
    utils.create_folder(normalised_workspace_path)


def __capture_images():
    global recording, frames
    __exe_logger.info("Screen recording started!")
    while(recording):
        cactions.capture_screen_for_recording(f".rec{os.sep}{frames:08d}")
        frames+=1
        sleep(1/10)
    # print('imgs')
    

def start_recording():
    __exe_logger.info("Initializing screen recording...")
    __init_rec_tmp_folder()
    global recording, capture_thread
    recording = True
    capture_thread = threading.Thread(target=__capture_images)
    capture_thread.start()
    # capture_images()
    # print('started')
    atexit.register(stop_recording)
    

def stop_recording():
    global recording, paused
    if(recording):
        recording = paused = False
        __exe_logger.info("Screen recording stopped")
        if(frames > 0):
            __stitch_video()
    
    
def pause_recording():
    global recording, paused
    if(recording and not paused):
        __exe_logger.info('Screen recording paused')
        
        
def resume_recording():
    global paused, capture_thread
    if(paused):
        capture_thread = threading.Thread(target=__capture_images)
        capture_thread.start()
        __exe_logger.info('Screen recording resumed')
        
        
def __stitch_video():
    __exe_logger.info("compiling screen recording...")
    src = str(files('OQA').joinpath("assets").joinpath("ffmpeg"))
    run_cmd = f"{src + os.sep + 'ffmpeg.exe'} -framerate 10 -i {str(__config['testFolder'] + os.sep + '.rec' + os.sep + '%08d.png')} -c:v libx264 -crf 0 {str(__config['testFolder'] + os.sep + 'output.mp4')}"
    
    import subprocess
    proc = subprocess.Popen(run_cmd)
    
    proc.wait()
    
    __exe_logger.info("removing temporary files")
    shutil.rmtree(str(__config['testFolder'] + os.sep + '.rec'))
    __exe_logger.info("Screen recording completed!")
    
    
def isRecording():
    global recording
    return recording