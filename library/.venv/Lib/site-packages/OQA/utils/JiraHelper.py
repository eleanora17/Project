import base64, os
from enum import Enum
from OQA.api.rest import post, get
from .. import __config, __exe_logger


class Issue_Types(Enum):
   AUTOMATION_TEST_FALIURE = "Automation Test Failure"
   AUTOMATION_TEST = "Automation Test"
   TASK = "Task"
   BUG = "Bug"
   TEST_REQUEST = "Test Request"
   STORY = "Story"
   MANUAL_TEST = "Manual Test"

#default to bug in the case Issue Type cannot be found
   @classmethod
   def _missing_(cls, value):
       return cls.BUG


JIRA_DOMAIN = "https://oqton.atlassian.net/"
API_ISSUE = JIRA_DOMAIN + "rest/api/3/issue"

ACTIVE_PROJECT_KEY = ""

HEADERS = None

#These were unused even in the java framework but I've left them here in case theyre needed later
# API_CREATE_META = JIRA_DOMAIN + "rest/api/3/issue/createmeta"
# API_MYSELF = JIRA_DOMAIN + "rest/api/3/myself"
# PROJECT_NAME = "Oqton Cloud QA"
# PROJECT_KEY = "QA"
# REPORTER_ID = "712020:9418f14e-d172-400f-9497-274e3cd95b5a"
# LABEL_REGRESSION = "Regression"

def initialiseJiraHelper(userEmail:str,apiToken:str,projectKey:str):
    
    if not isinstance(userEmail,str): raise TypeError(f"userEmail expected type {str} got {type(userEmail)}")
    if not isinstance(apiToken,str): raise TypeError(f"apiToken expected type {str} got {type(apiToken)}")
    if not isinstance(projectKey, str): raise TypeError(f"projectKey expected type {str} got {type(projectKey)}")

    global ACTIVE_PROJECT_KEY
    ACTIVE_PROJECT_KEY = projectKey
    encodedAuthAsBytes = base64.b64encode( bytes(f"{userEmail}:{apiToken}","UTF-8") )
    encodedAuthAsString = encodedAuthAsBytes.decode("UTF-8")

    global HEADERS 
    HEADERS = {
                "Authorization": f"Basic {encodedAuthAsString}",
               "Content-Type": "application/json"
               }

def getAccountIdByEmail(email):
    url = f"{JIRA_DOMAIN}rest/api/3/user/search?query={email}"

    response = get(url, headers=HEADERS)
    if response["success"]:
        users = response["rawData"]["json"]
        if users:
            return users[0]["accountId"]
    return None

def createJiraTicket(summary:str, issue_type:str,assignee_email:str="Unassigned", description="", attachmentPaths=[]):
    if not HEADERS:
        __exe_logger.info("Jira Helper was not initialised. Ticket will not be created.")
        return None
    
    if not isinstance(summary,str): 
        raise TypeError(f"Summarry expected type {str} got {type(summary)}")
    if not isinstance(issue_type, str): 
        raise TypeError(f"issue_type expected type {str} got {type(issue_type)}")
    # if not isinstance(labels,list): 
    #     raise TypeError(f"labels expected type {list} got {type(labels)}")
    # if not len(list(filter(lambda x: isinstance(x,str),labels))) == len(labels): #checking if all list elements are of type str
    #     raise TypeError(f"One or more labels are not of type {type(str)}")
    if not isinstance(assignee_email, str): 
        raise TypeError(f"assignee_email expected type {str} got {type(assignee_email)}")
    if not isinstance(description,str):
        raise TypeError(f"Description expected type {str} got {type(description)}")
    
    assignee_id =  getAccountIdByEmail(assignee_email) if assignee_email!="Unassigned" else None

    description_in_doc_format = {
                                "version": 1,
                                "type": "doc",
                                "content": [
                                            {
                                                "type": "paragraph",
                                                "content": [
                                                    {
                                                    "type": "text",
                                                    "text": description
                                                    }
                                                ]
                                            }
                                        ]
                                }
    
    if not assignee_id and assignee_email != "Unassigned":
        __exe_logger.info(f"Could not find user with assignee email:{assignee_email}. Ticket not created")
        return None

    jsonPayload = {
                    "fields": {
                    "project":
                    {
                        "key": ACTIVE_PROJECT_KEY
                    },
                    "summary": summary,
                    "description": description_in_doc_format,
                    "issuetype": {
                        "name": issue_type
                    },
                    "assignee": {
                        "accountId": assignee_id
                    }
                }
            }

    response = post(API_ISSUE, json= jsonPayload, headers=HEADERS)
    if (response["faliure"]):
        __exe_logger.warning(f"Failed to create ticket: {response["description"]}")
    else:
        if(len(attachmentPaths)):
           urlForAttachments = response["rawData"]["json"]["self"] + "/attachments"
           addAttachmentsToTicket(urlForAttachments,attachmentPaths)

    return response

def addAttachmentsToTicket(url, filePaths):
    if not HEADERS:
        __exe_logger.info("Jira Helper was not initialised. Attachments will not be uploaded.")
        return None
    header = {
                "Authorization": HEADERS["Authorization"],
                "Accept": "application/json",
                "X-Atlassian-Token": "no-check"
               }
    
    for file in filePaths:
        head , tail = os.path.split(file)
        fileToUpload = { "file": (f'{tail}', open(file, 'rb'), 'application-type') }
        response=post(url,headers=header, files=fileToUpload)
        if (response["faliure"]):
            __exe_logger.warning(f"Failed to upload attachment ({tail}): {response["description"]}")
            print(response)
    


def __autoInitialiseJiraHelper():
    config:dict = __config["Jira"]      #getConfig()["Jira"]
    if config == None : 
        __exe_logger.warning("No Jira config present. Please Initialise Jira Helper manually.")
        return

    keysRequiredInConfig = set(["userEmail","apiToken","projectKey"])
    config_keys = config.keys()
    if not keysRequiredInConfig.issubset(config_keys):
        missingKeys = keysRequiredInConfig.difference(config_keys)
        __exe_logger.warning(f"Keys missing in config ({missingKeys}). Please Initialise Jira Helper manually.")
        return
    
    initialiseJiraHelper(config["userEmail"], config["apiToken"], config["projectKey"])


__autoInitialiseJiraHelper()