
from typing import List, Dict, Any, Optional
from datetime import datetime
from OQA.lib import pkg_installer

pkg_installer.install_package("azure-data-tables")

from azure.data.tables import TableServiceClient, TableClient
from azure.core.credentials import AzureNamedKeyCredential

# Global variables for service client and table name
AZ_SERVICE_CLIENT: Optional[TableServiceClient] = None




def initialize_connection(storage_account_name: str, storage_account_key: str) -> None:
    """
    Establishes a connection to Azure Table Storage using the provided credentials.
    
    Args:
        storage_account_name (str): The name of the Azure storage account.
        storage_account_key (str): The key for the storage account.
    
    Returns:
        None
    """
    global AZ_SERVICE_CLIENT
    try:
        credential = AzureNamedKeyCredential(storage_account_name, storage_account_key)
        AZ_SERVICE_CLIENT = TableServiceClient(
            endpoint=f"https://{storage_account_name}.table.core.windows.net/", 
            credential=credential
        )
        print(f"Connected to storage account: {storage_account_name}")
    except Exception as e:
        raise ConnectionError(f"Failed to connect to the Azure Table Storage: {str(e)}")


def get_table_entries(table: str) -> List[Dict[str, Any]]:
    """
    Lists all entities in a specified table.
    
    Args:
        table (str): The name of the table to retrieve entities from.
    
    Returns:
        List[Dict[str, Any]]: A list of dictionaries, each representing an entity in the table.
    """
    if AZ_SERVICE_CLIENT is None:
        raise ConnectionError("Azure service client is not initialized. Please call 'initialize_connection' first.")
    
    try:
        table_client: TableClient = AZ_SERVICE_CLIENT.get_table_client(table)
        # queried_results = [entity for entity in table_client.list_entities()]
        data = []
        for entity in table_client.list_entities():
            data.append( {key: __serialize_value(value) for key, value in entity.items()})

        print(f"Found {len(data)} entries in table '{table}'.")
        return data
    except Exception as e:
        raise ValueError(f"Failed to list entities for table '{table}': {str(e)}")


def get_all_tables() -> List[str]:
    """
    Lists all the tables available in the connected Azure storage account.
    
    Returns:
        List[str]: A list of table names in the storage account.
    """
    if AZ_SERVICE_CLIENT is None:
        raise ConnectionError("Azure service client is not initialized. Please call 'initialize_connection' first.")
    
    try:
        tables = AZ_SERVICE_CLIENT.list_tables()
        table_names = [table.name for table in tables]
        print(f"Found {len(table_names)} tables in the account.")
        return table_names
    except Exception as e:
        raise ValueError(f"Failed to list tables: {str(e)}")


def query_table(table_name: str, query: str) -> List[Dict[str, Any]]:
    """
    Queries a specified table using a query filter and returns the results.
    
    Args:
        table_name (str): The name of the table to query.
        query (str): The OData query filter to apply.
    
    Returns:
        List[Dict[str, Any]]: A list of dictionaries representing the queried entities.
    """
    if AZ_SERVICE_CLIENT is None:
        raise ConnectionError("Azure service client is not initialized. Please call 'connect' first.")
    
    try:
        table_client = AZ_SERVICE_CLIENT.get_table_client(table_name)
        queried_results = table_client.query_entities(query_filter=query)
        data = []
        for item in queried_results:
            data.append( {key: __serialize_value(value) for key, value in item.items()})

        print(f"Queried {len(data)} results from table '{table_name}'.")
        return data
    except Exception as e:
        raise ValueError(f"Failed to query table '{table_name}' with query '{query}': {str(e)}")
    


def __serialize_value(value):
    if isinstance(value, datetime):
        return value.isoformat()
    else:
        return value