# from common.initialize import getDriver
from ..core import cactions
from selenium.webdriver.common.by import By
from selenium.common import StaleElementReferenceException, NoSuchElementException, InvalidSelectorException, NoSuchAttributeException
from .. import __exe_logger

#Function which returns xpath using javascript
def __get_element_xpath(element):
    action = """
        function getElementXPath(element) {
            if (!element || !element.tagName || element.tagName.toLowerCase() === 'html' || element.tagName.toLowerCase() === 'body') {
                return '//' + element.tagName.toLowerCase();
            }
            var path = '';
            var siblings = element.parentNode.childNodes;
            var index = 1;
            for (var i = 0; i < siblings.length; i++) {
                var sibling = siblings[i];
                if (sibling === element) {
                    path = getElementXPath(element.parentNode) + '/' + element.tagName.toLowerCase() + '[' + index + ']';
                    break;
                }
                if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {
                    index++;
                }
            }
            return path;
        }
        return getElementXPath(arguments[0]);
        """
    return cactions.execute_javascript(action, element)

# 
def __create_xpath_expression(text='', tag_name='', attribute_name='', attribute_value=''):
    pre = "//body"
    xpath = ''
    if text != '' and tag_name != '' and attribute_name != '' and attribute_value != '':
        xpath += f"{pre}//{tag_name}[@{attribute_name}='{attribute_value} and text()='{text}']"

    elif text != '' and tag_name != '' and attribute_value != '':
        xpath += f"{pre}//{tag_name}[@*='{attribute_value}' and text()='{text}']"

    elif tag_name != '' and attribute_name!= '' and attribute_value != '':
        xpath += f"{pre}//{tag_name}[@{attribute_name}='{attribute_value}']"

    elif text != '' and tag_name != '' and (tag_name == 'input' or tag_name=='textarea'):
        xpath += f"{pre}//*[text()='{text}' or  @*='{text}']"

    elif text != '' and tag_name != '':
        xpath += f"{pre}//{tag_name}[text()='{text}' or  @*='{text}']"

    elif attribute_value != '' and tag_name != '':
        xpath += f"{pre}//{tag_name}[@*='{attribute_value}']"

    elif text != '':
        xpath += f"{pre}//*[@*='{text}' or text()='{text}']"

    elif tag_name != '':
        xpath += f"{pre}//{tag_name}"
    
    # print("xpath expression",xpath)
    return xpath

# get all the list of abs xpath based on element list
def __get_absolute_xpath(elements):
    xpath_list=[]
    for element in elements:
        xpath = __get_element_xpath(element)
        xpath_list.append(xpath)
    return xpath_list

# finding the most similer xpath based of context
# def __get_most_similar_XPath(context_xpath, list_of_xpaths)->str:
#     context_xpath_segments = []
#     list_of_xpaths_segments = []

#     # 
#     context_xpath_segments = context_xpath.split("/")

#     # creating list of list xpaths. 2D array
#     for xpath in list_of_xpaths:
#         xpath_segments= xpath.split("/")
#         list_of_xpaths_segments.append(xpath_segments)

#     # Initialize similarity count array
#     similarity_count = [0 for _ in range(len(list_of_xpaths))]

#     # Compare segments to find the most similar XPath
#     for i in range(len(context_xpath_segments)):
#         indices_to_ignore = []
#         for j in range(len(list_of_xpaths_segments)):
#             if j not in indices_to_ignore:
#                 try:
#                     if context_xpath_segments[i] == list_of_xpaths_segments[j][i]:
#                         similarity_count[j] += 1
#                     else:
#                         indices_to_ignore.append(j)
#                 except IndexError:
#                     indices_to_ignore.append(j)

#     temp_array = similarity_count.copy()
#     temp_array.sort(reverse=True)
    
#     # print(similarity_count)
#     # print(temp_array)

#     most_similar_index = similarity_count.index(temp_array[0])

#     global __log
#     __log['similarity']={"similarity_count_array":temp_array, "most_similar_index":most_similar_index, "ans":list_of_xpaths[most_similar_index], "similarity_based_on":context_xpath_segments}

#     return list_of_xpaths[most_similar_index]


def compute_similarity(x1, x2):
    segments1 = x1.split('/')
    segments2 = x2.split('/')
    common_length = 0
    max_common_length = min(len(segments1), len(segments2))
    
    for i in range(max_common_length):
        if segments1[i] == segments2[i]:
            common_length += 1
        else:
            break
    
    return common_length

def __get_most_similar_XPath(context_xpath, list_of_xpaths) -> str:
    best_match = None
    max_similarity = -1
    
    for xpath in list_of_xpaths:
        similarity = compute_similarity(context_xpath, xpath)
        if similarity > max_similarity:
            max_similarity = similarity
            best_match = xpath
    return best_match


def __find_all_elements(xpath) -> list:
    # return cactions.wait_for_presence_of_all_elements(element_xpath=xpath)
    return cactions.find_elements_by(element_xpath=xpath)

def __search_for_elements(text='', tag_name='', attribute_name='', attribute_value='', context:bool=False) -> list:
    xpath_abs_list=[]
    
    xpath = __create_xpath_expression(text, tag_name, attribute_name, attribute_value)
    
#   Fatching all the data here from the browser
    for _ in range(0,3):
        all_element = __find_all_elements(xpath)

        # print("All Elements total",len(all_element), "context",context, "all elements",all_element)
        
        if all_element and len(all_element)>0:

            # if len(all_element) == 1 and not context:
            if not context:
                my_xpath = [xpath]
                # print(f"{[my_xpath]}")
                return my_xpath
            
            xpath_abs_list = __get_absolute_xpath(all_element)
            # print("all the xpaths", xpath_abs_list)
            return xpath_abs_list
        else:
            cactions.sleep(0.5)
    
            

    
def get_xpath_by(text='', tag_name='', attribute_name='', attribute_value='', context='', offset=1, max_depth=0, total_attempts=10) :
    attempt = 0
    xpath_to_return = None

    params = {
        'text': text,
        'tag_name': tag_name,
        'attribute_name': attribute_name,
        'attribute_value': attribute_value,
        'context': context,
        'offset': offset,
        'max_depth': max_depth,
        'total_attempts': total_attempts
    }

    msg = ""
    for key, value in params.items():
        if value != '' and value != 0:
            msg +=f"{key}: {value}, "
            # print(f"{key}: {value}")
    
    __exe_logger.info(msg[0:len(msg)-2])
    cactions.wait_for_page_load()
    __exe_logger.debug("Looking for element using Dyanamic element finder")

    while attempt < total_attempts:
        try:
            if tag_name =="input" and  attribute_name=="type" and  attribute_value=="file" and context !='':
                context_abs = __search_for_elements(context, context=True)
                if len(context_abs)>0:
                    search_by = __search_for_elements(tag_name="input", attribute_name="type", attribute_value="file", context=True)
                    xpath_to_return = __get_most_similar_XPath(context_abs[0], search_by)

            elif tag_name =="input" and  attribute_name=="type" and  attribute_value=="file":
                xpath = __search_for_elements(tag_name="input", attribute_name="type", attribute_value="file")
                xpath_to_return = xpath[offset-1]

            elif (tag_name =="input" or tag_name == "textarea") and  context !="":
                context_abs = __search_for_elements(context, context=True)

                if len(context_abs)>0:
                    tag_abs = __search_for_elements(tag_name=tag_name, context=True)
                    search_by = __search_for_elements(text, attribute_name, attribute_value, context=True)
                    temp = __get_most_similar_XPath(context_abs[0], search_by)
                    xpath_to_return = __get_most_similar_XPath(temp, tag_abs)
                
            elif tag_name =="input" or tag_name == "textarea":
                search_by = __search_for_elements(text, attribute_name, attribute_value, context=True)

                if len(search_by)>0:
                    tag_abs = __search_for_elements(tag_name=tag_name, context=True)
                    xpath_to_return = __get_most_similar_XPath(search_by[0], tag_abs)
            
            elif context != "":
                context_abs = __search_for_elements(context, context=True)

                if len(context_abs)>0:
                    search_by = __search_for_elements(text, tag_name, attribute_name, attribute_value, context=True)
                    xpath_to_return = __get_most_similar_XPath(context_abs[0], search_by)
            
            else:
                xpath = __search_for_elements(text, tag_name, attribute_name, attribute_value)
                xpath_to_return = xpath[offset-1]
    
            if xpath_to_return != None:
                __exe_logger.debug(f"Generated xpath for [{msg[0:len(msg)-2]}]: {xpath_to_return}")
                element = cactions.find_element_by(element_xpath=xpath_to_return)
                cactions.scrollToElement(element)
                return xpath_to_return
        
        except Exception as e:
            pass
        
        attempt += 1
        cactions.sleep(1)
    __exe_logger.info(f"Unable to find element [{msg}]")
    return None
    